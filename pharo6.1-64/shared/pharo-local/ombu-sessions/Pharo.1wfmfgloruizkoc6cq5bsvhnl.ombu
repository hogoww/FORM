OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T14:00:52.24494+02:00' ],		#prior : OmReference [ 'Pharo.hswpza4xmtz8tgggsd98vwr4', '20' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyMe,			#protocol : #unification,			#sourceCode : 'unifyMe\r\t|modified operationAnswer|\r\tmodified:=true.\r\t[modified] whileTrue:[\r\t\tmodified:=false.\r\t\tsetOfPairs do:[:each |\r\t\t\t\t(Prop debugUnification)\r\t\t\t\tifTrue:[Transcript show:self;cr.].\r\r\t\t\t\toperationAnswer:=self tryOperations: each.\r\t\t\t\t(operationAnswer right)"NotPossible to unify?"\r\t\t\t\tifTrue:["On a conflict or a fail check"\r\t\t\t\t\tTranscript show:\'Unification impossible\';cr."TEMPORARY"\r\t\t\t\t\t^nil.\r\t\t\t\t\t]."else we go on till we didn\'t do anything more"\r\t\t\t\tmodified:=modified or:[operationAnswer left.]."isModified was put arbitrily= in left"\r\t\t\t]\r\t\t].\r\t^setOfPairs.\r\t',			#stamp : 'pm 10/18/2018 20:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyMe,			#protocol : #unification,			#sourceCode : 'unifyMe\r\t|modified operationAnswer|\r\tmodified:=true.\r\t[modified] whileTrue:[\r\t\tmodified:=false.\r\t\tsetOfPairs do:[:each |\r\t\t\t\t(Prop debugUnification)\r\t\t\t\tifTrue:[Transcript show:self;cr.].\r\r\t\t\t\toperationAnswer:=self tryOperations: each.\r\t\t\t\t(operationAnswer right)"NotPossible to unify?"\r\t\t\t\tifTrue:["On a conflict or a fail check"\r\t\t\t\t\tTranscript show:\'Unification impossible\';cr."TEMPORARY"\r\t\t\t\t\tsetOfPairs:=nil.\r\t\t\t\t\t^0"return value doesn\'t matter, we just want to break out"\r\t\t\t\t\t].\r\t\t\t\t"else we go on till we didn\'t do anything more"\r\t\t\t\tmodified:=modified or:[operationAnswer left.]."isModified was put arbitrily= in left"\r\t\t\t]\r\t\t].\r\t',			#stamp : 'pm 10/19/2018 14:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T14:03:06.298984+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @23				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @23				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T15:41:28.992661+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'initialize:Predicate2:',			#protocol : #initialization,			#sourceCode : 'initialize: p1 Predicate2: p2\r\tsetOfPairs:=MinimalOrderedSet new.\r\tsetOfPairs add:(Pair left: p1 right: p2).',			#stamp : 'pm 10/15/2018 16:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'initialize:Predicate2:',			#protocol : #initialization,			#sourceCode : 'initialize: p1 Predicate2: p2\r\t"initialized with two predicates, that we\'ll try to unify."\r\r\t"init two different pair to be sure that we have the initial\r\tone to unify at the end."\r\tinitialPair:=(Pair left: p1 right: p2).\r\tsetOfPairs:=MinimalOrderedSet new.\r\tsetOfPairs add:(Pair left: p1 right: p2).\r\thasFailed:=false.\r',			#stamp : 'pm 10/19/2018 15:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T15:43:09.126261+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'check:',			#protocol : #unification,			#sourceCode : 'check: aPair\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'check\';cr.].\r\t\r\t^((aPair right) contains: aPair left).',			#stamp : 'pm 10/18/2018 22:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'check:',			#protocol : #unification,			#sourceCode : 'check: aPair\r\t"Not active yet"\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'check\';cr.].\r\t\r\t^((aPair right) contains: aPair left).',			#stamp : 'pm 10/19/2018 15:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T15:45:10.331815+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyThis\r\t',			#stamp : 'pm 10/19/2018 15:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T15:45:16.104134+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyThis\r\t',			#stamp : 'pm 10/19/2018 15:45',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\t',			#stamp : 'pm 10/19/2018 15:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:03:04.945647+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\t',			#stamp : 'pm 10/19/2018 15:45',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now set of pair contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil.\r\t\t].\r\tsetOfPairs do: [  ].',			#stamp : 'pm 10/19/2018 16:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:09:16.64717+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now set of pair contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil.\r\t\t].\r\tsetOfPairs do: [  ].',			#stamp : 'pm 10/19/2018 16:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each| \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:09:41.793087+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each| \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:43:12.032684+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt unifyMe.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/18/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt unifyThis.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/19/2018 16:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:45:43.367092+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt unifyThis.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/19/2018 16:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt:=\tt unifyMe.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/19/2018 16:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:47:40.692973+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:47:49.436466+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyThis,			#protocol : #unification,			#sourceCode : 'UnifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:49:55.928673+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt:=\tt unifyMe.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/19/2018 16:45',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'UnificationUnitTest:',			#protocol : #testing,			#sourceCode : 'UnificationUnitTest: otherPredicate\r\t|t|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tt:=\tt unifyThis.\r\tTranscript show:t;cr;cr.\r\t^t',			#stamp : 'pm 10/19/2018 16:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:50:11.129492+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself UnifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself unifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:52:58.227548+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=true.\r\ttestNumber:=0.',			#stamp : 'pm 10/18/2018 21:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=false.\r\ttestNumber:=0.',			#stamp : 'pm 10/19/2018 16:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:54:54.580792+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'eliminate:',			#protocol : #unification,			#sourceCode : 'eliminate: aPair\r\t|left right previousSet newSet |\r\t\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'eliminate\';cr.].\r\t\r\tleft:=aPair left.\r\tright:=aPair right.\r\tnewSet:=MinimalOrderedSet new.\r\t\r\tpreviousSet:=setOfPairs veryDeepCopy."we need to work on a copy, to avoid having another iteration"\r\tpreviousSet remove:aPair.\r\t\r\tpreviousSet do:[:each |\r\t\t"tempVar:=each veryDeepCopy.""since we modify the underlying data, we work on a copy"\r\t\tnewSet add:(Pair left: ((each left) replace: left by:right)\r\t\t\t\t\t\t\t\tright:((each right) replace:left by:right)).].\r\tTranscript show:\'Previous Set \';show:previousSet;cr;show:\'newOne \';show:newSet;cr.\r\t(previousSet = newSet)\r\tifTrue:[\r\t\t^false "Nothing changed"\r\t\t]\r\tifFalse:[\r\t\tnewSet add:aPair."add back the argument. Corresponds to the union of G and the pair we do the elimination with"\r\t\tsetOfPairs:=newSet."replace with new set"\r\t\t^true. "modifications were mades"\r\t\t].\r\t\r',			#stamp : 'pm 10/18/2018 21:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'eliminate:',			#protocol : #unification,			#sourceCode : 'eliminate: aPair\r\t|left right previousSet newSet |\r\t\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'eliminate\';cr.].\r\t\r\tleft:=aPair left.\r\tright:=aPair right.\r\tnewSet:=MinimalOrderedSet new.\r\t\r\tpreviousSet:=setOfPairs veryDeepCopy."we need to work on a copy, to avoid having another iteration"\r\tpreviousSet remove:aPair.\r\t\r\tpreviousSet do:[:each |\r\t\t"tempVar:=each veryDeepCopy.""since we modify the underlying data, we work on a copy"\r\t\tnewSet add:(Pair left: ((each left) replace: left by:right)\r\t\t\t\t\t\t\t\tright:((each right) replace:left by:right)).].\r\t(previousSet = newSet)\r\tifTrue:[\r\t\t^false "Nothing changed"\r\t\t]\r\tifFalse:[\r\t\tnewSet add:aPair."add back the argument. Corresponds to the union of G and the pair we do the elimination with"\r\t\tsetOfPairs:=newSet."replace with new set"\r\t\t^true. "modifications were mades"\r\t\t].\r\t\r',			#stamp : 'pm 10/19/2018 16:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-19T16:55:53.424794+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself unifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifFalse:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself unifyMe."Now setOfPairs contains my unifier"\r\t(hasFailed)\r\tifTrue:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\tsetOfPairs do:[ :each | \r\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t].\r\t^initialPair',			#stamp : 'pm 10/19/2018 16:55',			#package : #_resolution_1erOrdre		}	}}