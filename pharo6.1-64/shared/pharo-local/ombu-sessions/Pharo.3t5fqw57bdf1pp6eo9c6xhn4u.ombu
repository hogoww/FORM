OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:48:10.34657+02:00' ],		#prior : OmReference [ 'Pharo.eobekkfg6c7n7p8qepe2y56dp', '87' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:48',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:48:13.472669+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #'as yet unclassified',			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/30/2018 18:48',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:48:57.627719+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchParternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchParternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\t\tifFalse:[operand:=operand clausification].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r',			#stamp : 'pm 9/30/2018 15:58',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\t\tifFalse:[operand:=operand clausification].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r',			#stamp : 'pm 9/30/2018 18:48',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:49:13.387823+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((Or patternFalse) matchParternWith: self)\r\tifTrue:[^left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchParternWith: self)\r\t\tifTrue:[^right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 17:25',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[^left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[^right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 18:49',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:49:29.524655+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((And patternFalse) matchParternWith: self)\r\tifTrue:[^right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchParternWith: self)\r\t\tifTrue:[^left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^right]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 17:08',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((And patternFalse) matchPatternWith: self)\r\tifTrue:[^right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[^left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^right]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 18:49',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:50:02.494373+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True new.\r\tpatternFalse:=False new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 14:13',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 18:50',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:50:14.695223+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #'as yet unclassified',			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/30/2018 18:48',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #testing,			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/30/2018 18:48',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:51:34.692682+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const  initialize.\r\tTrue_Const  initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.',			#stamp : 'pm 9/30/2018 18:51',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:51:37.584958+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const  initialize.\r\tTrue_Const  initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.',			#stamp : 'pm 9/30/2018 18:51',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.',			#stamp : 'pm 9/30/2018 18:51',			#package : #_Specification		}	}}