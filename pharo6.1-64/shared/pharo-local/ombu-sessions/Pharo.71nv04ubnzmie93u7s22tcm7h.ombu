OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T12:12:55.968098+02:00' ],		#prior : OmReference [ 'Pharo.bde3buwgttun1mprizx45ssyq', '76' ],		#self : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-new:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:12'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-new:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/23/2018 12:12'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T12:13:25.330003+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:13'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-new:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#oldStamp : 'pm 10/23/2018 12:12',		#newStamp : 'pm 10/23/2018 12:13'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T12:15:52.80775+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\r\tPrivate:\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:15'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\t\t<Object>\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\r\tPrivate:\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#oldStamp : 'pm 10/23/2018 12:13',		#newStamp : 'pm 10/23/2018 12:15'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T12:16:23.998558+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:16'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',		#oldStamp : '<historical>',		#newStamp : 'pm 10/23/2018 12:16'	}}