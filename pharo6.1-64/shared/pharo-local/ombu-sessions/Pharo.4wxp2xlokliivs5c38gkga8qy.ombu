OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-20T17:40:46.798974+02:00' ],		#prior : OmReference [ 'Pharo.wpv5xxflokmwui9b2zdgxlg4', '8' ],		#self : OmReference [ '1' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '4wxp2xmclz7iiy6ir7ez5k23i', '1' ]		]	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2018-10-20T17:40:46.83635+02:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyMe,			#protocol : #unification,			#sourceCode : 'unifyMe\r\t| modified operationAnswer i |\r\tmodified := true.\r\t[ modified ]\r\t\twhileTrue: [ modified := false.\r\t\t\ti := 1.\r\t\t\t[(i <= setOfPairs size and: [ i ~= -1 ])]\r\t\t\t\twhileTrue: [ Prop debugUnification\r\t\t\t\t\t\tifTrue: [ Transcript\r\t\t\t\t\t\t\t\tshow: self;\r\t\t\t\t\t\t\t\tcr ].\r\t\t\t\t\toperationAnswer := self tryOperations: (setOfPairs at: i).\r\t\t\t\t\toperationAnswer right\r\t\t\t\t\t\tifTrue: [ "On a conflict or a fail check"\r\t\t\t\t\t\t\tTranscript\r\t\t\t\t\t\t\t\tshow: \'Unification impossible\';\r\t\t\t\t\t\t\t\tcr.\t"TEMPORARY"\r\t\t\t\t\t\t\tsetOfPairs := nil.\r\t\t\t\t\t\t\t^ 0\t"return value doesn\'t matter, we just want to break out" ].\t"NotPossible to unify?"\r\t\t\t\t\t"else we go on till we didn\'t do anything more"\r\t\t\t\t\tmodified := modified or: [ operationAnswer left ].\t"isModified was put arbitrily in left"\r\t\t\t\t\tmodified\r\t\t\t\t\t\tifTrue: [ "we want to get to the next iteration" i := -1 ]\r\t\t\t\t\t\tifFalse: [ i := i + 1 ] ]\t"-1 is for when we won\'t break." ]',			#stamp : 'pm 10/20/2018 17:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyMe,			#protocol : #unification,			#sourceCode : 'unifyMe\r\t| modified operationAnswer i |\r\tmodified := true.\r\t[ modified ]\r\twhileTrue: [\r\t\tmodified := false.\r\t\ti := 1.\r\t\t[(i <= setOfPairs size and: [ i ~= -1 ])]\r\t\twhileTrue: [ \r\t\t\tProp debugUnification\r\t\t\tifTrue: [ Transcript show: self;cr ].\r\t\t\toperationAnswer := self tryOperations: (setOfPairs at: i).\r\t\t\toperationAnswer right\r\t\t\tifTrue: [ "On a conflict or a fail check"\r\t\t\t\tTranscript show: \'Unification impossible\'; cr.\t"TEMPORARY"\r\t\t\t\tsetOfPairs := nil.\r\t\t\t\t^nil "return value doesn\'t matter, we just want to break out" \r\t\t\t\t].\t"NotPossible to unify?"\r\t\t\t"else we go on till we didn\'t do anything more"\r\t\t\tmodified := modified or: [ operationAnswer left ].\t"isModified was put arbitrily in left"\r\t\t\tmodified\r\t\t\tifTrue: [ "we want to get to the next iteration" \ti := -1 ]\r\t\t\tifFalse: [ i := i + 1 ]. \r\t\t\t].\t"-1 is for when we won\'t break." \r\t\t].',			#stamp : 'pm 10/20/2018 17:40',			#package : #_resolution_1erOrdre		}	}}