OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:42.788667+02:00' ],		#prior : OmReference [ 'Pharo.esciizd0c581ud2a2wi9n9edn', '9' ],		#self : OmReference [ '1' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteUnary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteUnary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:42.935609+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteMinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteMinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.068272+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'AnObsoleteConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.202787+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.349538+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.590224+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteTrue_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteTrue_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.73081+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Clause\r\tinstanceVariableNames: \'atomes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Clause,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteClause,						#isMetaSide : false					},					#name : #atomes,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Clause class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteClause class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteClause,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.858181+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'patternAnd patternAndSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'AnObsoleteOr class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternAndSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteOr,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:43.978465+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteExists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteExists,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.119941+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AbstractTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #AbstractTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteAbstractTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAbstractTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.241899+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteAtome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAtome,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.372832+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteImply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteImply,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.498215+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'AnObsoleteConstant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteConstant class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteConstant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.622878+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteForAll,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.742476+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAbstractTerm subclass: #UnaryTerm\r\tinstanceVariableNames: \'term\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #UnaryTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnaryTerm,						#isMetaSide : false					},					#name : #term,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnaryTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteUnaryTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteUnaryTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:44.984885+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteEqual class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteEqual,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.117064+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteUnary',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteUnary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteQuantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteQuantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteQuantifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.240877+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteNotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.362133+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'patternOr patternOrSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'AnObsoleteAnd class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternOrSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAnd,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.555823+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteUnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteUnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteLinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteLinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.698986+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePredicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePredicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoletePredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoletePredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.849701+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteBinary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteBinary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteBinary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteBinary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:45.978615+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteNotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNotVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.12435+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug testNumber\''				},				#name : #'AnObsoleteProp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteProp,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.254674+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteProp',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteProp subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'AnObsoleteOperator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOperator class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteOperator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.384998+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteVar,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.61429+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteConstant',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteConstant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteFalse_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteFalse_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.746118+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteFuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteFuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'currentFuncNumber anonymousFuncSymb\''				},				#name : #'AnObsoleteFuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteFuncTerm class',							#isMetaSide : true						},						#name : #currentFuncNumber,						#parent : @16					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteFuncTerm class',							#isMetaSide : true						},						#name : #anonymousFuncSymb,						#parent : @16					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteFuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:27:46.858331+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteUnary',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteUnary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'AnObsoleteNot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNot,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.663182+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AbstractTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #AbstractTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AbstractTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AbstractTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.669509+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.671458+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^SubclassResponsibility.',			#stamp : 'pm 10/11/2018 10:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.673465+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\t"Used to check if a term, or more often a funcTerm is const, while trying to unify a term with a funcTerm."\r\t^false.',			#stamp : 'pm 10/15/2018 16:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.67803+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].',			#stamp : 'pm 10/11/2018 15:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.685199+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.688489+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.692964+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialization,			#sourceCode : 'add: clause\r\t(clause isKindOf: Clause)\r\tifTrue: [ self clauses add: clause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].',			#stamp : 'pm 10/9/2018 13:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.696205+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: ClausifiedFormula\r\tclauses:=MinimalOrderedSet new.\r\tself addAll: ClausifiedFormula.',			#stamp : 'pm 10/15/2018 15:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.699505+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #initialization,			#sourceCode : 'addAll: clausifiedProp\r\t((clausifiedProp  isKindOf: Or) | (clausifiedProp isKindOf: Atome))\r\t "If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self clauses add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isKindOf: Not)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isKindOf:Atome)\r\t\t\tifTrue:[^self clauses add:(Clause new:clausifiedProp).]\r\t\t\tifFalse:[^Error new:\'a not isn\'\'t englobing an atome\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isKindOf: And)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\tError new: \'Tried to add a non clause object to a clausaleForm\'.].\r\t].\r\t].',			#stamp : 'pm 10/9/2018 13:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.702246+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #initialization,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=\'{\'.\r\t\tclauses do: [  :each | t:=t,(each prettyPrint). ] separatedBy: [t:=t,\',\'].\r\tt:=t,\'}\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.706752+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tclauses:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/15/2018 15:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.708898+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #clauses,			#protocol : #accessing,			#sourceCode : 'clauses\r\t^clauses.',			#stamp : 'pm 10/1/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.714713+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: ClausaleProposition\r\t^self basicNew initialize:ClausaleProposition.',			#stamp : 'pm 10/3/2018 12:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.716489+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize.',			#stamp : 'pm 10/3/2018 12:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.722333+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Clause\r\tinstanceVariableNames: \'atomes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Clause,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Clause,						#isMetaSide : false					},					#name : #atomes,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Clause class\r\tinstanceVariableNames: \'\''				},				#name : #'Clause class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Clause,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.728356+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.73525+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=\'{\'.\r\t\tatomes do:[  :each | t:=t,(each prettyPrint). ] separatedBy:[t:=t,\',\'].\r\tt:=t,\'}\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.738978+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'add:',			#protocol : #accessing,			#sourceCode : 'add: var\r\t(var isKindOf: Atome)\r\t\tifTrue:[\r\t\t\t(self atomes) add:var.\r\t\t\t^self."able chaining operation"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t\tError new: \'wrong type in clause\'.\r\t\t\t].',			#stamp : 'pm 10/9/2018 13:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.741368+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #atomes,			#protocol : #accessing,			#sourceCode : 'atomes\r\t^atomes.',			#stamp : 'pm 10/1/2018 20:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.748333+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: orProp\r\t(orProp isKindOf: Atome)\r\tifTrue:[self add:orProp.]\r\tifFalse:[\r\t\t((orProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(orProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((orProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (orProp operand) getSymb fromList: (orProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((orProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((orProp operand) getSymb)).]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ]].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((orProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (orProp left).\r\t\t\t\tself addAll: (orProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tError new:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 13:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.756291+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tatomes:=MinimalOrderedSet new.',			#stamp : 'pm 10/15/2018 15:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.762256+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize: OrProp\r\tatomes:=MinimalOrderedSet new.\r\tself addAll:OrProp.',			#stamp : 'pm 10/15/2018 15:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.773241+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Clause class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: OrProp\r\t^self basicNew initialize:OrProp.',			#stamp : 'pm 10/2/2018 17:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.781275+02:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Clause class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize.',			#stamp : 'pm 10/2/2018 17:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.802286+02:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.809275+02:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',		#newStamp : 'pm 10/9/2018 10:43'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.82127+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or: [(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing aruty"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/15/2018 15:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.829975+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\tterms do:[:each | (each isConst)ifFalse:[^false]].\r\t^true',			#stamp : 'pm 10/15/2018 16:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.83705+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #arity,			#protocol : #accessing,			#sourceCode : 'arity\r\tterms size.\r\t\r',			#stamp : 'pm 10/15/2018 15:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.855019+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 10/11/2018 09:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.864209+02:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms',			#stamp : 'pm 10/6/2018 19:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.871915+02:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/11/2018 09:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.882351+02:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo Variables: setOfLinkedVar\r\tsymb:=symbo.\r\tterms:=LinkedList new.\r\tsetOfLinkedVar  do: [ :each | terms add: each.].',			#stamp : 'pm 10/11/2018 11:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.89633+02:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo\r\tsymb:=symbo.\r\tterms:=LinkedList new.',			#stamp : 'pm 10/11/2018 15:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.900409+02:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo Variable: aTerm\r\tsymb:=symbo.\r\tterms:=LinkedList new.\r\tterms add: aTerm.',			#stamp : 'pm 10/11/2018 12:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.903872+02:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| newVars t|\r\tnewVars:=LinkedList new.\r\tterms do: [ :each | newVars add: (each WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tt:=(FuncTerm new: (self getSymb) Variables:newVars).\r\t^t.',			#stamp : 'pm 10/11/2018 16:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:34.912778+02:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'currentFuncNumber anonymousFuncSymb\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'FuncTerm class',							#isMetaSide : true						},						#name : #currentFuncNumber,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'FuncTerm class',							#isMetaSide : true						},						#name : #anonymousFuncSymb,						#parent : @34					}				],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @25,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.034575+02:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'newFuncWithVars:',			#protocol : #'instance creation',			#sourceCode : 'newFuncWithVars: varList\r\t^self basicNew initialize: (self getNewFuncName) Variables:varList.',			#stamp : 'pm 10/11/2018 15:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.036911+02:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo\r\t^self basicNew initialize:symbo.',			#stamp : 'pm 10/11/2018 15:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.038826+02:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:Variables:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo Variables: setOfLinkedVar\r\t^self basicNew initialize:symbo Variables: setOfLinkedVar.',			#stamp : 'pm 10/7/2018 15:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.040703+02:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:Variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo Variable: aVar\r\t^self basicNew initialize:symbo Variable: aVar.',			#stamp : 'pm 10/10/2018 21:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.046347+02:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize: (self getNewFuncName).',			#stamp : 'pm 10/11/2018 15:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.048753+02:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'newFunc:',			#protocol : #'instance creation',			#sourceCode : 'newFunc: variable\r\t^self basicNew initialize: (self getNewFuncName) Variable:variable.',			#stamp : 'pm 10/11/2018 15:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.050917+02:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #getNewFuncName,			#protocol : #'instance creation',			#sourceCode : 'getNewFuncName\r\tcurrentFuncNumber :=currentFuncNumber +1.\r\t^anonymousFuncSymb,(currentFuncNumber asString).',			#stamp : 'pm 10/11/2018 15:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.054947+02:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcurrentFuncNumber :=0.\r\tanonymousFuncSymb:=\'f\'.',			#stamp : 'pm 10/11/2018 15:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.061187+02:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.06289+02:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',		#newStamp : 'pm 10/9/2018 10:08'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.06722+02:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'haveYouSeenThisObject:',			#protocol : #search,			#sourceCode : 'haveYouSeenThisObject: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:["Transcript cr;show:each prettyPrint;cr".\r\t\t\t^true.]\r\t\t].\r\t^false.',			#stamp : 'pm 10/11/2018 13:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.069814+02:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'merge:',			#protocol : #adding,			#sourceCode : 'merge: anotherMinimalOrderedSet\r\tanotherMinimalOrderedSet do:[:each | self add:each.].\r\t^self.',			#stamp : 'pm 10/15/2018 16:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.074337+02:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: anObject \r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^self]"Object\'s already in, we\'re done"\r\t\t].\r\t super add: anObject."we let LinkedList add the object"\r\t^self.',			#stamp : 'pm 10/7/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.08036+02:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pair\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Pair,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pair class\r\tinstanceVariableNames: \'\''				},				#name : #'Pair class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pair,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.085412+02:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherPair\r\t^(self right)=(anotherPair left) and:[(self right)=(anotherPair right)].',			#stamp : 'pm 10/15/2018 16:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.08773+02:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'(\',(self left prettyPrint),\',\',(self right prettyPrint),\')\'.',			#stamp : 'pm 10/15/2018 16:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.091857+02:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: anObject\r\tright:=anObject.\r\t^right',			#stamp : 'pm 10/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.09633+02:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: anObject\r\tleft:=anObject.\r\t^left',			#stamp : 'pm 10/15/2018 16:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.098811+02:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^right',			#stamp : 'pm 10/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.101918+02:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^left',			#stamp : 'pm 10/15/2018 16:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.107509+02:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'left:right:',			#protocol : #initialize-release,			#sourceCode : 'left:l right:r\r\tleft:=l.\r\tright:=r.',			#stamp : 'pm 10/15/2018 16:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.114854+02:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pair class',				#isMetaSide : true			},			#name : #'left:right:',			#protocol : #initialize-release,			#sourceCode : 'left:l right:r\r\t^(self basicNew) left:l right:r.',			#stamp : 'pm 10/15/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.120578+02:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.12199+02:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',		#newStamp : 'pm 10/9/2018 10:52'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.128847+02:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.134934+02:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.137986+02:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"',			#stamp : 'pm 10/6/2018 18:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.143065+02:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #StartSkolemnisation,			#protocol : #Skoleminsation,			#sourceCode : 'StartSkolemnisation\r\t| set aMap |\r\tset:=MinimalOrderedSet new.\r\taMap:=Dictionary new.\r\t^self Skolemnise: set CorrespondingValue: aMap',			#stamp : 'pm 10/7/2018 19:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.149365+02:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 9/29/2018 08:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.152924+02:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one iteration over the full formula."\r\t"Basic empty comportement for atomes mostly. (only?)"',			#stamp : 'pm 9/30/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.156926+02:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\t(Prop debug) ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 10/1/2018 10:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.163419+02:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.167799+02:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 10/9/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.17003+02:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^SubclassResponsibility. ',			#stamp : 'pm 9/28/2018 22:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.178745+02:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self fullClausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr;cr.\r\t^t.',			#stamp : 'pm 10/9/2018 13:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.181926+02:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #propUnitTest,			#protocol : #testing,			#sourceCode : 'propUnitTest\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr; cr.\r\t^self',			#stamp : 'pm 10/9/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.186402+02:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchingUnitTest:',			#protocol : #testing,			#sourceCode : 'matchingUnitTest: prop\r\t"self will be considered as a pattern"\r\tTranscript cr;\r\t\tshow: \'prop : \' ; \r\t\tshow: (prop prettyPrint);\r\t\tcr;\r\t\tshow: \'pattern : \';\r\t\tshow: (self prettyPrint);\r\t\tcr.\r\t\t(self matchPatternWith: prop)\r\t\t\tifTrue:[ Transcript show: \'matched!\';cr.]\r\t\t\tifFalse:[ Transcript show: \'didn\'\'t match!\';cr]\r\t',			#stamp : 'pm 9/30/2018 12:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.19226+02:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t|t|\r\tProp testInc.\t\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr;cr;cr.\r\t^t',			#stamp : 'pm 10/11/2018 16:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.200063+02:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'compareSymbol:',			#protocol : #matching,			#sourceCode : 'compareSymbol: otherProp\r\t^(self getSymb = otherProp getSymb) ',			#stamp : 'pm 9/30/2018 10:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.206289+02:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 9/30/2018 09:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.211573+02:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug testNumber\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @21,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.318378+02:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testNumber,			#protocol : #accessing,			#sourceCode : 'testNumber\r\t^testNumber',			#stamp : 'pm 10/11/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.321815+02:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\ttestNumber:=0.',			#stamp : 'pm 10/11/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.331097+02:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms terms2|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\r\tTranscript show: \'basic one #1\'.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'basic one #2\'.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'z\').\t\r\tp:=Or new: (ForAll new: \'x\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms )))\r\t rightProp: (ForAll new: \'x\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\r\tTranscript show: \'with imply and nested forall.\'.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\tp SkolemnisationTest.\r\t\t\t\r\tTranscript show: \'same as previous one, but with x representing a variable in one, and a const in the other.\'.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\tp SkolemnisationTest.\t\r\t\t\r\tTranscript show: \'same as previous one, check Unbound Exists is replaced by consts\'.\r\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\tp SkolemnisationTest.\t\r\t\r\tTranscript show: \'Teacher\'\'s stress test#1\' .\r\tp:=Not new:(\r        ForAll new: \'x\' Property: \r        (Imply new: (ForAll new: \'y\' Property: (Predicate new: \'P\' variable: (Term new:\'y\')))\r         rightProp: (Predicate new:\'Q\' variable: (Term new:\'x\')))).        \r\tp SkolemnisationTest.\r\t\t\r\tTranscript show: \'Teacher\'\'s stress test#2\'\t.\r\tterms:=LinkedList new.\r    terms add:(Term new: \'x\') ; add:(Term new:\'z\').\r    terms2:=LinkedList new.\r    terms2 add:(Term new:\'y\') ; add: (Term new:\'t\').\r    p:=Not new:\r            (ForAll new: \'x\' Property:\r                (ForAll new: \'y\' Property:\r                    (Exists new: \'z\' Property: \r                        (ForAll new: \'t\' Property: \r                            (Imply new: \r                                (Predicate new: \'P\' fromList: terms)\r                             rightProp: \r                                (Predicate new: \'Q\' fromList: terms2)))))).\r\tp SkolemnisationTest.\r\t\t\t\r\tTranscript show: \'Test functionnal term in initial Predicate \'.\r\tterms:=LinkedList new.\r   terms add:(Term new: \'x\') ; add:(FuncTerm new: \'f\' Variable: (Term new:\'z\')).\r\r   p:=Not new:\r            (ForAll new: \'x\' Property:\r                  (Predicate new: \'P\' fromList: terms)).\r\tp SkolemnisationTest .\r\t\r\tTranscript show: \'Test functionnal term in initial Predicate  with needed inner replacement\'.\r\tterms:=LinkedList new.\r   terms add:(Term new: \'x\') ; add:(FuncTerm new: \'f\' Variable: (Term new:\'y\')).\r\r   p:=ForAll new: \'x\' Property:\r\t\t\t\t\t(Exists new: \'y\' Property:\r                  (Predicate new: \'P\' fromList: terms)).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr. ',			#stamp : 'pm 10/15/2018 15:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.335086+02:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingPropClassic,			#protocol : #testing,			#sourceCode : 'testingPropClassic\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 16:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.339793+02:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #debug,			#protocol : #testing,			#sourceCode : 'debug\r\t^debug',			#stamp : 'pm 10/1/2018 10:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.344421+02:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new: \'a\'))) rightProp: (Predicate new: \'P\' variable:(Term new: \'b\'))) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.350019+02:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.\r\t\r\t"terms"\r\tTerm initialize.\r\tConstTerm initialize.\r\tFuncTerm initialize.\r\tLinkedTerm initialize.',			#stamp : 'pm 10/8/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.353806+02:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #testing,			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r"\tTranscript clear."\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 00:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.359716+02:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Predicate new: \'P\' variable: \'a\').\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 10/5/2018 16:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.363743+02:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\t"Prop testingProp."\r\t"Prop testingMatch."\r\t"Prop testingClausification."\r\tProp testingSkolemn.',			#stamp : 'pm 10/11/2018 09:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.36871+02:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testInc,			#protocol : #tests,			#sourceCode : 'testInc\r\ttestNumber:=testNumber+1.',			#stamp : 'pm 10/11/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.372877+02:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.374027+02:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',				#stamp : 'pm 10/9/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',		#newStamp : 'pm 10/9/2018 11:03'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.377465+02:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.382551+02:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isSkolem,			#protocol : #testing,			#sourceCode : 'isSkolem\r\t^true.',			#stamp : 'pm 10/5/2018 23:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.385314+02:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^true',			#stamp : 'pm 9/29/2018 08:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.3909+02:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.391963+02:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True and False constants, to represent them in Propositions\r\r',		#newStamp : 'pm 10/9/2018 11:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.398398+02:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessors,			#sourceCode : 'getSymb\r\t^(self class symb)',			#stamp : 'pm 9/28/2018 22:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.401379+02:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.403958+02:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.407091+02:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Constant class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @21,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.524551+02:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.527369+02:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'False const',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'False const',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.532561+02:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #False_Const,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^prop isKindOf: False_Const',			#stamp : 'pm 9/30/2018 09:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.536602+02:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'False_Const class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb',			#stamp : 'pm 9/28/2018 21:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.541615+02:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'False_Const class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'F\'.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.546526+02:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.547796+02:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',		#newStamp : 'pm 10/9/2018 10:48'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.551364+02:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #print,			#sourceCode : 'getSymb\r\t^(self class symb)',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.556355+02:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Operator class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.679946+02:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Operator class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb.',			#stamp : 'pm 10/4/2018 23:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.686556+02:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.688295+02:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',				#stamp : 'pm 10/9/2018 10:55'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',		#newStamp : 'pm 10/9/2018 10:55'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.694089+02:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.70187+02:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.70716+02:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tleft prettyPrint,\r\t\t((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']) ,\r\r\t\tself getSymb,\r\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tright prettyPrint,\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).\r',			#stamp : 'pm 9/30/2018 12:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.715405+02:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t"false unless it\'s a or/and"\r\t^false',			#stamp : 'pm 9/29/2018 08:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.720388+02:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\t\tifTrue:[\r\t\t\t^(left matchPatternWith: (prop left))\r\t\t\t& (right matchPatternWith: (prop right))\r\t\t\t]\r\t\tifFalse:[^false].',			#stamp : 'pm 9/30/2018 12:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.725117+02:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: replacement\r\tright:=replacement.\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.730059+02:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: replacement\r\tleft:=replacement.\r\t^left',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.736131+02:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^left',			#stamp : 'pm 9/30/2018 08:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.742069+02:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.746074+02:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rp\r\tleft:=leftProp.\r\tright:=rp.\r\t',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.750956+02:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binary class',				#isMetaSide : true			},			#name : #'new:rightProp:',			#protocol : #initialize,			#sourceCode : 'new: leftProp rightProp: rp\r\t^self basicNew initialize: leftProp rightProp: rp.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.755033+02:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.756087+02:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an And proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.760124+02:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.766117+02:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((And patternFalse) matchPatternWith: self)\r\tifTrue:[t:=right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=right]\r\t\t\t\tifFalse:["\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=Or new:(And new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t"]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[ (Prop debug) ifTrue:[Transcript show:\'in And\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in And2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification"]. ',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.769556+02:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'patternOr patternOrSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOrSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.87895+02:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'/\\\'.\r\tpatternOr:=And new: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternOrSym:=And new: (Var new: \'a\') rightProp: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=And new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=And new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=And new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/3/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.882687+02:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.886122+02:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.889112+02:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.892459+02:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOrSym,			#protocol : #accessing,			#sourceCode : 'patternOrSym\r\t^patternOrSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.896901+02:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.900027+02:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.904903+02:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.906045+02:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Equal proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Equal proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.911929+02:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=Or new: (And new: (self left) rightProp: (self right))\r\t\t rightProp: (And new:(Not new: (self left)) rightProp:(Not new: (self right))).\r\t(Prop debug) ifTrue:[Transcript show:\'in equal\';show: t prettyPrint;cr.].\r\t^t "clausification".',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.917445+02:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Equal class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'<->\'.',			#stamp : 'pm 9/30/2018 17:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.92118+02:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.922557+02:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Imply  proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Imply  proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.927608+02:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t|t|\r\tt:=Or new: (Not new:left)  rightProp: right.\r\t(Prop debug) ifTrue:[Transcript show:\'in Imply\';show: t prettyPrint;cr.].\r\t^t "clausification".',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.933451+02:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.93748+02:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.943897+02:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'->\'.',			#stamp : 'pm 9/30/2018 17:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.948977+02:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.950127+02:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Or proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.954135+02:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.960511+02:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:35.964564+02:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'patternAnd patternAndSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAndSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.072672+02:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.075954+02:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.080648+02:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAndSym,			#protocol : #accessing,			#sourceCode : 'patternAndSym\r\t^patternAndSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.084126+02:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.088061+02:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.093503+02:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'\\/\'. \r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/4/2018 08:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.098087+02:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #initialize,			#sourceCode : 'patternAnd\r\t^patternAnd',			#stamp : 'pm 9/30/2018 16:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.103028+02:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.104154+02:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.10833+02:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop\'s comment for usage."\r\t^true',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.11334+02:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 10/8/2018 17:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.117482+02:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r',			#stamp : 'pm 10/11/2018 14:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.121949+02:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\t(aTerm isKindOf: Term)\r\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.\r',			#stamp : 'pm 10/9/2018 11:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.126593+02:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r"\tTranscript show:terms ;cr."\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.131507+02:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^true.',			#stamp : 'pm 10/5/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.135588+02:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSamePredicate:predicate) &\r\t(self isSameVar:predicate).',			#stamp : 'pm 10/5/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.13964+02:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #testing,			#sourceCode : 'isSameVar: predicate\r\t"= defined on SequenceableCollection, LinkedList\'s superclass."\r\t^(self terms)=(predicate terms).',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.144134+02:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePredicate:',			#protocol : #testing,			#sourceCode : 'isSamePredicate: predicate\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/5/2018 16:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.149605+02:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t| res |\r\tres:=anotherPredicate isKindOf: Predicate."check class, and polarity"\r\tres:=res or:[.].\r\tres:=res or: [(self getSymb)=(anotherPredicate getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherPredicate arity).]."comparing aruty"\r\tres:=res or:[(self terms) = (anotherPredicate terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/15/2018 15:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.15342+02:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb.',			#stamp : 'pm 10/5/2018 15:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.157502+02:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.162481+02:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.166615+02:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.171218+02:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.178029+02:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: symb\r\t^self basicNew initialize: symb.',			#stamp : 'pm 10/11/2018 14:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.182838+02:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb Variables: aList.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.186624+02:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symb variable: aVar\r\t^self basicNew initialize: symb Variable:aVar.',			#stamp : 'pm 10/5/2018 20:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.190631+02:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.191874+02:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative Predicate, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative Predicate, only in ClausalForm',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.199197+02:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t^(anotherPredicate isKindOf: NotPredicate) or:[super=anotherPredicate]."check class, and polarity"',			#stamp : 'pm 10/15/2018 15:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.203714+02:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^(Not symb),(super prettyPrint)',			#stamp : 'pm 10/9/2018 17:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.208339+02:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.209489+02:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',				#stamp : 'pm 10/9/2018 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',		#newStamp : 'pm 10/9/2018 10:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.215425+02:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #accessing,			#sourceCode : 'initialize: aName\r\tsymb:=aName.\r',			#stamp : 'pm 10/11/2018 12:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.219637+02:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 10/11/2018 11:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.223894+02:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherTerm\r\t"default comparing for terms."\r\t^(self getSymb)=(anotherTerm getSymb).',			#stamp : 'pm 10/15/2018 15:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.228555+02:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.\r',			#stamp : 'pm 10/11/2018 11:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.235057+02:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Term class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aName\r\t^(self basicNew) initialize:aName.',			#stamp : 'pm 10/11/2018 11:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.239617+02:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.240846+02:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'True Const\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True Const\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.248933+02:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #True_Const,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^prop isKindOf: True_Const',			#stamp : 'pm 9/30/2018 09:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.260151+02:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'True_Const class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb',			#stamp : 'pm 9/28/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.267186+02:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'True_Const class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'T\'.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.271623+02:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.272875+02:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',				#stamp : 'pm 10/9/2018 10:56'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',		#newStamp : 'pm 10/9/2018 10:56'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.281741+02:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\t\tifTrue:[^operand matchPatternWith: (prop operand)]\r\t\tifFalse:[^false].',			#stamp : 'pm 9/30/2018 10:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.290431+02:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #operand,			#protocol : #accessing,			#sourceCode : 'operand\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.2954+02:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'operand:',			#protocol : #accessing,			#sourceCode : 'operand: replacement\r\toperand:=replacement.\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.300648+02:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\toperand prettyPrint,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 9/30/2018 19:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.30593+02:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #Initialize,			#sourceCode : 'initialize: prop\r\toperand:=prop.',			#stamp : 'pm 9/28/2018 22:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.313605+02:00' ],		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unary class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #Initialize,			#sourceCode : 'new: prop\r\t^self basicNew initialize: prop.',			#stamp : 'pm 9/28/2018 22:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.317929+02:00' ],		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.319052+02:00' ],		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Not  operator',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.324188+02:00' ],		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 9/30/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.33111+02:00' ],		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\t self operand:(operand clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ].',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.336645+02:00' ],		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.341243+02:00' ],		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.345706+02:00' ],		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.45869+02:00' ],		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.463855+02:00' ],		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.468073+02:00' ],		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #accessing,			#sourceCode : 'patternAnd\r\t^patternAnd.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.472094+02:00' ],		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.476183+02:00' ],		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternNot,			#protocol : #accessing,			#sourceCode : 'patternNot\r\t^patternNot.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.482905+02:00' ],		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 18:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.487555+02:00' ],		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.488627+02:00' ],		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',				#stamp : 'pm 10/9/2018 11:28'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',		#newStamp : 'pm 10/9/2018 11:28'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.495057+02:00' ],		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self class symb),\' \', (self var), \'.(\',\r\toperand prettyPrint,\r\t\')\'.',			#stamp : 'pm 10/5/2018 15:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.499626+02:00' ],		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #var,			#protocol : #accessing,			#sourceCode : 'var\r\t^var.',			#stamp : 'pm 10/4/2018 13:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.504498+02:00' ],		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: arg Property: prop\r\tsuper initialize: prop.\r\tvar:=arg.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.508616+02:00' ],		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t"very unsure here"\r\t^false',			#stamp : 'pm 10/5/2018 17:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.515996+02:00' ],		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new:arg Property:prop\r\t^self basicNew initialize:arg Property:prop.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.52013+02:00' ],		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'Exists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Exists,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.521161+02:00' ],		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'Exists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Exists,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Exists quantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Exists quantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.527484+02:00' ],		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (Term new:(self var)).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 08:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.533436+02:00' ],		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.539231+02:00' ],		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Exists class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Exist\'.',			#stamp : 'pm 10/4/2018 13:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.544526+02:00' ],		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'ForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ForAll,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.546496+02:00' ],		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'ForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ForAll,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a ForallQuantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a ForallQuantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.552515+02:00' ],		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.55741+02:00' ],		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (Term new:(self var)).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 08:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.564445+02:00' ],		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ForAll class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Forall\'.',			#stamp : 'pm 10/4/2018 23:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.569997+02:00' ],		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #UnaryTerm\r\tinstanceVariableNames: \'term\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #UnaryTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnaryTerm,						#isMetaSide : false					},					#name : #term,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnaryTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'UnaryTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnaryTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.57956+02:00' ],		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize:aTerm\r\t(aTerm isKindOf: Term)\r\tifFalse:[^Error new: (self class),\'Takes only Terms as parameters. This is a\', (aTerm class). ]\r\tifTrue:[term:=aTerm].',			#stamp : 'pm 10/11/2018 09:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.585233+02:00' ],		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherTerm\r\t^(anotherTerm isKindOf: (self class)) and:[(self term)=(anotherTerm term).].\r\t\r\t\r\t',			#stamp : 'pm 10/15/2018 15:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.590071+02:00' ],		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #term,			#protocol : #accessing,			#sourceCode : 'term\r\t^term.',			#stamp : 'pm 10/11/2018 07:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.596914+02:00' ],		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnaryTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aTerm\r\t^(self basicNew) initialize:aTerm.',			#stamp : 'pm 10/11/2018 09:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.601256+02:00' ],		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.602579+02:00' ],		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',		#newStamp : 'pm 10/9/2018 10:44'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.608241+02:00' ],		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\', (term prettyPrint).',			#stamp : 'pm 10/11/2018 12:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.614214+02:00' ],		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\t^true.',			#stamp : 'pm 10/15/2018 16:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.619261+02:00' ],		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tterm:=Term new:(self class) getNum.\r',			#stamp : 'pm 10/11/2018 08:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.622504+02:00' ],		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.734761+02:00' ],		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #getNum,			#protocol : #initialization,			#sourceCode : 'getNum\r\tfactoryNum:=factoryNum+1.\r\t^factoryNum asString',			#stamp : 'pm 10/11/2018 12:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.739797+02:00' ],		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #factoryNum,			#protocol : #initialization,			#sourceCode : 'factoryNum\r\t^factoryNum.',			#stamp : 'pm 10/7/2018 10:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.745459+02:00' ],		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #new,			#protocol : #initialization,			#sourceCode : 'new "const Factory"\r\t^self basicNew initialize.',			#stamp : 'pm 10/11/2018 08:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.750914+02:00' ],		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #nextConst,			#protocol : #initialization,			#sourceCode : 'nextConst\r\t^\'c\',(self getNum).',			#stamp : 'pm 10/7/2018 10:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.756072+02:00' ],		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tfactoryNum:=0.',			#stamp : 'pm 10/7/2018 10:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.761531+02:00' ],		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialization,			#sourceCode : 'new:Const_Value\r\t^self basicNew initialize:Const_Value.',			#stamp : 'pm 10/7/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.766571+02:00' ],		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.768188+02:00' ],		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',				#stamp : 'pm 10/9/2018 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',		#newStamp : 'pm 10/9/2018 10:42'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.774127+02:00' ],		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^term prettyPrint.',			#stamp : 'pm 10/11/2018 09:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.77978+02:00' ],		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.787269+02:00' ],		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'initialize:Predicate2:',			#protocol : #initialization,			#sourceCode : 'initialize: p1 Predicate2: p2\r\tsetOfPairs:=MinimalOrderedSet new.\r\tsetOfPairs add:(Pair left: p1 right: p2).',			#stamp : 'pm 10/15/2018 16:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.794948+02:00' ],		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'setOfPairs:',			#protocol : #initialization,			#sourceCode : 'setOfPairs: anotherSet\r\tsetOfPairs:=anotherSet.\r\t^self.',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.797292+02:00' ],		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialization,			#sourceCode : 'add: aPair\r\tsetOfPairs add: aPair.\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.798665+02:00' ],		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #setOfPairs,			#protocol : #initialization,			#sourceCode : 'setOfPairs\r\t^setOfPairs',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.799771+02:00' ],		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'addUnifier:',			#protocol : #initialization,			#sourceCode : 'addUnifier: anotherUnifier\r\tsetOfPairs merge: (anotherUnifier setOfPairs ).\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.801099+02:00' ],		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Predicate2:',			#protocol : #initialization,			#sourceCode : 'add: value1 Predicate2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 16:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.802579+02:00' ],		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn:aStream.\r\tself prettyPrint.',			#stamp : 'pm 10/15/2018 16:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.804457+02:00' ],		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t| t |\r\tt:=\'{\'.\r\tsetOfPairs do: [:each| t:=t,each prettyPrint.] separatedBy: [ t:=t,\',\'.]',			#stamp : 'pm 10/15/2018 16:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.808574+02:00' ],		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unifier class',				#isMetaSide : true			},			#name : #'new:Predicate2:',			#protocol : #'instance creation',			#sourceCode : 'new: p1 Predicate2: p2\r\t^(self basicNew) initialize: p1 Predicate2:p2.',			#stamp : 'pm 10/15/2018 16:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.815752+02:00' ],		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.817635+02:00' ],		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',				#stamp : 'pm 10/9/2018 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',		#newStamp : 'pm 10/9/2018 11:23'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.821021+02:00' ],		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self getSymb).',			#stamp : 'pm 10/3/2018 13:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.822959+02:00' ],		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 9/28/2018 22:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.825206+02:00' ],		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize: varName\r\tsymb:=varName.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.827712+02:00' ],		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #comparison,			#sourceCode : 'isSameVar: other\r\t^self getSymb = other getSymb.',			#stamp : 'pm 9/29/2018 09:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.829685+02:00' ],		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^true',			#stamp : 'pm 9/30/2018 09:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.834708+02:00' ],		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Var class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialize,			#sourceCode : 'new: varName\r\t^self basicNew initialize: varName.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.838281+02:00' ],		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.839511+02:00' ],		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative variable, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative variable, only in ClausalForm',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-15T18:29:36.841972+02:00' ],		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(Not symb),(self getSymb).',			#stamp : 'pm 10/3/2018 15:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T19:14:16.437123+02:00' ],		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Value2:',			#protocol : #initialization,			#sourceCode : 'add: value1 Value2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 19:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T19:14:20.053033+02:00' ],		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Predicate2:',			#protocol : #initialization,			#sourceCode : 'add: value1 Predicate2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 16:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:13:36.84923+02:00' ],		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\t\t\r\tsetOfPairs do:[:each|\r\t\tmodified=true.\r\t\tmodified whileTrue:[\r\t\t\tmodified=false.\r\t\t\tprevious:=setOfPairs at:1.\r\t\t\tres:=previous unifyIt.\r\t\t\t(res=previous)\r\t\t\tifFalse:[modified=true].\r\t\t\t]\r\t]',			#stamp : 'pm 10/15/2018 20:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:13:48.515091+02:00' ],		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\t\t\r\tsetOfPairs do:[:each|\r\t\tmodified=true.\r\t\tmodified whileTrue:[\r\t\t\tmodified=false.\r\t\t\tprevious:=setOfPairs at:1.\r\t\t\tres:=previous unifyIt.\r\t\t\t(res=previous)\r\t\t\tifFalse:[modified=true].\r\t\t\t]\r\t]',			#stamp : 'pm 10/15/2018 20:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\t\t\r\tsetOfPairs do:[:each|\r\t\tmodified:=true.\r\t\tmodified whileTrue:[\r\t\t\tmodified:=false.\r\t\t\tprevious:=setOfPairs at:1.\r\t\t\tres:=previous unifyIt.\r\t\t\t(res=previous)\r\t\t\tifFalse:[modified:=true].\r\t\t\t]\r\t]',			#stamp : 'pm 10/15/2018 20:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:17:24.202441+02:00' ],		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #UnifyIt,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:17:44.399979+02:00' ],		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #UnifyIt,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt\r\t',			#stamp : 'pm 10/15/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:18:06.31946+02:00' ],		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: Other\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:18:08.933096+02:00' ],		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #UnifyIt,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:18:24.957834+02:00' ],		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:18:28.819586+02:00' ],		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #UnifyIt,			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt\r\t',			#stamp : 'pm 10/15/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:18:34.904019+02:00' ],		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: Other\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:34:41.311188+02:00' ],		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:34:58.712947+02:00' ],		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:35:02.204951+02:00' ],		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #unification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:35:07.510933+02:00' ],		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:35:12.02803+02:00' ],		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:37:58.761787+02:00' ],		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:38:02.611393+02:00' ],		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',				#stamp : 'pm 10/9/2018 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #unification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:38:05.685632+02:00' ],		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:39:28.076178+02:00' ],		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:["Done or elim, either way, caller problem"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t^Pair left: self right: OtherTerm\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:11.372267+02:00' ],		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:["Done or elim, either way, caller problem"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t^Pair left: self right: OtherTerm\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:["Done or elim, either way, caller problem"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t^Pair left: self right: OtherTerm"Done"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:12.78498+02:00' ],		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:["Done or elim, either way, caller problem"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t^Pair left: self right: OtherTerm"Done"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r',			#stamp : 'pm 10/15/2018 20:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:12.800862+02:00' ],		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',				#stamp : 'pm 10/9/2018 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #unification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:23.194785+02:00' ],		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #unification,			#sourceCode : 'UnifyIt: OtherTerm\r\t(OtherTerm isKindOf: FuncTerm)\r\tifTrue:[\r\t\t"Done or Elim. Either way, it\'s the caller responsibility"\r\t\t^(Pair left: self right: OtherTerm)\r\t\t]\r\tifFalse:[\r\t\t(OtherTerm isKindOf: ConstTerm)\r\t\tifTrue:[\r\t\t\t(self=OtherTerm)\r\t\t\tifTrue: [ ^Pair left: nil right: nil ]"delete"\r\t\t\tifFalse:[^nil]."Fail case of the algorithm, according Wikipedia. (Bad source, but still a source)"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(OtherTerm isKindOf: LinkedTerm)\r\t\t\tifTrue:[\r\t\t\t\t^(Pair left: OtherTerm  right: self). "swap. Is it really necessary?"\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\t^self error: \'Unifying a const term with a \', OtherTerm class , \' shouldn\'\'t be possible.\'\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t',			#stamp : 'pm 10/15/2018 20:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:23.197357+02:00' ],		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #unification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-15T20:50:31.25368+02:00' ],		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'UnifyIt:',			#protocol : #'as yet unclassified',			#sourceCode : 'UnifyIt: OtherTerm\r\t^SubclassResponsibility. ',			#stamp : 'pm 10/15/2018 20:18',			#package : #_resolution_1erOrdre		}	}}