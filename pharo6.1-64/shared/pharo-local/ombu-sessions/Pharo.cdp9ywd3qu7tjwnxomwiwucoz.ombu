OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:46.5711+02:00' ],		#prior : OmReference [ 'Pharo.883kvpkdogofuoadmyundevvg', '154' ],		#self : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:46.634032+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- Contains: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }\r p add : 1 >> "p contains { 1 }\r',				#stamp : 'pm 10/7/2018 18:21'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- Contains: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }\r p add : 1 >> "p contains { 1 }\r',		#newStamp : 'pm 10/7/2018 18:21'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:46.696397+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'Contains:',			#protocol : #adding,			#sourceCode : 'Contains: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/7/2018 18:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:46.764776+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: anObject \r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^self]"Object\'s already in, we\'re done"\r\t\t].\r\t super add: anObject."we let LinkedList add the object"\r\t^self.',			#stamp : 'pm 10/7/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:47.912968+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"',			#stamp : 'pm 10/6/2018 18:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:47.987248+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #IsSkolem,			#protocol : #Skoleminsation,			#sourceCode : 'IsSkolem\r\t^SubclassResponsibility.',			#stamp : 'pm 10/5/2018 23:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.077915+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #StartSkolemnisation,			#protocol : #Skoleminsation,			#sourceCode : 'StartSkolemnisation\r\t| set aMap |\r\tset:=MinimalOrderedSet new.\r\taMap:=Dictionary new.\r\t^self Skolemnise: set CorrespondingValue: aMap',			#stamp : 'pm 10/7/2018 19:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.181714+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.319398+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.556695+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Var new: \'a\').\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Var new: \'a\')).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Var new: \'a\')).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 10/5/2018 00:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Predicate new: \'P\' variable: \'a\').\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 10/5/2018 16:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.677434+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingPropClassic,			#protocol : #testing,			#sourceCode : 'testingPropClassic\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 16:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.706051+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 00:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 17:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.864415+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isSkolem,			#protocol : #testing,			#sourceCode : 'isSkolem\r\t^true.',			#stamp : 'pm 10/5/2018 23:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.90271+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:48.922793+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:51.008573+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:51.161517+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:55.068287+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:55.164284+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:56.722359+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.01653+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb.',			#stamp : 'pm 10/5/2018 15:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.164699+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.31352+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.466504+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.603864+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop\'s comment for usage."\r\t^true',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.790305+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #Skoleminsation,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:57.928767+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].',			#stamp : 'pm 10/7/2018 17:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:58.07667+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tself updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/7/2018 17:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:58.217119+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tself updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/7/2018 17:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:58.576425+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^true.',			#stamp : 'pm 10/5/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:58.72254+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSamePredicate:predicate) &\r\t(self isSameVar:predicate).',			#stamp : 'pm 10/5/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:58.883104+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #testing,			#sourceCode : 'isSameVar: predicate\r\t"= defined on SequenceableCollection, LinkedList\'s superclass."\r\t^(self terms)=(predicate terms).',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.014979+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePredicate:',			#protocol : #testing,			#sourceCode : 'isSamePredicate: predicate\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/5/2018 16:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.219067+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symb variable: aVar\r\t^self basicNew initialize: symb Variable:aVar.',			#stamp : 'pm 10/5/2018 20:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.384523+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb Variables: aList.',			#stamp : 'pm 10/5/2018 20:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.393858+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.822021+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo\r\tsymb:=symbo.',			#stamp : 'pm 10/7/2018 15:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:01:59.934538+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar contains:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/7/2018 19:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:00.081967+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #PrettyPrint,			#protocol : #accessing,			#sourceCode : 'PrettyPrint\r\t^(self getSymb)',			#stamp : 'pm 10/6/2018 19:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:00.212632+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 10/6/2018 19:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:00.583821+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Term class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo\r\t^self basicNew initialize:symbo.\t',			#stamp : 'pm 10/7/2018 15:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:00.591015+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:00.973305+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=(self class) getNum.',			#stamp : 'pm 10/7/2018 10:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.055301+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize:ConstValue\r\tsymb:=ConstValue.',			#stamp : 'pm 10/7/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.200285+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.552253+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialization,			#sourceCode : 'new:Const_Value\r\t^self basicNew initialize:Const_Value.',			#stamp : 'pm 10/7/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.701374+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #factoryNum,			#protocol : #initialization,			#sourceCode : 'factoryNum\r\t^factoryNum.',			#stamp : 'pm 10/7/2018 10:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.862207+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #getNum,			#protocol : #initialization,			#sourceCode : 'getNum\r\tfactoryNum+=1.\r\t^factoryNum ',			#stamp : 'pm 10/7/2018 10:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:01.952336+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #new,			#protocol : #initialization,			#sourceCode : 'new\r\t^self basicNew initialize.',			#stamp : 'pm 10/7/2018 10:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.011595+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tfactoryNum:=0.',			#stamp : 'pm 10/7/2018 10:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.047284+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #nextConst,			#protocol : #initialization,			#sourceCode : 'nextConst\r\t^\'c\',(self getNum).',			#stamp : 'pm 10/7/2018 10:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.056054+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #FuncTerm\r\tinstanceVariableNames: \'terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.129272+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo Variables: setOfLinkedVar\r\tsuper initialize:symbo.\r\tterms:=LinkedList new.\r\tsetOfLinkedVar  do: [ :each | terms add:each.].',			#stamp : 'pm 10/7/2018 15:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.197549+02:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #PrettyPrint,			#protocol : #accessing,			#sourceCode : 'PrettyPrint\r\t|r|\r\tr:=\t(self getSymb),\'(\'.\r\tterms do:[:each|r:=r,each,\',\'.].\r\tr:=r,\')\'.\r\t^r.\r\t',			#stamp : 'pm 10/6/2018 19:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.248748+02:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms',			#stamp : 'pm 10/6/2018 19:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.331597+02:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:Variables:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo Variables: setOfLinkedVar\r\t^self basicNew initialize:symbo Variables: setOfLinkedVar.',			#stamp : 'pm 10/7/2018 15:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:02.33877+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:03.184906+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:03.234865+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:03.79995+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t"very unsure here"\r\t^false',			#stamp : 'pm 10/5/2018 17:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:04.020081+02:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var getSymb).\r\t^"(self class) new: ("self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 16:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:04.047857+02:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 18:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:04.217185+02:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 18:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:02:04.281635+02:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var getSymb).\r\t^"(self class) new: ("self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 15:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:04:14.17681+02:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:04:25.699703+02:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #'as yet unclassified',			#sourceCode : 'SkolemnisationTest\r\t',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:04:48.739416+02:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #'as yet unclassified',			#sourceCode : 'SkolemnisationTest\r\t',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:07:09.128006+02:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isSkolem; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isSkolem; cr;cr.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:07:39.880776+02:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #'as yet unclassified',			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:07:39.996488+02:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #'as yet unclassified',			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #testing,			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:07:53.128568+02:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #testing,			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #Skoleminsation,			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:08:47.210956+02:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #IsSkolem,			#protocol : #Skoleminsation,			#sourceCode : 'IsSkolem\r\t^SubclassResponsibility.',			#stamp : 'pm 10/5/2018 23:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:09:25.004202+02:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isSkolemn,			#protocol : #Skoleminsation,			#sourceCode : 'isSkolemn\r\t^SubclassResponsibility.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:09:41.350861+02:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isSkolem; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isSkolem; cr;cr.',			#stamp : 'pm 10/8/2018 17:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: t prettyPrint; show: \'  \' ; cr;cr.',			#stamp : 'pm 10/8/2018 17:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:10:18.146592+02:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #getNum,			#protocol : #initialization,			#sourceCode : 'getNum\r\tfactoryNum+=1.\r\t^factoryNum ',			#stamp : 'pm 10/7/2018 10:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #getNum,			#protocol : #initialization,			#sourceCode : 'getNum\r\tfactoryNum:=factoryNum+1.\r\t^factoryNum ',			#stamp : 'pm 10/8/2018 17:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:10:48.832594+02:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\tProp testingProp.\r\tProp testingMatch.\r\tProp testingClausification.',			#stamp : 'pm 10/5/2018 00:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\tProp testingProp.\r\tProp testingMatch.\r\tProp testingClausification.\r\tProp testingSkolemn.',			#stamp : 'pm 10/8/2018 17:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:11:28.130922+02:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.',			#stamp : 'pm 10/4/2018 23:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.\r\t\r\t"terms"\r\tTerm initialize.\r\tConstTerm initialize.\r\tFuncTerm initialize.\r\tLinkedTerm initialize.',			#stamp : 'pm 10/8/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:11:44.315815+02:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:13:00.812003+02:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:(Term new:\'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new:\'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:13:20.851485+02:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:(Term new:\'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new:\'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:(Term new:\'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new:\'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new:\'a\'))) rightProp: (Predicate new: \'P\' variable: (Term new:\'b\'))) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:14:28.432771+02:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:14:42.092575+02:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint \r\t^self getSymb.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:14:42.117858+02:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint \r\t^self getSymb.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:14:47.494156+02:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.\r',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:15:34.97357+02:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:15:35.154974+02:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:16:01.306497+02:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each getSymb,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:16:15.651394+02:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each getSymb,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each,\',\'. ].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/8/2018 17:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:17:16.27034+02:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var getSymb).\r\t^"(self class) new: ("self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 15:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var).\r\t^"(self class) new: ("self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:17:26.809564+02:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var getSymb).\r\t^"(self class) new: ("self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 16:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (self var).\r\t^"(self class) new: ("self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap ")".\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:19:52.386917+02:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'haveYouSeenThisObject:',			#protocol : #adding,			#sourceCode : 'haveYouSeenThisObject: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/8/2018 17:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:19:55.409875+02:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'Contains:',			#protocol : #adding,			#sourceCode : 'Contains: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/7/2018 18:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:20:23.809804+02:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar contains:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/7/2018 19:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:21:21.233739+02:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #Skoleminsation	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:21:27.140946+02:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:20',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:22:43.656395+02:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:  \'a\') rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  \'a\') rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 17:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:24:20.335041+02:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  \'a\') rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable:  \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  \'a\')) rightProp: (Predicate new: \'P\' variable: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new: \'a\'))) rightProp: (Predicate new: \'P\' variable:(Term new: \'b\'))) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:29:54.428573+02:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable:(Term new:\'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp SkolemnisationTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new:\'a\')) rightProp: (True_Const new)).\r\tp SkolemnisationTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new:\'a\'))) rightProp: (Predicate new: \'P\' variable: (Term new:\'b\'))) rightProp: (False_Const new).\r\tp SkolemnisationTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: (LinkedList new;add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\'))))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:33:52.427221+02:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: (LinkedList new;add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\'))))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: ((LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\'))))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:35:58.707809+02:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #Skoleminsation,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:37:01.585713+02:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: terms class.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:37:55.036784+02:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: terms class.\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: (terms class).\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:38:36.78896+02:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: (terms class).\r\tterms do: [:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: (terms class).\r\tterms do:[:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:39:18.787918+02:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\t\tTranscript show: terms class.\r\tterms add:aTerm.\r\t\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:40:00.395019+02:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb Variables: aList.',			#stamp : 'pm 10/5/2018 20:00',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb fromList: aList.',			#stamp : 'pm 10/8/2018 17:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:41:10.621253+02:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb fromList: aList.',			#stamp : 'pm 10/8/2018 17:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb Variables: aList.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:41:47.776006+02:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\t\tTranscript show: terms class.\r\tterms add:aTerm.\r\t\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tTranscript show: terms class.\r\tterms add:aTerm.\r\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:41:54.364875+02:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.\r\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:42:57.963039+02:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: ((LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\'))))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=((LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\')).\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:43:01.403193+02:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=((LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\')).\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=(LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:43:21.057105+02:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tTranscript show: terms class.\r\tterms add:aTerm.\r\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.\r',			#stamp : 'pm 10/8/2018 17:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:43:36.846899+02:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.\r\tTranscript show: terms class.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 10/8/2018 17:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:44:06.38457+02:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=(LinkedList new) add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:47:16.170029+02:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:44',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest. \r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:48:03.040131+02:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tTranscript show: (terms class).\r\tterms do:[:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:38',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do:[:each| t:=t,each prettyPrint,\',\'. ].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/8/2018 17:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:50:44.293617+02:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:20',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem value]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:51:48.415399+02:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 18:44',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:t prettyPrint.\r\t^ self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:51:59.556065+02:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:t prettyPrint.\r\t^ self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:51',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:52:05.964518+02:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/7/2018 18:44',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t\tTranscript show:t prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:52:06.945492+02:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t\tTranscript show:t prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:t prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:52:23.815817+02:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:t prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:var prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:52:31.704627+02:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:var prettyPrint.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:var.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:52:38.679187+02:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\tTranscript show:var.\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm new: \'f\' Variables: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^ self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap\t"(self class) new: ("\t")"\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/8/2018 17:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:53:25.04219+02:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem value]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\tTranscript show:elem.\r\t\t(elem isNil)\r\t\tifFalse:[^elem value]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:53:51.311692+02:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\tTranscript show:elem.\r\t\t(elem isNil)\r\t\tifFalse:[^elem value]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:54:18.000784+02:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb)]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^nil].\r\t\t(elem isNil)\r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t].',			#stamp : 'pm 10/8/2018 17:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:55:11.600826+02:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].',			#stamp : 'pm 10/7/2018 17:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].\r\t^res.',			#stamp : 'pm 10/8/2018 17:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:56:21.830284+02:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].\r\t^res.',			#stamp : 'pm 10/8/2018 17:55',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].\r\t^Predicate new: (self getSymb) fromList:res .',			#stamp : 'pm 10/8/2018 17:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:56:55.080466+02:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tterms do:[ :term | res := term WhatAmI:setOfLinkedVar CorrespondingValue:aMap. ].\r\t^Predicate new: (self getSymb) fromList:res .',			#stamp : 'pm 10/8/2018 17:56',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res .',			#stamp : 'pm 10/8/2018 17:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:58:30.037033+02:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res .',			#stamp : 'pm 10/8/2018 17:56',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t|t res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tt:=Predicate new: (self getSymb) fromList:res .\r\tTranscript show:t prettyPrint.\r\t^t.',			#stamp : 'pm 10/8/2018 17:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-08T17:59:27.514333+02:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t|t res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tt:=Predicate new: (self getSymb) fromList:res .\r\tTranscript show:t prettyPrint.\r\t^t.',			#stamp : 'pm 10/8/2018 17:58',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t|t res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tt:=Predicate new: (self getSymb) fromList:res.\r\t^t.',			#stamp : 'pm 10/8/2018 17:59',			#package : #_resolution_1erOrdre		}	}}