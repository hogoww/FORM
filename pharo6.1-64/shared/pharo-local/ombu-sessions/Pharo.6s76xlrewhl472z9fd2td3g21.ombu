OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.116972+02:00' ],		#prior : OmReference [ 'Pharo.71nv04ubnzmie93u7s22tcm7h', '4' ],		#self : OmReference [ '1' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #LinkedListFix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #LinkedListFix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedListFix class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteLinkedListFix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteLinkedListFix,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.355335+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteAtome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAtome,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.450353+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePredicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePredicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoletePredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoletePredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.522395+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #UnaryTerm\r\tinstanceVariableNames: \'term\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #UnaryTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnaryTerm,						#isMetaSide : false					},					#name : #term,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnaryTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteUnaryTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteUnaryTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.597117+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone\''				},				#name : #'AnObsoleteProp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteProp class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteProp,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.704012+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'patternAnd patternAndSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'AnObsoleteOr class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternAndSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOr class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteOr,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.806381+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteForAll,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:14.967119+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pair\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Pair,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePair,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePair,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pair class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoletePair class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoletePair,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.090916+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteImply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteImply,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.201579+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteExists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteExists,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.288095+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteMinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteMinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.355138+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteEqual class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteEqual,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.433213+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteQuantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteQuantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteQuantifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.744154+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteFuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteFuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'currentFuncNumber anonymousFuncSymb\''				},				#name : #'AnObsoleteFuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteFuncTerm class',							#isMetaSide : true						},						#name : #currentFuncNumber,						#parent : @16					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteFuncTerm class',							#isMetaSide : true						},						#name : #anonymousFuncSymb,						#parent : @16					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteFuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.82148+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'patternOr patternOrSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'AnObsoleteAnd class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternOrSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteAnd class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAnd,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.897195+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'AnObsoleteNot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteNot class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNot,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:15.981272+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Clause\r\tinstanceVariableNames: \'atomes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Clause,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteClause,						#isMetaSide : false					},					#name : #atomes,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Clause class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteClause class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteClause,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.0527+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteNotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNotVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.124124+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteBinary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteBinary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteBinary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteBinary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.19181+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteUnary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteUnary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.261549+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.328222+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteVar,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.396681+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteProp',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteProp subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'AnObsoleteOperator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteOperator class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteOperator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.477269+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteTrue_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteTrue_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.543013+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AbstractTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #AbstractTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteAbstractTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteAbstractTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.610495+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteUnifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteUnifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteUnifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.689544+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteFalse_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteFalse_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.752754+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.816164+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteUnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteUnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteLinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteLinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.87431+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteAtome',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteAtome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'AnObsoleteConstant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteConstant class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteConstant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:16.939677+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoletePredicate',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoletePredicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteNotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteNotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:31:17.025179+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AnObsoleteUnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AnObsoleteUnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'AnObsoleteConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AnObsoleteConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.638157+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AbstractTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #AbstractTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AbstractTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AbstractTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.654085+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AbstractTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #AbstractTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'AbstractTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AbstractTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract factorisation needed.\rDocumentation available in Term.',				#stamp : 'pm 10/22/2018 19:40'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Abstract factorisation needed.\rDocumentation available in Term.',		#newStamp : 'pm 10/22/2018 19:40'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.669551+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/18/2018 17:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.683413+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^SubclassResponsibility.',			#stamp : 'pm 10/11/2018 10:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.691352+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\t"Used to check if a term, or more often a funcTerm is const, while trying to unify a term with a funcTerm."\r\t^false.',			#stamp : 'pm 10/15/2018 16:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.707578+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].',			#stamp : 'pm 10/11/2018 15:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.726438+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.731209+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:16'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/23/2018 12:16'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.752295+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.761826+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialization,			#sourceCode : 'add: clause\r\t(clause isKindOf: Clause)\r\tifTrue: [ self clauses add: clause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].',			#stamp : 'pm 10/9/2018 13:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.77147+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: ClausifiedFormula\r\tclauses:=MinimalOrderedSet new.\r\tself addAll: ClausifiedFormula.',			#stamp : 'pm 10/15/2018 15:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.784399+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #initialization,			#sourceCode : 'addAll: clausifiedProp\r\t((clausifiedProp  isKindOf: Or) | (clausifiedProp isKindOf: Atome))\r\t "If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self clauses add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isKindOf: Not)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isKindOf:Atome)\r\t\t\tifTrue:[^self clauses add:(Clause new:clausifiedProp).]\r\t\t\tifFalse:[^Error new:\'a not isn\'\'t englobing an atome\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isKindOf: And)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\tError new: \'Tried to add a non clause object to a clausaleForm\'.].\r\t].\r\t].',			#stamp : 'pm 10/9/2018 13:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.794372+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #initialization,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=\'{\'.\r\t\tclauses do: [  :each | t:=t,(each prettyPrint). ] separatedBy: [t:=t,\',\'].\r\tt:=t,\'}\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.804404+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tclauses:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/15/2018 15:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.811455+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #clauses,			#protocol : #accessing,			#sourceCode : 'clauses\r\t^clauses.',			#stamp : 'pm 10/1/2018 20:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.819652+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: ClausaleProposition\r\t^self basicNew initialize:ClausaleProposition.',			#stamp : 'pm 10/3/2018 12:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.823698+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize.',			#stamp : 'pm 10/3/2018 12:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.831476+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Clause\r\tinstanceVariableNames: \'atomes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Clause,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Clause,						#isMetaSide : false					},					#name : #atomes,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Clause class\r\tinstanceVariableNames: \'\''				},				#name : #'Clause class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Clause,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.836018+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #atomes,			#protocol : #accessing,			#sourceCode : 'atomes\r\t^atomes.',			#stamp : 'pm 10/1/2018 20:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.843676+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: orProp\r\t(orProp isKindOf: Atome)\r\tifTrue:[self add:orProp.]\r\tifFalse:[\r\t\t((orProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(orProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((orProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (orProp operand) getSymb fromList: (orProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((orProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((orProp operand) getSymb)).]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ]].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((orProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (orProp left).\r\t\t\t\tself addAll: (orProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tError new:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 13:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.848012+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'add:',			#protocol : #accessing,			#sourceCode : 'add: var\r\t(var isKindOf: Atome)\r\t\tifTrue:[\r\t\t\t(self atomes) add:var.\r\t\t\t^self."able chaining operation"\r\t\t\t]\r\t\tifFalse:[\r\t\t\t\tError new: \'wrong type in clause\'.\r\t\t\t].',			#stamp : 'pm 10/9/2018 13:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.850715+02:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tatomes:=MinimalOrderedSet new.',			#stamp : 'pm 10/15/2018 15:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.854695+02:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize: OrProp\r\tatomes:=MinimalOrderedSet new.\r\tself addAll:OrProp.',			#stamp : 'pm 10/15/2018 15:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.857646+02:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn:stream.\r\tstream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/14/2018 15:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.860632+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=\'{\'.\r\t\tatomes do:[  :each | t:=t,(each prettyPrint). ] separatedBy:[t:=t,\',\'].\r\tt:=t,\'}\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.866189+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Clause class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: OrProp\r\t^self basicNew initialize:OrProp.',			#stamp : 'pm 10/2/2018 17:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.869566+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Clause class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize.',			#stamp : 'pm 10/2/2018 17:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.877078+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.878978+02:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',		#newStamp : 'pm 10/9/2018 10:43'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.882996+02:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo Variables: listOfLinkedVar\r\tsymb:=symbo.\r\tterms:=LinkedListFix new.\r\tlistOfLinkedVar  do: [:each | terms add: each.].',			#stamp : 'pm 10/22/2018 09:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.885155+02:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo Variable: aTerm\r\tsymb:=symbo.\r\tterms:=LinkedListFix new.\r\tterms add: aTerm.',			#stamp : 'pm 10/22/2018 09:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.888923+02:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: symbo\r\tsymb:=symbo.\r\tterms:=LinkedListFix new.',			#stamp : 'pm 10/22/2018 09:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.892001+02:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| newVars t|\r\tnewVars:=LinkedList new.\r\tterms do: [ :each | newVars add: (each WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tt:=(FuncTerm new: (self getSymb) Variables:newVars).\r\t^t.',			#stamp : 'pm 10/11/2018 16:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.895072+02:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do: [:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.\r\t',			#stamp : 'pm 10/11/2018 09:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.897426+02:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'contains:',			#protocol : #printing,			#sourceCode : 'contains: aTerm\r\t^ terms anySatisfy: [ :each | each contains: aTerm ]',			#stamp : 'pm 10/18/2018 22:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.900953+02:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: index \r\t^ (self terms) at:index.',			#stamp : 'pm 10/18/2018 09:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.903501+02:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #arity,			#protocol : #accessing,			#sourceCode : 'arity\r\t^terms size.\r\t\r',			#stamp : 'pm 10/18/2018 18:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.906641+02:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms',			#stamp : 'pm 10/6/2018 19:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.911622+02:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 10/11/2018 09:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.917046+02:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\tterms do:[:each | (each isConst)ifFalse:[^false]].\r\t^true',			#stamp : 'pm 10/15/2018 16:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.921044+02:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'replace:by:',			#protocol : #adding,			#sourceCode : 'replace:x by:t\r\t| i |\r\ti:=1.\r\r\t[i<=(self arity)]\r\twhileTrue:[\r\t\t((terms at:i) isKindOf: FuncTerm)\r\t\tifTrue:[ \r\t\t\t(terms at:i) replace:x by:t.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((terms at:i)=x)"x is either a ConstTerm or a LinkedTerm, so we need to replace them here rather than let them overview it."\r\t\t\tifTrue:[\r\t\t\t\t"Transcript cr;cr;show:\'pouet\';cr;cr."\r\t\t\t\tterms at:i put:t.\r\t\t\t\t].\r\t\t\t].\r\t\t\ti:=i+1.\r\t\t].\r\t^self',			#stamp : 'pm 10/22/2018 10:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.92384+02:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'addTerm:',			#protocol : #adding,			#sourceCode : 'addTerm: aTerm\r\tterms add:aTerm.',			#stamp : 'pm 10/18/2018 10:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.928936+02:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res and:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: anotherFuncTerm]."comparing arity"\r\tres:=res and:[(self isSameTerms: anotherFuncTerm).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/18/2018 16:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.931579+02:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherFuncTerm\r\t^(self terms) = (anotherFuncTerm terms).',			#stamp : 'pm 10/17/2018 12:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.934506+02:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameArity:',			#protocol : #comparing,			#sourceCode : 'isSameArity:anotherFuncTerm\r\t^(self arity)=(anotherFuncTerm arity).',			#stamp : 'pm 10/17/2018 12:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.938614+02:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:57.944899+02:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #FuncTerm\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #symb,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'currentFuncNumber anonymousFuncSymb\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'FuncTerm class',							#isMetaSide : true						},						#name : #currentFuncNumber,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'FuncTerm class',							#isMetaSide : true						},						#name : #anonymousFuncSymb,						#parent : @34					}				],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @25,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.109004+02:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcurrentFuncNumber:=0.\r\tanonymousFuncSymb:=\'f\'.',			#stamp : 'pm 10/18/2018 21:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.112424+02:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'newFuncWithVars:',			#protocol : #'instance creation',			#sourceCode : 'newFuncWithVars: varList\r\t^self basicNew initialize: (self getNewFuncName) Variables:varList.',			#stamp : 'pm 10/11/2018 15:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.115686+02:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:Variables:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo Variables: setOfLinkedVar\r\t^self basicNew initialize:symbo Variables: setOfLinkedVar.',			#stamp : 'pm 10/7/2018 15:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.119176+02:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #getNewFuncName,			#protocol : #'instance creation',			#sourceCode : 'getNewFuncName\r\tcurrentFuncNumber :=currentFuncNumber +1.\r\t^anonymousFuncSymb,(currentFuncNumber asString).',			#stamp : 'pm 10/11/2018 15:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.121526+02:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:Variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo Variable: aVar\r\t^self basicNew initialize:symbo Variable: aVar.',			#stamp : 'pm 10/10/2018 21:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.124056+02:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self basicNew initialize: (self getNewFuncName).',			#stamp : 'pm 10/11/2018 15:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.126149+02:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'newFunc:',			#protocol : #'instance creation',			#sourceCode : 'newFunc: variable\r\t^self basicNew initialize: (self getNewFuncName) Variable:variable.',			#stamp : 'pm 10/11/2018 15:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.129607+02:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FuncTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: symbo\r\t^self basicNew initialize:symbo.',			#stamp : 'pm 10/11/2018 15:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.133774+02:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #LinkedListFix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedListFix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedListFix class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedListFix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedListFix,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.135124+02:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #LinkedListFix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedListFix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedListFix class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedListFix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedListFix,					#isMetaSide : false				},				#parent : @7,				#content : 'Only exists because the basic LinkedList implementation of at:put: is weird, and create a infinite loop if you add twice the same object.\r\rThat override fixes that.',				#stamp : 'pm 10/22/2018 10:04'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Only exists because the basic LinkedList implementation of at:put: is weird, and create a infinite loop if you add twice the same object.\r\rThat override fixes that.',		#newStamp : 'pm 10/22/2018 10:04'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.139552+02:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedListFix,				#isMetaSide : false			},			#name : #'at:put:',			#protocol : #accessing,			#sourceCode : 'at:index put: anObject\r\t"Override since the basic one seems to rather do a infinite loop for no reason."\r\r\t| currentLink i |\r\tcurrentLink:=self firstLink.\r\ti:=1.\r\r \t[(index=(i)) and:[(currentLink isNil) not]]\r\twhileFalse:[\r\t\ti:=i+1.\r\t\tcurrentLink:=currentLink nextLink.\r\t\t].\r\t\r\t(currentLink isNil)\r\tifTrue:[^self error:\'index out of bound\']\r\tifFalse:[currentLink value: anObject ].',			#stamp : 'pm 10/22/2018 09:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.146584+02:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.149233+02:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',		#newStamp : 'pm 10/9/2018 10:08'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.153643+02:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'merge:',			#protocol : #adding,			#sourceCode : 'merge: anotherMinimalOrderedSet\r\tanotherMinimalOrderedSet do:[:each | self add:each.].\r\t^self.',			#stamp : 'pm 10/15/2018 16:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.158018+02:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: anObject \r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^self]"Object\'s already in, we\'re done"\r\t\t].\r\t super add: anObject."we let LinkedList add the object"\r\t^self.',			#stamp : 'pm 10/7/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.161001+02:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'haveYouSeenThisObject:',			#protocol : #search,			#sourceCode : 'haveYouSeenThisObject: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:["Transcript cr;show:each prettyPrint;cr".\r\t\t\t^true.]\r\t\t].\r\t^false.',			#stamp : 'pm 10/11/2018 13:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.17007+02:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pair\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Pair,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pair class\r\tinstanceVariableNames: \'\''				},				#name : #'Pair class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pair,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.17269+02:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pair\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Pair,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pair,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pair class\r\tinstanceVariableNames: \'\''				},				#name : #'Pair class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pair,					#isMetaSide : false				},				#parent : @7,				#content : 'Basic implementation of the Pair data-structure',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Basic implementation of the Pair data-structure',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.179001+02:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: (self prettyPrint)',			#stamp : 'pm 10/18/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.181686+02:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'(\',(self left prettyPrint),\',\',(self right prettyPrint),\')\'.',			#stamp : 'pm 10/15/2018 16:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.186256+02:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #prettyPrintUnifier,			#protocol : #printing,			#sourceCode : 'prettyPrintUnifier\r\t^\'(\',(self left prettyPrint),\'=\',(self right prettyPrint),\')\'.',			#stamp : 'pm 10/18/2018 15:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.191568+02:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherPair\r\t^(self left)=(anotherPair left) and:[(self right)=(anotherPair right)].',			#stamp : 'pm 10/18/2018 16:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.194208+02:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'left:right:',			#protocol : #initialize-release,			#sourceCode : 'left:l right:r\r\tleft:=l.\r\tright:=r.',			#stamp : 'pm 10/15/2018 16:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.197933+02:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: anObject\r\tright:=anObject.\r\t^right',			#stamp : 'pm 10/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.201392+02:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: anObject\r\tleft:=anObject.\r\t^left',			#stamp : 'pm 10/15/2018 16:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.204702+02:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^left',			#stamp : 'pm 10/15/2018 16:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.211204+02:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pair,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^right',			#stamp : 'pm 10/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.216154+02:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pair class',				#isMetaSide : true			},			#name : #'left:right:',			#protocol : #initialize-release,			#sourceCode : 'left:l right:r\r\t^(self basicNew) left:l right:r.',			#stamp : 'pm 10/15/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.222672+02:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.224533+02:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',		#newStamp : 'pm 10/9/2018 10:52'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.229105+02:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/18/2018 15:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.234243+02:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 10/9/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.237634+02:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.241139+02:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.248179+02:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"',			#stamp : 'pm 10/6/2018 18:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.25312+02:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #StartSkolemnisation,			#protocol : #Skoleminsation,			#sourceCode : 'StartSkolemnisation\r\t| set aMap |\r\tset:=MinimalOrderedSet new.\r\taMap:=Dictionary new.\r\t^self Skolemnise: set CorrespondingValue: aMap',			#stamp : 'pm 10/7/2018 19:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.255956+02:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'compareSymbol:',			#protocol : #matching,			#sourceCode : 'compareSymbol: otherProp\r\t^(self getSymb = otherProp getSymb) ',			#stamp : 'pm 9/30/2018 10:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.26178+02:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 9/30/2018 09:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.266573+02:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing-properties,			#sourceCode : 'isAtome\r\t^false.',			#stamp : 'pm 10/23/2018 07:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.271625+02:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isFalse_Const,			#protocol : #testing-properties,			#sourceCode : 'isFalse_Const\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.276199+02:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing-properties,			#sourceCode : 'isVar\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.280121+02:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing-properties,			#sourceCode : 'isQuantifier\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.283469+02:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing-properties,			#sourceCode : 'isExists\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.287149+02:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing-properties,			#sourceCode : 'isNotPredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.290491+02:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing-properties,			#sourceCode : 'isEqual\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.293923+02:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing-properties,			#sourceCode : 'isConst\r\t^false.',			#stamp : 'pm 10/23/2018 07:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.299143+02:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing-properties,			#sourceCode : 'isOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.304177+02:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing-properties,			#sourceCode : 'isConstant\r\t^false.',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.30921+02:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing-properties,			#sourceCode : 'isImply\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.312729+02:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing-properties,			#sourceCode : 'isNot\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.316063+02:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing-properties,			#sourceCode : 'isAnd\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.319012+02:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isBinaryOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.321995+02:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing-properties,			#sourceCode : 'isPredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.326961+02:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing-properties,			#sourceCode : 'isNotVar\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.331478+02:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isProp,			#protocol : #testing-properties,			#sourceCode : 'isProp\r\t^true.',			#stamp : 'pm 10/23/2018 07:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.335468+02:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing-properties,			#sourceCode : 'isOr\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.339205+02:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing-properties,			#sourceCode : 'isPositivePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.345078+02:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing-properties,			#sourceCode : 'isForAll\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.34876+02:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isTrue_Const,			#protocol : #testing-properties,			#sourceCode : 'isTrue_Const\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.352301+02:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing-properties,			#sourceCode : 'isNegativePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.355496+02:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isUnaryOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.358664+02:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^SubclassResponsibility. ',			#stamp : 'pm 9/28/2018 22:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.362035+02:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 9/29/2018 08:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.3651+02:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one iteration over the full formula."\r\t"Basic empty comportement for atomes mostly. (only?)"',			#stamp : 'pm 9/30/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.369076+02:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\t(Prop debug) ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 10/1/2018 10:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.372805+02:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchingUnitTest:',			#protocol : #testing,			#sourceCode : 'matchingUnitTest: prop\r\t"self will be considered as a pattern"\r\tTranscript cr;\r\t\tshow: \'prop : \' ; \r\t\tshow: (prop prettyPrint);\r\t\tcr;\r\t\tshow: \'pattern : \';\r\t\tshow: (self prettyPrint);\r\t\tcr.\r\t\t(self matchPatternWith: prop)\r\t\t\tifTrue:[ Transcript show: \'matched!\';cr.]\r\t\t\tifFalse:[ Transcript show: \'didn\'\'t match!\';cr]\r\t',			#stamp : 'pm 9/30/2018 12:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.378739+02:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #SkolemnisationTest,			#protocol : #testing,			#sourceCode : 'SkolemnisationTest\r\t|t|\r\tProp testInc.\t\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr;cr;cr.\r\t^t',			#stamp : 'pm 10/18/2018 15:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.384162+02:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'unificationUnitTest:',			#protocol : #testing,			#sourceCode : 'unificationUnitTest: otherPredicate\r\t|t newPair|\r\tProp testInc.\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'Trying to Unify \';show: self; show:\' and \';show: otherPredicate;cr.\r\tt:=Unifier new: self Predicate2: otherPredicate.\r\tnewPair:=t unifyThis.\r\t(t hasFailed)\r\tifFalse:[\r\t\tTranscript show:newPair;cr;cr.\r\t]\r\tifTrue:[\r\t\tTranscript show: \'Unification failed.\';cr;cr.\r\t\t].\r\t^t',			#stamp : 'pm 10/20/2018 12:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.386775+02:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self fullClausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr;cr.\r\t^t.',			#stamp : 'pm 10/9/2018 13:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.389505+02:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #propUnitTest,			#protocol : #testing,			#sourceCode : 'propUnitTest\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr; cr.\r\t^self',			#stamp : 'pm 10/9/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.393771+02:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @21,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.507797+02:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=false.\r\ttestNumber:=0.',			#stamp : 'pm 10/21/2018 13:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.510808+02:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Predicate new: \'P\' variable: \'a\').\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 10/5/2018 16:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.513209+02:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.\r\t\r\t"terms"\r\tTerm initialize.\r\tConstTerm initialize.\r\tFuncTerm initialize.\r\tLinkedTerm initialize.',			#stamp : 'pm 10/8/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.516568+02:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #testing,			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r"\tTranscript clear."\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 00:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.522675+02:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms terms2|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\r\tTranscript show: \'basic one #1\'.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'basic one #2\'.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'z\').\t\r\tp:=Or new: (ForAll new: \'x\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms )))\r\t rightProp: (ForAll new: \'x\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp SkolemnisationTest.\r\r\r\tTranscript show: \'with imply and nested forall.\'.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\tp SkolemnisationTest.\r\t\t\t\r\tTranscript show: \'same as previous one, but with x representing a variable in one, and a const in the other.\'.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\tp SkolemnisationTest.\t\r\t\t\r\tTranscript show: \'same as previous one, check Unbound Exists is replaced by consts\'.\r\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\tp SkolemnisationTest.\t\r\t\r\tTranscript show: \'Teacher\'\'s stress test#1\' .\r\tp:=Not new:(\r        ForAll new: \'x\' Property: \r        (Imply new: (ForAll new: \'y\' Property: (Predicate new: \'P\' variable: (Term new:\'y\')))\r         rightProp: (Predicate new:\'Q\' variable: (Term new:\'x\')))).        \r\tp SkolemnisationTest.\r\t\t\r\tTranscript show: \'Teacher\'\'s stress test#2\'\t.\r\tterms:=LinkedList new.\r    terms add:(Term new: \'x\') ; add:(Term new:\'z\').\r    terms2:=LinkedList new.\r    terms2 add:(Term new:\'y\') ; add: (Term new:\'t\').\r    p:=Not new:\r            (ForAll new: \'x\' Property:\r                (ForAll new: \'y\' Property:\r                    (Exists new: \'z\' Property: \r                        (ForAll new: \'t\' Property: \r                            (Imply new: \r                                (Predicate new: \'P\' fromList: terms)\r                             rightProp: \r                                (Predicate new: \'Q\' fromList: terms2)))))).\r\tp SkolemnisationTest.\r\t\t\t\r\tTranscript show: \'Test functionnal term in initial Predicate \'.\r\tterms:=LinkedList new.\r   terms add:(Term new: \'x\') ; add:(FuncTerm new: \'f\' Variable: (Term new:\'z\')).\r\r   p:=Not new:\r            (ForAll new: \'x\' Property:\r                  (Predicate new: \'P\' fromList: terms)).\r\tp SkolemnisationTest .\r\t\r\tTranscript show: \'Test functionnal term in initial Predicate  with needed inner replacement\'.\r\tterms:=LinkedList new.\r   terms add:(Term new: \'x\') ; add:(FuncTerm new: \'f\' Variable: (Term new:\'y\')).\r\r   p:=ForAll new: \'x\' Property:\r\t\t\t\t\t(Exists new: \'y\' Property:\r                  (Predicate new: \'P\' fromList: terms)).\r\tp SkolemnisationTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr. ',			#stamp : 'pm 10/15/2018 15:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.524491+02:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #debug,			#protocol : #testing,			#sourceCode : 'debug\r\t^debug',			#stamp : 'pm 10/1/2018 10:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.528588+02:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new: \'a\'))) rightProp: (Predicate new: \'P\' variable:(Term new: \'b\'))) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.531678+02:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingPropClassic,			#protocol : #testing,			#sourceCode : 'testingPropClassic\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp propUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/5/2018 16:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.536568+02:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingUnification,			#protocol : #testing,			#sourceCode : 'testingUnification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|t l r|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tTranscript show:\'decompositions\';cr.\r\tl:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tr:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'b\')).\r\tl unificationUnitTest:r.\r\r\tTranscript show:\'delete\';cr.\r\tl:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tr:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tl unificationUnitTest:r.\r\t\r\tTranscript show:\'conflict\';cr.\r\tl:=Predicate new: \'Q\' variable: (ConstTerm new:(Term new:\'a\')).\r\tr:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tl unificationUnitTest:r.\r\r\tTranscript show:\'swap\';cr.\r\tl:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable: (ConstTerm new: (Term new: \'a\'))).\r\tr:=Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\')).\r\tl unificationUnitTest:r.\r\r\t"G{f(x,g(x))=f(a,g(a))}"\r\tTranscript show:\'Exemple\tdavid #2\';cr.\r\tt:=LinkedList new.\r\tt add: (LinkedTerm new:(Term new:\'x\'));add:(FuncTerm new:\'g\' Variable: (LinkedTerm new:(Term new:\'x\'))).\r\tl:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tt:=LinkedList new.\r\tt add:(ConstTerm new:(Term new:\'a\')) ;add:(FuncTerm new:\'g\' Variable:(ConstTerm new:(Term new:\'a\'))).\r\tr:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tl unificationUnitTest:r.\r\t\r\t"G{f(x,g(a))=f(b,g(y))}"\r\tTranscript show:\'Exemple david #1\';cr.\r\tt:=LinkedList new.\r\tt add: (LinkedTerm new:(Term new:\'x\'));add:(FuncTerm new:\'g\' Variable: (ConstTerm new:(Term new:\'a\'))).\r\tl:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tt:=LinkedList new.\r\tt add:(ConstTerm new:(Term new:\'b\')) ;add:(FuncTerm new:\'g\' Variable:(LinkedTerm new:(Term new:\'y\'))).\r\tr:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tl unificationUnitTest:r.\r\t\r\t\r\t"should replace x by y at the end of the unification"\r\tTranscript show:\'x alias y\';cr.\r\tt:=LinkedList new.\r\tt add: (LinkedTerm new:(Term new:\'y\'));add:( LinkedTerm new:(Term new:\'x\'));add:(ConstTerm new:(Term new:\'a\')).\r\tl:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tt:=LinkedList new.\r\tt add: (LinkedTerm new:(Term new:\'x\'));add:(LinkedTerm new:(Term new:\'y\'));add:(LinkedTerm new:(Term new:\'x\')).\r\tr:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variables:t).\r\tl unificationUnitTest:r.\r\t\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/22/2018 10:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.53906+02:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\t"Prop testingProp."\r\t"Prop testingMatch."\r\t"Prop testingClausification."\r\tProp testingSkolemn.\r\tProp testingUnification.',			#stamp : 'pm 10/22/2018 10:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.542286+02:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testInc,			#protocol : #tests,			#sourceCode : 'testInc\r\ttestNumber:=testNumber+1.',			#stamp : 'pm 10/11/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.544975+02:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testNumber,			#protocol : #accessing,			#sourceCode : 'testNumber\r\t^testNumber',			#stamp : 'pm 10/11/2018 16:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.547221+02:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #debugUnification,			#protocol : #accessing,			#sourceCode : 'debugUnification\r\t^debugUnification',			#stamp : 'pm 10/18/2018 18:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.552302+02:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.554626+02:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',				#stamp : 'pm 10/9/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',		#newStamp : 'pm 10/9/2018 11:03'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.557042+02:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^true',			#stamp : 'pm 9/29/2018 08:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.560436+02:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.562931+02:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isSkolem,			#protocol : #testing,			#sourceCode : 'isSkolem\r\t^true.',			#stamp : 'pm 10/5/2018 23:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.564183+02:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing,			#sourceCode : 'isAtome\r\t^true',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.569314+02:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.571546+02:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True and False constants, to represent them in Propositions\r\r',		#newStamp : 'pm 10/9/2018 11:07'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.575238+02:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing,			#sourceCode : 'isConstant\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.578995+02:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.582202+02:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.584161+02:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessors,			#sourceCode : 'getSymb\r\t^(self class symb)',			#stamp : 'pm 9/28/2018 22:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.588765+02:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Constant class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @21,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.72179+02:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.723965+02:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'False const',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'False const',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.728033+02:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #False_Const,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^prop isKindOf: False_Const',			#stamp : 'pm 9/30/2018 09:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.729434+02:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #False_Const,				#isMetaSide : false			},			#name : #isFalseConst,			#protocol : #testing,			#sourceCode : 'isFalseConst\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.732251+02:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'False_Const class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb',			#stamp : 'pm 9/28/2018 21:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.734192+02:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'False_Const class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'F\'.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.738779+02:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.741767+02:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',		#newStamp : 'pm 10/9/2018 10:48'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.746313+02:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #print,			#sourceCode : 'getSymb\r\t^(self class symb)',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.748969+02:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing,			#sourceCode : 'isOperator\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.752765+02:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Operator class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.866473+02:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Operator class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb.',			#stamp : 'pm 10/4/2018 23:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.872057+02:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.873862+02:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',				#stamp : 'pm 10/9/2018 10:55'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',		#newStamp : 'pm 10/9/2018 10:55'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.878609+02:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.881526+02:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.883642+02:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rp\r\tleft:=leftProp.\r\tright:=rp.\r\t',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.885515+02:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: replacement\r\tright:=replacement.\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.88783+02:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: replacement\r\tleft:=replacement.\r\t^left',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.889574+02:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.891126+02:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^left',			#stamp : 'pm 9/30/2018 08:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.892621+02:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t"false unless it\'s a or/and"\r\t^false',			#stamp : 'pm 9/29/2018 08:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.894791+02:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tleft prettyPrint,\r\t\t((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']) ,\r\r\t\tself getSymb,\r\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tright prettyPrint,\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).\r',			#stamp : 'pm 9/30/2018 12:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.896601+02:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\t\tifTrue:[\r\t\t\t^(left matchPatternWith: (prop left))\r\t\t\t& (right matchPatternWith: (prop right))\r\t\t\t]\r\t\tifFalse:[^false].',			#stamp : 'pm 9/30/2018 12:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.898633+02:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing,			#sourceCode : 'isBinaryOperator  \r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.901295+02:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binary class',				#isMetaSide : true			},			#name : #'new:rightProp:',			#protocol : #initialize,			#sourceCode : 'new: leftProp rightProp: rp\r\t^self basicNew initialize: leftProp rightProp: rp.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.906161+02:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.908247+02:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an And proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.911837+02:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.915529+02:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((And patternFalse) matchPatternWith: self)\r\tifTrue:[t:=right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=right]\r\t\t\t\tifFalse:["\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=Or new:(And new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t"]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[ (Prop debug) ifTrue:[Transcript show:\'in And\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in And2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification"]. ',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.917239+02:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t^true\r',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.919377+02:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing,			#sourceCode : 'isAnd\r\t^true\r',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:58.92307+02:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'patternOr patternOrSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOrSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.038607+02:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.05463+02:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.059318+02:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOrSym,			#protocol : #accessing,			#sourceCode : 'patternOrSym\r\t^patternOrSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.061032+02:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.062682+02:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.065096+02:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.084115+02:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'/\\\'.\r\tpatternOr:=And new: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternOrSym:=And new: (Var new: \'a\') rightProp: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=And new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=And new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=And new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/3/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.090617+02:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.091755+02:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Equal proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Equal proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.09376+02:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing,			#sourceCode : 'isEqual\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.096049+02:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=Or new: (And new: (self left) rightProp: (self right))\r\t\t rightProp: (And new:(Not new: (self left)) rightProp:(Not new: (self right))).\r\t(Prop debug) ifTrue:[Transcript show:\'in equal\';show: t prettyPrint;cr.].\r\t^t "clausification".',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.098694+02:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Equal class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'<->\'.',			#stamp : 'pm 9/30/2018 17:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.102877+02:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.103846+02:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Imply  proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Imply  proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.108315+02:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.111188+02:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.113744+02:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t|t|\r\tt:=Or new: (Not new:left)  rightProp: right.\r\t(Prop debug) ifTrue:[Transcript show:\'in Imply\';show: t prettyPrint;cr.].\r\t^t "clausification".',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.11529+02:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing,			#sourceCode : 'isImply\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.11939+02:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'->\'.',			#stamp : 'pm 9/30/2018 17:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.124224+02:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.125398+02:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Or proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.128318+02:00' ],		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.129822+02:00' ],		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.133298+02:00' ],		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.136644+02:00' ],		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'patternAnd patternAndSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAndSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.268677+02:00' ],		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.271015+02:00' ],		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.273423+02:00' ],		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAndSym,			#protocol : #accessing,			#sourceCode : 'patternAndSym\r\t^patternAndSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.275659+02:00' ],		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.277084+02:00' ],		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.279655+02:00' ],		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'\\/\'. \r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/4/2018 08:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.280798+02:00' ],		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #initialize,			#sourceCode : 'patternAnd\r\t^patternAnd',			#stamp : 'pm 9/30/2018 16:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.286802+02:00' ],		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.28837+02:00' ],		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.292652+02:00' ],		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\tsymb:=symbl.\r\taLinkedListOfTerm do:[:each| \r\t\t(each isKindOf: AbstractTerm)\r\t\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\t\t].\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 10/18/2018 16:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.294606+02:00' ],		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\t(aTerm isKindOf: AbstractTerm)\r\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\tsymb:=symbl.\r\tterms:=LinkedListFix new.\r\tterms add:aTerm.\r',			#stamp : 'pm 10/22/2018 09:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.296608+02:00' ],		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl\r\tsymb:=symbl.\r\tterms:=LinkedListFix new.\r',			#stamp : 'pm 10/22/2018 09:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.298751+02:00' ],		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSameSymb:predicate) \r\tand:[(self isSameVar:predicate)].',			#stamp : 'pm 10/17/2018 12:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.300126+02:00' ],		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #testing,			#sourceCode : 'isSameVar: predicate\r\t"= defined on SequenceableCollection, LinkedList\'s superclass."\r\t^(self terms)=(predicate terms).',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.304519+02:00' ],		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'contains:',			#protocol : #testing,			#sourceCode : 'contains: aTerm\r\t^ terms anySatisfy: [ :each | each contains: aTerm ]',			#stamp : 'pm 10/18/2018 22:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.307398+02:00' ],		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePredicate:',			#protocol : #testing,			#sourceCode : 'isSamePredicate: predicate\r\t"deprecated."\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.309794+02:00' ],		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameArity:',			#protocol : #testing,			#sourceCode : 'isSameArity:anotherPredicate\r\t^(self arity)=(anotherPredicate arity).',			#stamp : 'pm 10/18/2018 16:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.311714+02:00' ],		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.313815+02:00' ],		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\tterms do:[:each | (each isConst)ifFalse:[^false]].\r\t^true',			#stamp : 'pm 10/20/2018 09:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.315581+02:00' ],		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing,			#sourceCode : 'isPredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.317882+02:00' ],		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^true.',			#stamp : 'pm 10/5/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.32015+02:00' ],		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r"\tTranscript show:terms ;cr."\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.322428+02:00' ],		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: Predicate."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/18/2018 16:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.324113+02:00' ],		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: AnotherPredicate\r\t^(self terms) = (AnotherPredicate terms).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.325915+02:00' ],		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.328153+02:00' ],		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: index \r\t^ (self terms) at:index.',			#stamp : 'pm 10/18/2018 09:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.330394+02:00' ],		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #arity,			#protocol : #accessing,			#sourceCode : 'arity\r\t^terms size.',			#stamp : 'pm 10/18/2018 15:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.332176+02:00' ],		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.33413+02:00' ],		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb.',			#stamp : 'pm 10/5/2018 15:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.335797+02:00' ],		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop\'s comment for usage."\r\t^true',			#stamp : 'pm 10/7/2018 17:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.337613+02:00' ],		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.3403+02:00' ],		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.342647+02:00' ],		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.347238+02:00' ],		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'replace:by:',			#protocol : #adding,			#sourceCode : 'replace:x by:t\r\t| i |\r\ti:=1.\r\t[i<=(self arity)]\r\twhileTrue:[\r\t\t((terms at:i) isKindOf: FuncTerm)\r\t\tifTrue: [\r\t\t\t"Transcript cr;cr;show:\'pouet\';cr;cr."\r\t\t\t(terms at:i) replace:x by:t.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((terms at:i)=x)"x is either a ConstTerm or a LinkedTerm, so we need to replace them here rather than let them overview it."\r\t\t\tifTrue:[\r\t\t\t\tterms at:i put:t.\r\t\t\t\t].\r\t\t\t].\r\t\t\ti:=i+1.\r\t\t].\r\t^self',			#stamp : 'pm 10/21/2018 13:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.351595+02:00' ],		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:fromList:',			#protocol : #'instance creation',			#sourceCode : 'new: symb fromList: aList\r\t^self basicNew initialize: symb Variables: aList.',			#stamp : 'pm 10/8/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.353331+02:00' ],		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symb variable: aVar\r\t^self basicNew initialize: symb Variable:aVar.',			#stamp : 'pm 10/5/2018 20:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.357162+02:00' ],		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: symb\r\t^self basicNew initialize: symb.',			#stamp : 'pm 10/11/2018 14:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.36488+02:00' ],		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.36714+02:00' ],		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative Predicate, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative Predicate, only in ClausalForm',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.371811+02:00' ],		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t^(anotherPredicate isKindOf: NotPredicate) or:[super=anotherPredicate]."check class, and polarity"',			#stamp : 'pm 10/15/2018 15:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.374111+02:00' ],		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^(Not symb),(super prettyPrint)',			#stamp : 'pm 10/9/2018 17:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.376135+02:00' ],		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.377892+02:00' ],		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing,			#sourceCode : 'isNegativePredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.379802+02:00' ],		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing,			#sourceCode : 'isNotPredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.388709+02:00' ],		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.390287+02:00' ],		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',				#stamp : 'pm 10/9/2018 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',		#newStamp : 'pm 10/9/2018 10:36'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.393426+02:00' ],		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.\r',			#stamp : 'pm 10/11/2018 11:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.395877+02:00' ],		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #accessing,			#sourceCode : 'initialize: aName\r\tsymb:=aName.\r',			#stamp : 'pm 10/11/2018 12:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.397878+02:00' ],		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 10/11/2018 11:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.400432+02:00' ],		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherTerm\r\t"default comparing for terms."\r\t^(self getSymb)=(anotherTerm getSymb).',			#stamp : 'pm 10/21/2018 13:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.40526+02:00' ],		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Term class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aName\r\t^(self basicNew) initialize:aName.',			#stamp : 'pm 10/11/2018 11:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.412632+02:00' ],		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.415635+02:00' ],		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'True Const\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True Const\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.419367+02:00' ],		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #True_Const,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^prop isKindOf: True_Const',			#stamp : 'pm 9/30/2018 09:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.421397+02:00' ],		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #True_Const,				#isMetaSide : false			},			#name : #isTrueConst,			#protocol : #testing,			#sourceCode : 'isTrueConst\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.427738+02:00' ],		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'True_Const class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'T\'.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.429854+02:00' ],		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'True_Const class',				#isMetaSide : true			},			#name : #symb,			#protocol : #accessing,			#sourceCode : 'symb\r\t^symb',			#stamp : 'pm 9/28/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.437309+02:00' ],		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.439673+02:00' ],		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',				#stamp : 'pm 10/9/2018 10:56'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',		#newStamp : 'pm 10/9/2018 10:56'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.442888+02:00' ],		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing,			#sourceCode : 'isUnaryOperator \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.446403+02:00' ],		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #operand,			#protocol : #accessing,			#sourceCode : 'operand\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.449107+02:00' ],		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'operand:',			#protocol : #accessing,			#sourceCode : 'operand: replacement\r\toperand:=replacement.\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.451428+02:00' ],		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #Initialize,			#sourceCode : 'initialize: prop\r\toperand:=prop.',			#stamp : 'pm 9/28/2018 22:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.453777+02:00' ],		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\toperand prettyPrint,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 9/30/2018 19:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.455214+02:00' ],		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\t\tifTrue:[^operand matchPatternWith: (prop operand)]\r\t\tifFalse:[^false].',			#stamp : 'pm 9/30/2018 10:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.45818+02:00' ],		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unary class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #Initialize,			#sourceCode : 'new: prop\r\t^self basicNew initialize: prop.',			#stamp : 'pm 9/28/2018 22:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.462354+02:00' ],		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.464327+02:00' ],		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Not  operator',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.466709+02:00' ],		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.468274+02:00' ],		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.469426+02:00' ],		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 9/30/2018 20:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.472403+02:00' ],		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\t self operand:(operand clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ].',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.474596+02:00' ],		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing,			#sourceCode : 'isNot\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.483766+02:00' ],		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @26					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.59772+02:00' ],		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.599391+02:00' ],		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #accessing,			#sourceCode : 'patternAnd\r\t^patternAnd.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.600783+02:00' ],		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternNot,			#protocol : #accessing,			#sourceCode : 'patternNot\r\t^patternNot.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.602388+02:00' ],		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.603941+02:00' ],		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.606893+02:00' ],		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 18:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.61296+02:00' ],		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.615297+02:00' ],		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',				#stamp : 'pm 10/9/2018 11:28'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',		#newStamp : 'pm 10/9/2018 11:28'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.617678+02:00' ],		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t"very unsure here"\r\t^false',			#stamp : 'pm 10/5/2018 17:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.619109+02:00' ],		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing,			#sourceCode : 'isQuantifier \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.620439+02:00' ],		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: arg Property: prop\r\tsuper initialize: prop.\r\tvar:=arg.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.621706+02:00' ],		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #var,			#protocol : #accessing,			#sourceCode : 'var\r\t^var.',			#stamp : 'pm 10/4/2018 13:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.623177+02:00' ],		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self class symb),\' \', (self var), \'.(\',\r\toperand prettyPrint,\r\t\')\'.',			#stamp : 'pm 10/5/2018 15:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.625876+02:00' ],		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new:arg Property:prop\r\t^self basicNew initialize:arg Property:prop.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.629741+02:00' ],		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'Exists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Exists,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.631947+02:00' ],		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'Exists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Exists,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Exists quantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Exists quantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.633846+02:00' ],		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing,			#sourceCode : 'isExists\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.635438+02:00' ],		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (Term new:(self var)).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 08:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.637328+02:00' ],		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.640135+02:00' ],		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Exists class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Exist\'.',			#stamp : 'pm 10/4/2018 13:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.644896+02:00' ],		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'ForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ForAll,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.646218+02:00' ],		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'ForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ForAll,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a ForallQuantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a ForallQuantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.648915+02:00' ],		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.651215+02:00' ],		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.652449+02:00' ],		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (Term new:(self var)).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 08:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.65538+02:00' ],		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ForAll class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Forall\'.',			#stamp : 'pm 10/4/2018 23:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.65987+02:00' ],		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #UnaryTerm\r\tinstanceVariableNames: \'term\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #UnaryTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnaryTerm,						#isMetaSide : false					},					#name : #term,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnaryTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'UnaryTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnaryTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.661168+02:00' ],		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractTerm',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractTerm subclass: #UnaryTerm\r\tinstanceVariableNames: \'term\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #UnaryTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnaryTerm,						#isMetaSide : false					},					#name : #term,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnaryTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'UnaryTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnaryTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract factorisation for LinkedTerm & ConstTerm\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Abstract factorisation for LinkedTerm & ConstTerm\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.664082+02:00' ],		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize:aTerm\r\t(aTerm isKindOf: Term)\r\tifFalse:[^Error new: (self class),\'Takes only Terms as parameters. This is a\', (aTerm class). ]\r\tifTrue:[term:=aTerm].',			#stamp : 'pm 10/11/2018 09:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.666135+02:00' ],		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #term,			#protocol : #accessing,			#sourceCode : 'term\r\t^term.',			#stamp : 'pm 10/19/2018 18:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.667799+02:00' ],		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherTerm\r\t^(anotherTerm isKindOf: (self class)) and:[(self term)=(anotherTerm term).].\r\t\r\t\r\t',			#stamp : 'pm 10/21/2018 13:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.669163+02:00' ],		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'contains:',			#protocol : #testing,			#sourceCode : 'contains: aTerm\r\t^term = aTerm.',			#stamp : 'pm 10/18/2018 22:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.670376+02:00' ],		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'replace:by:',			#protocol : #adding,			#sourceCode : 'replace:x by:t\r\t^self error:\'shouldn\'\'t be able to get here\'.\r\t"(term = x term)\r\tifTrue:[term:=t.]"',			#stamp : 'pm 10/20/2018 17:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.675254+02:00' ],		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnaryTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aTerm\r\t^(self basicNew) initialize:aTerm.',			#stamp : 'pm 10/11/2018 09:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.680423+02:00' ],		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.681776+02:00' ],		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',		#newStamp : 'pm 10/9/2018 10:44'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.684408+02:00' ],		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tterm:=Term new:(self class) getNum.\r',			#stamp : 'pm 10/11/2018 08:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.686805+02:00' ],		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\', (term prettyPrint).',			#stamp : 'pm 10/11/2018 12:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.688336+02:00' ],		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing,			#sourceCode : 'isConst\r\t^true.',			#stamp : 'pm 10/15/2018 16:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.691573+02:00' ],		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @21,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.799846+02:00' ],		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialization,			#sourceCode : 'new:Const_Value\r\t^self basicNew initialize:Const_Value.',			#stamp : 'pm 10/7/2018 11:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.801601+02:00' ],		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #factoryNum,			#protocol : #initialization,			#sourceCode : 'factoryNum\r\t^factoryNum.',			#stamp : 'pm 10/7/2018 10:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.803311+02:00' ],		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #getNum,			#protocol : #initialization,			#sourceCode : 'getNum\r\tfactoryNum:=factoryNum+1.\r\t^factoryNum asString',			#stamp : 'pm 10/11/2018 12:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.804953+02:00' ],		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #new,			#protocol : #initialization,			#sourceCode : 'new "const Factory"\r\t^self basicNew initialize.',			#stamp : 'pm 10/11/2018 08:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.807437+02:00' ],		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tfactoryNum:=0.',			#stamp : 'pm 10/7/2018 10:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.809471+02:00' ],		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #nextConst,			#protocol : #initialization,			#sourceCode : 'nextConst\r\t^\'c\',(self getNum).',			#stamp : 'pm 10/7/2018 10:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.815302+02:00' ],		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.816692+02:00' ],		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'UnaryTerm',				#traitCompositionSource : '{}',				#definitionSource : 'UnaryTerm subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',				#stamp : 'pm 10/9/2018 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',		#newStamp : 'pm 10/9/2018 10:42'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.820306+02:00' ],		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^term prettyPrint.',			#stamp : 'pm 10/11/2018 09:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.825111+02:00' ],		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.826334+02:00' ],		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\r\tPrivate:\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:15'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\r\tPrivate:\r\tinitialPair:\t\t<Object>\r\tsetOfPairs:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/23/2018 12:15'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.828361+02:00' ],		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #hasFailed,			#protocol : #accessing,			#sourceCode : 'hasFailed\r\t^hasFailed',			#stamp : 'pm 10/20/2018 08:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.830628+02:00' ],		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'initialize:Predicate2:',			#protocol : #initialization,			#sourceCode : 'initialize: p1 Predicate2: p2\r\t"initialized with two predicates, that we\'ll try to unify."\r\r\t"init two different pair to be sure that we have the initial\r\tone to unify at the end."\r\tinitialPair:=(Pair left: (p1 veryDeepCopy) right: (p2 veryDeepCopy)).\r\tsetOfPairs:=MinimalOrderedSet new.\r\tsetOfPairs add:(Pair left: p1 right: p2).\r\thasFailed:=false.\r',			#stamp : 'pm 10/21/2018 08:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.831986+02:00' ],		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Value2:',			#protocol : #add/remove,			#sourceCode : 'add: value1 Value2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 19:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.833309+02:00' ],		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'addUnifier:',			#protocol : #add/remove,			#sourceCode : 'addUnifier: anotherUnifier\r\tsetOfPairs merge: (anotherUnifier setOfPairs ).\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.835713+02:00' ],		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:',			#protocol : #add/remove,			#sourceCode : 'add: aPair\r\tsetOfPairs add: aPair.\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.8371+02:00' ],		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'setOfPairs:',			#protocol : #accessors,			#sourceCode : 'setOfPairs: anotherSet\r\tsetOfPairs:=anotherSet.\r\t^self.',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.83831+02:00' ],		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #setOfPairs,			#protocol : #accessors,			#sourceCode : 'setOfPairs\r\t^setOfPairs',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.843965+02:00' ],		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\t"Transcript cr;cr;show:\'pouet\';cr;cr."\r\r\tnotPossible:=false.\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[self delete:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t(Prop debugUnification)\r\t\t\tifTrue:[Transcript show:\'conflict\';cr.].\r\t\t\t\tnotPossible:=true.\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((left isConst) and:[right isKindOf: LinkedTerm.])\r\t\t\tifTrue:[ "swap"\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t ]\r\t\t\tifFalse:[  \r\t\t\t\t((left isKindOf: LinkedTerm) and:[right isConst])"eliminate if x=t or x=f(t) [...]"\r\t\t\t\tifTrue:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["check, not implemented for now"\r\t\t\t\t\t((left isKindOf:LinkedTerm) and:[right isKindOf: FuncTerm])\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\t"notPossible:=self check:aPair"\r\t\t\t\t\t\t].\r\t\t\t\t\t].\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t\r\t\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 10/21/2018 09:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.84574+02:00' ],		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'swap:',			#protocol : #unification,			#sourceCode : 'swap: aPair\r\t|left right|\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'swap\';cr.].\r\t\r\tleft:=aPair left.\r\tright:=aPair right.\r\tsetOfPairs remove:aPair.\r\tself add: (Pair left: right right: left).\r\t',			#stamp : 'pm 10/18/2018 18:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.848945+02:00' ],		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'eliminate:',			#protocol : #unification,			#sourceCode : 'eliminate: aPair\r\t|left right previousSet newSet |\r\t\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'eliminate with \';show: aPair;cr.].\r\t\r\tleft:=aPair left.\r\tright:=aPair right.\r\tnewSet:=MinimalOrderedSet new.\r\t\r\tpreviousSet:=setOfPairs veryDeepCopy."we need to work on a copy, to avoid having another iteration"\r\tpreviousSet remove:aPair.\r\t\r\tpreviousSet do:[:each |\r\t\t"tempVar:=each veryDeepCopy.""since we modify the underlying data, we work on a copy"\r\t\tnewSet add: (self replacementPair:each replaced:left by:right).\r\t\t].\r\t(previousSet = newSet)\r\tifTrue:[\r\t\t^false "Nothing changed"\r\t\t]\r\tifFalse:[\r\t\tnewSet add:aPair."add back the argument. Corresponds to the union of G and the pair we do the elimination with"\r\t\tsetOfPairs:=newSet."replace with new set"\r\t\t^true. "modifications were mades"\r\t\t].\r\t\r ',			#stamp : 'pm 10/20/2018 17:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.850648+02:00' ],		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'replacementPair:replaced:by:',			#protocol : #unification,			#sourceCode : 'replacementPair:aPair replaced:x by:t\r\t^Pair left:(self replacement: (aPair left) replaced:x by:t)\r\t\t  right:(self replacement: (aPair right) replaced:x by:t).\r',			#stamp : 'pm 10/21/2018 09:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.852283+02:00' ],		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'delete:',			#protocol : #unification,			#sourceCode : 'delete:aPair\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'delete\';cr.].\r\tsetOfPairs remove:aPair.',			#stamp : 'pm 10/18/2018 18:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.854816+02:00' ],		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyMe,			#protocol : #unification,			#sourceCode : 'unifyMe\r\t| modified operationAnswer i |\r\tmodified := true.\r\t[ modified ]\r\twhileTrue:[\r\t\tmodified := false.\r\t\ti := 1.\r\t\t[(modified not) and:[(i <= (setOfPairs size))]]\r\t\twhileTrue: [ \r\t\t\tProp debugUnification\r\t\t\tifTrue: [ Transcript show: self;cr ].\r\t\t\toperationAnswer := self tryOperations: (setOfPairs at: i).\r\t\t\toperationAnswer right\r\t\t\tifTrue: [ "On a conflict or a fail check"\r\t\t\t\tTranscript show: \'Unification impossible\'; cr.\t"TEMPORARY"\r\t\t\t\tsetOfPairs := nil.\r\t\t\t\t^nil "return value doesn\'t matter, we just want to break out" \r\t\t\t\t].\t"NotPossible to unify?"\r\t\t\t"else we go on till we didn\'t do anything more"\r\t\t\tmodified := modified or: [ operationAnswer left ].\t"isModified was put arbitrily in left"\r\t\t\ti:=i + 1 .\r\t\t\t].\t\r\t\t]. ',			#stamp : 'pm 10/21/2018 13:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.857779+02:00' ],		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'check:',			#protocol : #unification,			#sourceCode : 'check: aPair\r\t"Not active yet"\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'check\';cr.].\r\t\r\t^((aPair right) contains: aPair left).',			#stamp : 'pm 10/19/2018 17:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.860232+02:00' ],		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #unifyThis,			#protocol : #unification,			#sourceCode : 'unifyThis\r\tself unifyMe."Now setOfPairs contains my unifier"\r\tTranscript show:self;cr.\r\t(hasFailed)\r\tifTrue:[\r\t\t^nil."Failed to unify thing"\r\t\t].\r\t(setOfPairs isNil)\r\tifFalse:[\r\t\tsetOfPairs do:[ :each | \r\t\t\t((((each left) isConst) not) and:[(each right) isConst])\r\t\t\t\tifTrue:["They both should be predicates, so they can use replace: by:"\r\t\t\t\t\t(initialPair left) replace: (each left) by: (each right).\r\t\t\t\t\t(initialPair right) replace: (each left) by: (each right).\r\t\t\t\t\t].\r\t\t\t\t].\r\t\t\t].\r\t"else it was already the same  predicate"\r\t^initialPair',			#stamp : 'pm 10/22/2018 10:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.862588+02:00' ],		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #unification,			#sourceCode : 'decompose: aPair\r\t|left right i|\r\t(Prop debugUnification)\r\tifTrue:[Transcript show:\'decompose\';cr.].\r\t\r\tleft:=aPair left.\r\tright:=aPair right.\r\ti:=1.\r\tsetOfPairs remove: aPair.\r\t[i<=(left arity)]"arity is the same, as we tested in the caller."\r\twhileTrue:[\r\t\tself add: (Pair left: (left at: i) right: (right at: i)).\r\t\ti:=i+1.\r\t\t].\t',			#stamp : 'pm 10/18/2018 18:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.865369+02:00' ],		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'replacement:replaced:by:',			#protocol : #unification,			#sourceCode : 'replacement:aTerm replaced:x by:t\r\t((aTerm isKindOf: FuncTerm)or:[aTerm isKindOf: Predicate])\r\tifTrue:[\r\t\t^aTerm replace:x by:t.\r\t\t]"if it\'s something else than a functerm, "\r\tifFalse:[\r\t\t(aTerm=x)\r\t\tifTrue:[^t]\r\t\tifFalse:[^aTerm].\r\t\t].\r ',			#stamp : 'pm 10/21/2018 09:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.867601+02:00' ],		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: (self prettyPrint).',			#stamp : 'pm 10/20/2018 08:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.869849+02:00' ],		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t| t |\r\tt:=\'{\'.\r\t(setOfPairs isNil)\r\tifFalse:[\r\t\tsetOfPairs do: [:each| t:=t,each prettyPrintUnifier.] separatedBy: [ t:=t,\',\'.].\r\t\t].\r\tt:=t,\'}\'.\r\t^t',			#stamp : 'pm 10/20/2018 08:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.873159+02:00' ],		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unifier class',				#isMetaSide : true			},			#name : #'new:Predicate2:',			#protocol : #'instance creation',			#sourceCode : 'new: p1 Predicate2: p2\r\t^(self basicNew) initialize: p1 Predicate2:p2.',			#stamp : 'pm 10/15/2018 16:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.87932+02:00' ],		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.881805+02:00' ],		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',				#stamp : 'pm 10/9/2018 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',		#newStamp : 'pm 10/9/2018 11:23'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.884403+02:00' ],		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 9/28/2018 22:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.885789+02:00' ],		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing,			#sourceCode : 'isVar \r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.887482+02:00' ],		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #comparison,			#sourceCode : 'isSameVar: other\r\t^self getSymb = other getSymb.',			#stamp : 'pm 9/29/2018 09:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.889195+02:00' ],		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"see Prop comment for usage."\r\t^true',			#stamp : 'pm 9/30/2018 09:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.89083+02:00' ],		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize: varName\r\tsymb:=varName.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.892297+02:00' ],		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self getSymb).',			#stamp : 'pm 10/3/2018 13:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.895223+02:00' ],		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Var class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialize,			#sourceCode : 'new: varName\r\t^self basicNew initialize: varName.',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.900891+02:00' ],		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.902234+02:00' ],		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative variable, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative variable, only in ClausalForm',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.904624+02:00' ],		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(Not symb),(self getSymb).',			#stamp : 'pm 10/3/2018 15:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:37:59.905799+02:00' ],		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing,			#sourceCode : 'isNotVar \r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:38:08.982544+02:00' ],		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @21,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:38:09.093516+02:00' ],		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedListFix',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedListFix subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @21,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T20:51:21.489767+02:00' ],		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #'as yet unclassified',			#sourceCode : 'ResolutionMethod\r',			#stamp : 'pm 10/23/2018 20:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:05:09.179975+02:00' ],		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #'as yet unclassified',			#sourceCode : 'ResolutionMethod\r',			#stamp : 'pm 10/23/2018 20:51',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #'as yet unclassified',			#sourceCode : 'ResolutionMethod\r\t| sat |\r\tsat:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/23/2018 21:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:07:03.486478+02:00' ],		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a clausal form, which means i\'m a long \'and\' statement with \'or\' as my propositions.\r\rI know my clauses (which are represented by the class Clause)\rMy responsability is to use the resolution method on myself\r\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tclauses:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/23/2018 12:16'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #resolution	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:07:08.931055+02:00' ],		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #'as yet unclassified',			#sourceCode : 'ResolutionMethod\r\t| sat |\r\tsat:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/23/2018 21:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat |\r\tsat:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/23/2018 21:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:12:30.523878+02:00' ],		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #isEmpty,			#protocol : #'as yet unclassified',			#sourceCode : 'isEmpty\r\t^clauses empty',			#stamp : 'pm 10/23/2018 21:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:12:30.603464+02:00' ],		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #isEmpty,			#protocol : #'as yet unclassified',			#sourceCode : 'isEmpty\r\t^clauses empty',			#stamp : 'pm 10/23/2018 21:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #isEmpty,			#protocol : #testing,			#sourceCode : 'isEmpty\r\t^clauses empty',			#stamp : 'pm 10/23/2018 21:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:27:39.216951+02:00' ],		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat |\r\tsat:=MinimalOrderedSet new.\r\t',			#stamp : 'pm 10/23/2018 21:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\t\r\t\t\t\t\r\t\t].\r\t^false.',			#stamp : 'pm 10/23/2018 21:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:28:08.823268+02:00' ],		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #'as yet unclassified',			#sourceCode : 'isEmptyClause\r\t^atomes size',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:28:08.911494+02:00' ],		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #'as yet unclassified',			#sourceCode : 'isEmptyClause\r\t^atomes size',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #testing,			#sourceCode : 'isEmptyClause\r\t^atomes size',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:28:14.790031+02:00' ],		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #testing,			#sourceCode : 'isEmptyClause\r\t^atomes size',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #testing,			#sourceCode : 'isEmptyClause\r\t^atomes empty',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:28:15.893979+02:00' ],		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #testing,			#sourceCode : 'isEmptyClause\r\t^atomes empty',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isEmptyClause,			#protocol : #testing,			#sourceCode : 'isEmptyClause\r\t^atomes empty.',			#stamp : 'pm 10/23/2018 21:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:35:25.361927+02:00' ],		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\t\r\t\t\t\t\r\t\t].\r\t^false.',			#stamp : 'pm 10/23/2018 21:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r\t\tc isTautology"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:35:44.452822+02:00' ],		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #'as yet unclassified',			#sourceCode : 'isTautology\r\t^self error:\'todo\'.',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:35:44.543432+02:00' ],		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #'as yet unclassified',			#sourceCode : 'isTautology\r\t^self error:\'todo\'.',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #testing,			#sourceCode : 'isTautology\r\t^self error:\'todo\'.',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:35:53.986524+02:00' ],		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r\t\tc isTautology"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:36:01.361243+02:00' ],		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #ResolutionMethod,			#protocol : #resolution,			#sourceCode : 'ResolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r\t\tc isTautology"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:36:54.542502+02:00' ],		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r\t\tc isTautology"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   c isTautology or:[sat contains:c.]"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:37:00.551971+02:00' ],		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   c isTautology or:[sat contains:c.]"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:36',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   (c isTautology) or:[sat contains:c.]"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T21:39:38.357427+02:00' ],		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   (c isTautology) or:[sat contains:c.]"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T22:03:00.393896+02:00' ],		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\tifFalse:[\r\t\t\t\r\t\t\t].\t\t\t\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 21:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\t"Résolvants stuff goes there"\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 22:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T22:05:23.869095+02:00' ],		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: Predicate."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/18/2018 16:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/23/2018 22:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-23T22:07:03.957007+02:00' ],		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t^(anotherPredicate isKindOf: NotPredicate) or:[super=anotherPredicate]."check class, and polarity"',			#stamp : 'pm 10/15/2018 15:46',			#package : #_resolution_1erOrdre		}	}}