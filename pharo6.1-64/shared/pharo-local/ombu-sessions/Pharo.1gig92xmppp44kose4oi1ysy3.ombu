OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:01:52.773219+01:00' ],		#prior : OmReference [ 'Pharo.cs0snpc5k3lq405mlj97lmz5b', '36' ],		#self : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract unary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a unary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',				#stamp : 'pm 11/26/2018 20:01'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',		#newComment : 'I represent a Abstract unary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a unary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',		#oldStamp : 'pm 10/9/2018 10:56',		#newStamp : 'pm 11/26/2018 20:01'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:06:37.809596+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/5/2018 09:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:06:42.069419+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:06:47.925149+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/5/2018 09:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:06:53.116025+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 10/11/2018 16:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:04.445869+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:14.21568+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:30.359489+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:33.303384+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:40.206944+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 10/27/2018 17:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:07:44.103719+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 10/27/2018 17:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:08:04.902098+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:08:19.082241+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:08:26.023952+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:08:28.464483+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:10:07.692638+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:10:10.745925+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^self.',			#stamp : 'pm 10/7/2018 19:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:10:19.760136+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^SubclassResponsibility.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T20:10:26.033478+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^SubclassResponsibility.',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^SubclassResponsibility.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:01:30.531083+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:01:43.144859+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing,			#sourceCode : 'isExists\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing,			#sourceCode : 'isExists\t\r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:02:08.366175+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=prop2\r\t^self getSymb = prop2 getSymb and:[self var=prop2 var and:[self operand=prop2 operand]].',			#stamp : 'pm 11/5/2018 08:58',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=prop2\r\t"comparaison operator"\r\t^self getSymb = prop2 getSymb and:[self var=prop2 var and:[self operand=prop2 operand]].',			#stamp : 'pm 11/26/2018 21:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:04:21.396039+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [ ]	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2018-11-26T21:04:21.418147+01:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: arg Property: prop\r\tsuper initialize: prop.\r\tvar:=arg.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: arg Property: prop\r\tself initialize: prop.\r\tvar:=arg.',			#stamp : 'pm 11/26/2018 21:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:18:53.066429+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: arg Property: prop\r\tself initialize: prop.\r\tvar:=arg.',			#stamp : 'pm 11/26/2018 21:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'initialize:Property:',			#protocol : #initialization,			#sourceCode : 'initialize: aName Property: prop\r\t"Standart initialization for Quantifier objects"\r\t"aName should be a char or a string"\r\t"aProp should be subclass of the abstract class Prop"\r\tself initialize: prop.\r\tvar:=aName.',			#stamp : 'pm 11/26/2018 21:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:19:42.102002+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing,			#sourceCode : 'isQuantifier \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing,			#sourceCode : 'isQuantifier \r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:21:04.268867+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t^self class = prop2 class and:[self var=prop2 var and:[(self operand) isSameForTesting: (prop2 operand)]].',			#stamp : 'pm 11/5/2018 09:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"Comparaison operator for automated testing"\r\t^self class = prop2 class and:[self var=prop2 var and:[(self operand) isSameForTesting: (prop2 operand)]].',			#stamp : 'pm 11/26/2018 21:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:22:54.288294+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"Comparaison operator for automated testing"\r\t^self class = prop2 class and:[self var=prop2 var and:[(self operand) isSameForTesting: (prop2 operand)]].',			#stamp : 'pm 11/26/2018 21:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:anotherProp\r\t"Comparaison operator for automated testing"\r\t^self class = anotherProp class and:[self var=anotherProp var and:[(self operand) isSameForTesting: (anotherProp operand)]].',			#stamp : 'pm 11/26/2018 21:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:23:53.699884+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self class symb),\' \', (self var), \'.(\',\r\toperand prettyPrint,\r\t\')\'.',			#stamp : 'pm 10/5/2018 15:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^(self class symb),\' \', (self var), \'.(\',\r\toperand prettyPrint,\r\t\')\'.',			#stamp : 'pm 11/26/2018 21:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:04.732189+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']),\r\t\toperand prettyPrint,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 11/5/2018 18:55',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^self getSymb,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']),\r\t\toperand prettyPrint,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:10.348512+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tleft prettyPrint,\r\t\t((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']) ,\r\r\t\tself getSymb,\r\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tright prettyPrint,\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).\r',			#stamp : 'pm 9/30/2018 12:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tleft prettyPrint,\r\t\t((left isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']) ,\r\r\t\tself getSymb,\r\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']) ,\r\t\tright prettyPrint,\r\t\t((right isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).\r',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:18.367453+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(Not symb),(self getSymb).',			#stamp : 'pm 10/3/2018 15:23',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^(Not symb),(self getSymb).',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:26.693674+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^(self getSymb).',			#stamp : 'pm 10/3/2018 13:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\t\r\t"toString"\r\t^(self getSymb).',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:35.420002+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/24/2018 07:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:42.954836+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^(Not symb),(super prettyPrint)',			#stamp : 'pm 10/9/2018 17:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t"toString"\r\t^(Not symb),(super prettyPrint)',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:54.963692+01:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^self getSymb',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\t"toString"\r\t^self getSymb',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:24:57.437447+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\t"toString"\r\t^self getSymb',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\t\r\t"toString"\r\t^self getSymb',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:25:11.966923+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 10/9/2018 11:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 11/26/2018 21:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:25:34.027195+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ForAll class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Forall\'.',			#stamp : 'pm 10/4/2018 23:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ForAll class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Choosing forall symbol"\r\tsymb:=\'Forall\'.',			#stamp : 'pm 11/26/2018 21:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:26:03.64705+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Exists class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsymb:=\'Exist\'.',			#stamp : 'pm 10/4/2018 13:36',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Exists class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Choosing a symbol for this class"\r\tsymb:=\'Exist\'.',			#stamp : 'pm 11/26/2018 21:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:27:17.596943+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new:arg Property:prop\r\t^self basicNew initialize:arg Property:prop.',			#stamp : 'pm 10/4/2018 23:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new: aName Property:aProp\r\t^self basicNew initialize: aName Property:aProp.',			#stamp : 'pm 11/26/2018 21:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:27:33.581818+01:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #var,			#protocol : #accessing,			#sourceCode : 'var\r\t^var.',			#stamp : 'pm 10/4/2018 13:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #var,			#protocol : #accessing,			#sourceCode : 'var\r\t"accessor"\r\t^var.',			#stamp : 'pm 11/26/2018 21:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:28:02.35102+01:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new: aName Property:aProp\r\t^self basicNew initialize: aName Property:aProp.',			#stamp : 'pm 11/26/2018 21:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Quantifier class',				#isMetaSide : true			},			#name : #'new:Property:',			#protocol : #initialization,			#sourceCode : 'new: aName Property:aProp\r\t"Standart creation for Quantifier objects"\r\t"aName should be a char or a string"\r\t"aProp should be subclass of the abstract class Prop"\r\t^self basicNew initialize: aName Property:aProp.',			#stamp : 'pm 11/26/2018 21:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-26T21:31:48.099292+01:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar Property: aProp\r\rex:\rForall x P(x)\rForall new: \'x\'  Property: Predicate new:  (...)\r\rI don\'t support variadic Forall ( Forall x,y (...))',				#stamp : 'pm 11/26/2018 21:31'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',		#newComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar Property: aProp\r\rex:\rForall x P(x)\rForall new: \'x\'  Property: Predicate new:  (...)\r\rI don\'t support variadic Forall ( Forall x,y (...))',		#oldStamp : 'pm 10/9/2018 11:28',		#newStamp : 'pm 11/26/2018 21:31'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:04:56.580311+01:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t"very unsure here"\r\t^false',			#stamp : 'pm 10/5/2018 17:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^self error:\'Quantifiers shouldn\'\'t be there anymore in a clause. Did you skolemnise first?\'.',			#stamp : 'pm 11/27/2018 07:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:08:44.097298+01:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^self error:\'Quantifiers shouldn\'\'t be there anymore in a clause. Did you skolemnise first?\'.',			#stamp : 'pm 11/27/2018 07:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t"tester. The skolemnisation process flush quantifiers out, so the program flow shouldn\'t get here."\r\t^self error:\'Quantifiers shouldn\'\'t be there anymore in a clause. Did you skolemnise first?\'.',			#stamp : 'pm 11/27/2018 07:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:09:37.227499+01:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:anotherProp\r\t"Comparaison operator for automated testing"\r\t^self class = anotherProp class and:[self var=anotherProp var and:[(self operand) isSameForTesting: (anotherProp operand)]].',			#stamp : 'pm 11/26/2018 21:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:anotherProp\r\t"Comparaison operator for automated testing"\r\t^self class = anotherProp class \r\t\tand:[self var=anotherProp var \r\t\t\tand:[(self operand) isSameForTesting: (anotherProp operand)]\r\t\t\t]\r\t\t.',			#stamp : 'pm 11/27/2018 07:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:38:59.120212+01:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing,			#sourceCode : 'isNot\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing,			#sourceCode : 'isNot\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:39:17.558335+01:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 9/30/2018 20:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but (! (a \\/ b)) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 11/27/2018 07:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:40:08.040848+01:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but (! (a \\/ b)) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 11/27/2018 07:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but (! (a \\/ b)) isn\'t"\r\t" (! (! a)) has to be flush during the clausification process too."\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 11/27/2018 07:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:40:15.992834+01:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but (! (a \\/ b)) isn\'t"\r\t" (! (! a)) has to be flush during the clausification process too."\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 11/27/2018 07:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t"tester"\r\t" (! a) is a clause, but (! (a \\/ b)) isn\'t"\r\t" (! (! a)) has to be flush during the clausification process too."\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 11/27/2018 07:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:41:36.17894+01:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\t self operand:(operand clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ].',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"documentation in Prop::clausification"\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\t self operand:(operand clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ].',			#stamp : 'pm 11/27/2018 07:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:11.237044+01:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator\r\rMy creation is available in the Unary class',				#stamp : 'pm 11/27/2018 07:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Not  operator',		#newComment : 'I represent a Not  operator\r\rMy creation is available in the Unary class',		#oldStamp : '<historical>',		#newStamp : 'pm 11/27/2018 07:42'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:23.774964+01:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #accessing,			#sourceCode : 'patternAnd\r\t^patternAnd.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #accessing,			#sourceCode : 'patternAnd\r\t"accessor"\r\t^patternAnd.',			#stamp : 'pm 11/27/2018 07:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:31.319138+01:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t"accessor"\r\t^patternFalse.',			#stamp : 'pm 11/27/2018 07:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:44.605199+01:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternNot,			#protocol : #accessing,			#sourceCode : 'patternNot\r\t^patternNot.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternNot,			#protocol : #accessing,			#sourceCode : 'patternNot\r\t"accessor"\r\t^patternNot.',			#stamp : 'pm 11/27/2018 07:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:47.792708+01:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr.',			#stamp : 'pm 9/30/2018 14:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t"accessor"\r\t^patternOr.',			#stamp : 'pm 11/27/2018 07:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:42:51.625598+01:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue.',			#stamp : 'pm 9/30/2018 14:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t"accessor"\r\t^patternTrue.',			#stamp : 'pm 11/27/2018 07:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:07.005998+01:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #operand,			#protocol : #accessing,			#sourceCode : 'operand\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #operand,			#protocol : #accessing,			#sourceCode : 'operand\r\t"accessor"\r\t^operand',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:10.304898+01:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'operand:',			#protocol : #accessing,			#sourceCode : 'operand: replacement\r\toperand:=replacement.\r\t^operand',			#stamp : 'pm 9/30/2018 08:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'operand:',			#protocol : #accessing,			#sourceCode : 'operand: replacement\r\t"accessor"\r\toperand:=replacement.\r\t^operand',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:23.221199+01:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 10/1/2018 11:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"accessor"\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:25.92727+01:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"accessor"\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t| t |\r\tt:=nil.\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\t(t isNil) ifTrue:[(Prop debug) ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\t\t\t\t\t\tself left:(left clausification).\r\t\t\t\t\t\t\t\tself right:(right clausification).\r\t\t\t\t\t\t\t\t^self]\r\t\t\t\t\t ifFalse:[(Prop debug) ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t\t\t^t "clausification" ]',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:33.930828+01:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t"tester"\r\t^(left isClause & right isClause)',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:36.738166+01:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t"accessor"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:42.156568+01:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t"accessor"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:48.669401+01:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing,			#sourceCode : 'isImply\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing,			#sourceCode : 'isImply\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:43:59.88869+01:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: replacement\r\tright:=replacement.\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: replacement\r\t"accessor"\r\tright:=replacement.\r\t^right',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:44:02.060155+01:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^right',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t"accessor"\r\t^right',			#stamp : 'pm 11/27/2018 07:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:44:07.076552+01:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: replacement\r\tleft:=replacement.\r\t^left',			#stamp : 'pm 9/30/2018 08:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: replacement\r\t"accessor"\r\tleft:=replacement.\r\t^left',			#stamp : 'pm 11/27/2018 07:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:44:16.454264+01:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^left',			#stamp : 'pm 9/30/2018 08:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t"accessor"\r\t^left',			#stamp : 'pm 11/27/2018 07:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:44:34.026552+01:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing,			#sourceCode : 'isNotVar \r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing,			#sourceCode : 'isNotVar \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:44',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:45:09.930774+01:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb',			#stamp : 'pm 9/28/2018 22:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"accessor"\r\t^symb',			#stamp : 'pm 11/27/2018 07:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:45:25.035038+01:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t^terms.',			#stamp : 'pm 10/7/2018 17:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #terms,			#protocol : #accessing,			#sourceCode : 'terms\r\t"accessor"\r\t^terms.',			#stamp : 'pm 11/27/2018 07:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:46:01.255264+01:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: index \r\t^ (self terms) at:index.',			#stamp : 'pm 10/18/2018 09:23',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: index \r\t"accessor for underlying attribute"\r\t^ (self terms) at:index.',			#stamp : 'pm 11/27/2018 07:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:46:16.1676+01:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^symb.',			#stamp : 'pm 10/5/2018 15:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"accessor"\r\t^symb.',			#stamp : 'pm 11/27/2018 07:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:46:26.700395+01:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessors,			#sourceCode : 'getSymb\r\t^(self class symb)',			#stamp : 'pm 9/28/2018 22:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessors,			#sourceCode : 'getSymb\r\t"accessor"\r\t^(self class symb)',			#stamp : 'pm 11/27/2018 07:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:48:16.126219+01:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing,			#sourceCode : 'isUnaryOperator \r\t^true',			#stamp : 'pm 10/23/2018 07:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing,			#sourceCode : 'isUnaryOperator \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:48:28.565116+01:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing,			#sourceCode : 'isEqual\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing,			#sourceCode : 'isEqual\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:48:33.47258+01:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing,			#sourceCode : 'isAnd\r\t^true\r',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing,			#sourceCode : 'isAnd\r\t"tester"\r\t^true\r',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:00.126393+01:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing,			#sourceCode : 'isBinaryOperator  \r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing,			#sourceCode : 'isBinaryOperator  \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:11.631689+01:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing,			#sourceCode : 'isOperator\r\t^true',			#stamp : 'pm 10/23/2018 07:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing,			#sourceCode : 'isOperator\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:18.668792+01:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing,			#sourceCode : 'isVar \r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing,			#sourceCode : 'isVar \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:29.270154+01:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing,			#sourceCode : 'isNegativePredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing,			#sourceCode : 'isNegativePredicate\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:31.824948+01:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing,			#sourceCode : 'isNotPredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing,			#sourceCode : 'isNotPredicate\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:49:34.915245+01:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t"tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:50:38.293088+01:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing,			#sourceCode : 'isPredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing,			#sourceCode : 'isPredicate\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:50:50.955316+01:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:50:54.102353+01:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #True_Const,				#isMetaSide : false			},			#name : #isTrueConst,			#protocol : #testing,			#sourceCode : 'isTrueConst\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #True_Const,				#isMetaSide : false			},			#name : #isTrueConst,			#protocol : #testing,			#sourceCode : 'isTrueConst\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:50:58.15236+01:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #False_Const,				#isMetaSide : false			},			#name : #isFalseConst,			#protocol : #testing,			#sourceCode : 'isFalseConst\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #False_Const,				#isMetaSide : false			},			#name : #isFalseConst,			#protocol : #testing,			#sourceCode : 'isFalseConst\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:01.516302+01:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing,			#sourceCode : 'isConstant\r\t^true',			#stamp : 'pm 10/23/2018 07:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing,			#sourceCode : 'isConstant\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:05.805819+01:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing,			#sourceCode : 'isAtome\r\t^true',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing,			#sourceCode : 'isAtome\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:12.381401+01:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing-properties,			#sourceCode : 'isAnd\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing-properties,			#sourceCode : 'isAnd\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:16.860307+01:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing-properties,			#sourceCode : 'isAtome\r\t^false.',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isAtome,			#protocol : #testing-properties,			#sourceCode : 'isAtome\r\t"Class tester"\r\t^false.',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:19.708399+01:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isBinaryOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isBinaryOperator\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:22.121989+01:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing-properties,			#sourceCode : 'isConst\r\t^false.',			#stamp : 'pm 10/23/2018 07:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConst,			#protocol : #testing-properties,			#sourceCode : 'isConst\r\t"Class tester"\r\t^false.',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:24.66983+01:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing-properties,			#sourceCode : 'isConstant\r\t^false.',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isConstant,			#protocol : #testing-properties,			#sourceCode : 'isConstant\r\t"Class tester"\r\t^false.',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:28.368282+01:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing-properties,			#sourceCode : 'isEqual\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing-properties,			#sourceCode : 'isEqual\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:31.654421+01:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing-properties,			#sourceCode : 'isExists\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing-properties,			#sourceCode : 'isExists\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:34.557476+01:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isFalse_Const,			#protocol : #testing-properties,			#sourceCode : 'isFalse_Const\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isFalse_Const,			#protocol : #testing-properties,			#sourceCode : 'isFalse_Const\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:36.967798+01:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing-properties,			#sourceCode : 'isForAll\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing-properties,			#sourceCode : 'isForAll\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:39.232117+01:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing-properties,			#sourceCode : 'isImply\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing-properties,			#sourceCode : 'isImply\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:41.999777+01:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing-properties,			#sourceCode : 'isNegativePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing-properties,			#sourceCode : 'isNegativePredicate\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:44.590788+01:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing-properties,			#sourceCode : 'isNot\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing-properties,			#sourceCode : 'isNot\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:47.109965+01:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing-properties,			#sourceCode : 'isNotPredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing-properties,			#sourceCode : 'isNotPredicate\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:50.132466+01:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing-properties,			#sourceCode : 'isNotVar\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing-properties,			#sourceCode : 'isNotVar\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:52.163723+01:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing-properties,			#sourceCode : 'isOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing-properties,			#sourceCode : 'isOperator\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:54.233392+01:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing-properties,			#sourceCode : 'isOr\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing-properties,			#sourceCode : 'isOr\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:56.315299+01:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing-properties,			#sourceCode : 'isPositivePredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing-properties,			#sourceCode : 'isPositivePredicate\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:51:59.609458+01:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing-properties,			#sourceCode : 'isPredicate\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isPredicate,			#protocol : #testing-properties,			#sourceCode : 'isPredicate\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:52:01.488241+01:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isProp,			#protocol : #testing-properties,			#sourceCode : 'isProp\r\t^true.',			#stamp : 'pm 10/23/2018 07:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isProp,			#protocol : #testing-properties,			#sourceCode : 'isProp\r\t"Class tester"\r\t^true.',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:52:03.550693+01:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing-properties,			#sourceCode : 'isQuantifier\r\t^false',			#stamp : 'pm 10/23/2018 07:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing-properties,			#sourceCode : 'isQuantifier\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:52:06.376374+01:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isTrue_Const,			#protocol : #testing-properties,			#sourceCode : 'isTrue_Const\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isTrue_Const,			#protocol : #testing-properties,			#sourceCode : 'isTrue_Const\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:52:08.563363+01:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isUnaryOperator\r\t^false',			#stamp : 'pm 10/23/2018 07:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing-properties,			#sourceCode : 'isUnaryOperator\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:52:10.432396+01:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing-properties,			#sourceCode : 'isVar\r\t^false',			#stamp : 'pm 10/23/2018 07:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing-properties,			#sourceCode : 'isVar\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:53:27.531593+01:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t^SubclassResponsibility. ',			#stamp : 'pm 9/28/2018 22:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol."\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:53:33.762189+01:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol."\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:53:35.620824+01:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphicaly"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:53:37.430653+01:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphicaly"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:25.908216+01:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:01',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t"Class tester"\r\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:26.893347+01:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t"Class tester"\r\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #isForAll,			#protocol : #testing,			#sourceCode : 'isForAll \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:34.003692+01:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing,			#sourceCode : 'isExists\t\r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:01',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #isExists,			#protocol : #testing,			#sourceCode : 'isExists\t\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:42.046839+01:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing,			#sourceCode : 'isQuantifier \r\t"tester"\r\t^true',			#stamp : 'pm 11/26/2018 21:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Quantifier,				#isMetaSide : false			},			#name : #isQuantifier,			#protocol : #testing,			#sourceCode : 'isQuantifier \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:47.918121+01:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing,			#sourceCode : 'isNot\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:38',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isNot,			#protocol : #testing,			#sourceCode : 'isNot\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:54.248174+01:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing,			#sourceCode : 'isUnaryOperator \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #isUnaryOperator,			#protocol : #testing,			#sourceCode : 'isUnaryOperator \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T07:59:59.918532+01:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isOr,			#protocol : #testing,			#sourceCode : 'isOr\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:06.015281+01:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing,			#sourceCode : 'isImply\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #isImply,			#protocol : #testing,			#sourceCode : 'isImply\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:10.851717+01:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing,			#sourceCode : 'isEqual\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #isEqual,			#protocol : #testing,			#sourceCode : 'isEqual\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:17.520118+01:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing,			#sourceCode : 'isAnd\r\t"tester"\r\t^true\r',			#stamp : 'pm 11/27/2018 07:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isAnd,			#protocol : #testing,			#sourceCode : 'isAnd\r\t"Class tester"\r\t^true\r',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:24.19325+01:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing,			#sourceCode : 'isBinaryOperator  \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isBinaryOperator,			#protocol : #testing,			#sourceCode : 'isBinaryOperator  \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:29.187805+01:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing,			#sourceCode : 'isOperator\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Operator,				#isMetaSide : false			},			#name : #isOperator,			#protocol : #testing,			#sourceCode : 'isOperator\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:36.834635+01:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing,			#sourceCode : 'isNotVar \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:44',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotVar,				#isMetaSide : false			},			#name : #isNotVar,			#protocol : #testing,			#sourceCode : 'isNotVar \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:42.725022+01:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing,			#sourceCode : 'isVar \r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #isVar,			#protocol : #testing,			#sourceCode : 'isVar \r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:00:51.69816+01:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing,			#sourceCode : 'isNotPredicate\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNotPredicate,			#protocol : #testing,			#sourceCode : 'isNotPredicate\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:01:24.893798+01:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^true.',			#stamp : 'pm 10/5/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:01:37.094537+01:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t"tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isPositivePredicate,			#protocol : #testing,			#sourceCode : 'isPositivePredicate\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 08:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:01:41.328782+01:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing,			#sourceCode : 'isNegativePredicate\r\t"tester"\r\t^true',			#stamp : 'pm 11/27/2018 07:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NotPredicate,				#isMetaSide : false			},			#name : #isNegativePredicate,			#protocol : #testing,			#sourceCode : 'isNegativePredicate\r\t"Class tester"\r\t^true',			#stamp : 'pm 11/27/2018 08:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T08:53:20.315842+01:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"',			#stamp : 'pm 10/6/2018 18:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap\r\t\r\t\r\t"',			#stamp : 'pm 11/27/2018 08:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:06:46.421502+01:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap\r\t\r\t\r\t"',			#stamp : 'pm 11/27/2018 08:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory.\r\t"',			#stamp : 'pm 11/27/2018 10:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:25:29.316678+01:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory.\r\t"',			#stamp : 'pm 11/27/2018 10:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t"',			#stamp : 'pm 11/27/2018 10:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:25:43.06521+01:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t"',			#stamp : 'pm 11/27/2018 10:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 10:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:29:30.786578+01:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var ( :) )\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 10:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var (incredible, i know)\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 10:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:39:47.074218+01:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:41:34.438416+01:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:42:29.352648+01:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp  ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:42:31.281852+01:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp  ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:42:37.895748+01:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:42:55.338923+01:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:47:43.009604+01:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ; show:t ; cr; cr; cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T10:57:20.997+01:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t^SubclassResponsibility ',			#stamp : 'pm 11/5/2018 09:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"comparaison operator for automated testing"\r\t^SubclassResponsibility ',			#stamp : 'pm 11/27/2018 10:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:08:45.102708+01:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isFalseConst,			#protocol : #testing-properties,			#sourceCode : 'isFalseConst\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 11:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:08:47.629924+01:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isFalse_Const,			#protocol : #testing-properties,			#sourceCode : 'isFalse_Const\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:08:53.227837+01:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isTrueConst,			#protocol : #testing-properties,			#sourceCode : 'isTrueConst\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 11:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:08:55.917502+01:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isTrue_Const,			#protocol : #testing-properties,			#sourceCode : 'isTrue_Const\r\t"Class tester"\r\t^false',			#stamp : 'pm 11/27/2018 07:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:14:08.351125+01:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rp\r\tleft:=leftProp.\r\tright:=rp.\r\t',			#stamp : 'pm 9/28/2018 20:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rightProp\r\tleft:=leftProp.\r\tright:=rightProp.\r\t',			#stamp : 'pm 11/27/2018 11:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:14:29.085741+01:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rightProp\r\tleft:=leftProp.\r\tright:=rightProp.\r\t',			#stamp : 'pm 11/27/2018 11:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'initialize:rightProp:',			#protocol : #initialize,			#sourceCode : 'initialize: leftProp rightProp: rightProp\r\t\r\tleft:=leftProp.\r\tright:=rightProp.\r\t',			#stamp : 'pm 11/27/2018 11:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:15:35.991525+01:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #Initialize,			#sourceCode : 'initialize: prop\r\toperand:=prop.',			#stamp : 'pm 9/28/2018 22:38',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #Initialize,			#sourceCode : 'initialize: aProp\t\r\t"Standart initialization for Unary Operators"\r\t"aProp should be subclass of the abstract class Prop"\r\toperand:=aProp.',			#stamp : 'pm 11/27/2018 11:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:16:49.027118+01:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unary class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #Initialize,			#sourceCode : 'new: prop\r\t^self basicNew initialize: prop.',			#stamp : 'pm 9/28/2018 22:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Unary class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #Initialize,			#sourceCode : 'new: aProp\t\r\t"Standart initialization for Unary Operators"\r\t"aProp should be subclass of the abstract class Prop"\r\t^self basicNew initialize: aProp.',			#stamp : 'pm 11/27/2018 11:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:18:23.651189+01:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\t\tifTrue:[^operand matchPatternWith: (prop operand)]\r\t\tifFalse:[^false].',			#stamp : 'pm 9/30/2018 10:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t\r\t(self compareSymbol: prop)\r\t\tifTrue:[^operand matchPatternWith: (prop operand)]\r\t\tifFalse:[^false].',			#stamp : 'pm 11/27/2018 11:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:21:24.339183+01:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t\r\t(self compareSymbol: prop)\r\t\tifTrue:[^operand matchPatternWith: (prop operand)]\r\t\tifFalse:[^false].',			#stamp : 'pm 11/27/2018 11:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #Matching,			#sourceCode : 'matchPatternWith: prop\r\t(self compareSymbol: prop)\r\tifTrue:[^operand matchPatternWith: (prop operand)]\r\tifFalse:[^false].',			#stamp : 'pm 11/27/2018 11:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:27:03.488106+01:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var (incredible, i know)\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules are available in the root directory, in a PNG from the course of David Delahaye, \tprofessor,  science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 10:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var (incredible, i know)\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules were taken from the course of David Delahaye, professor, science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 11:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:40:24.14172+01:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var (incredible, i know)\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules were taken from the course of David Delahaye, professor, science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 11:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return the proposition skolemnised"\r\t\r\t"Herbrandise: setOfLinkedVar CorrespondingValue: aMap"\r\t"setOfLinkedVar is a set of linked var (incredible, i know)\r\tIt\'s used to know if a variable was linked in that branch, following the rules of Skolemn/Herbran\r\t\r\tCorrespondingValue: aMap \r\tMap containing the correspondance between a variable, and the associated object term that we stored along the way. This will be used in Predicate::UpdateTerms.\r\t\r\tThe rules were taken from the course of David Delahaye, professor, science faculty, university of montpellier\r\t\t\r\t(Not sure the credit is enought)\r\t"',			#stamp : 'pm 11/27/2018 11:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:41:12.945048+01:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t^self class = prop2 class and:[(self operand) isSameForTesting: (prop2 operand)].',			#stamp : 'pm 11/5/2018 18:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"Comparaison operator for automated testing"\r\t^self class = prop2 class and:[(self operand) isSameForTesting: (prop2 operand)].',			#stamp : 'pm 11/27/2018 11:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:41:26.929379+01:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t^(self class = prop2 class) and:[((self left) isSameForTesting: (prop2 left)) and:[(self right)isSameForTesting: (prop2 right).]].',			#stamp : 'pm 11/5/2018 09:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"Comparaison operator for automated testing"\r\t^(self class = prop2 class) and:[((self left) isSameForTesting: (prop2 left)) and:[(self right)isSameForTesting: (prop2 right).]].',			#stamp : 'pm 11/27/2018 11:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:41:51.858545+01:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTermsForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameTermsForTesting: anotherPredicate\r\t| selfTerms anotherPredicateTerms |\r\tselfTerms:=self terms.\r\tanotherPredicateTerms:=anotherPredicate terms.\r\t1 to: (terms size) do:[:i|\r\t\t((selfTerms at:i) isSameForTesting: (anotherPredicateTerms at:i))\r\t\tifFalse:[\r\t\t\t^false\r\t\t\t]\r\t\t].\r\t^true',			#stamp : 'pm 11/5/2018 09:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTermsForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameTermsForTesting: anotherPredicate\r\t"Comparaison operator for automated testing"\r\t| selfTerms anotherPredicateTerms |\r\tselfTerms:=self terms.\r\tanotherPredicateTerms:=anotherPredicate terms.\r\t1 to: (terms size) do:[:i|\r\t\t((selfTerms at:i) isSameForTesting: (anotherPredicateTerms at:i))\r\t\tifFalse:[\r\t\t\t^false\r\t\t\t]\r\t\t].\r\t^true',			#stamp : 'pm 11/27/2018 11:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:42:24.700517+01:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTermsForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameTermsForTesting: anotherPredicate\r\t"Comparaison operator for automated testing"\r\t| selfTerms anotherPredicateTerms |\r\tselfTerms:=self terms.\r\tanotherPredicateTerms:=anotherPredicate terms.\r\t1 to: (terms size) do:[:i|\r\t\t((selfTerms at:i) isSameForTesting: (anotherPredicateTerms at:i))\r\t\tifFalse:[\r\t\t\t^false\r\t\t\t]\r\t\t].\r\t^true',			#stamp : 'pm 11/27/2018 11:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTermsForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameTermsForTesting: anotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t| selfTerms anotherPredicateTerms |\r\tselfTerms:=self terms.\r\tanotherPredicateTerms:=anotherPredicate terms.\r\t1 to: (terms size) do:[:i|\r\t\t((selfTerms at:i) isSameForTesting: (anotherPredicateTerms at:i))\r\t\tifFalse:[\r\t\t\t^false\r\t\t\t]\r\t\t].\r\t^true',			#stamp : 'pm 11/27/2018 11:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:42:29.786158+01:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherPredicate\r\t^(self terms) = (anotherPredicate terms).',			#stamp : 'pm 11/5/2018 09:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t^(self terms) = (anotherPredicate terms).',			#stamp : 'pm 11/27/2018 11:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:42:35.259398+01:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 11/27/2018 11:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:42:39.000006+01:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePolarity:',			#protocol : #comparing,			#sourceCode : 'isSamePolarity: anotherPredicate\r\t^((anotherPredicate isPredicate) and:[self class = anotherPredicate class])."checking the input"',			#stamp : 'pm 10/26/2018 15:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePolarity:',			#protocol : #comparing,			#sourceCode : 'isSamePolarity: anotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t^((anotherPredicate isPredicate) and:[self class = anotherPredicate class])."checking the input"',			#stamp : 'pm 11/27/2018 11:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:43:43.949654+01:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSameSymb:predicate) \r\tand:[(self isSameVar:predicate)].',			#stamp : 'pm 10/17/2018 12:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:45:25.146089+01:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new: \'a\'))) rightProp: (Predicate new: \'P\' variable:(Term new: \'b\'))) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l isTheSame: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 17:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=Exists new: \'a\' Property: (And new: (Predicate new: \'D\' variable: (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=Exists new: \'a\' Property:(Or new: (Predicate new: \'C\' variable:  (Term new: \'a\')) rightProp: (False_Const new)).\r\tp propUnitTest.\r\r\tp:=ForAll new: \'x\' Property: (Equal new: (Predicate new: \'A\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\t\r\tp:=ForAll new: \'x\' Property: (Imply new: (Predicate new: \'B\' variable:  (Term new: \'a\')) rightProp: (True_Const new)).\r\tp propUnitTest.\r\r\t"unary"\r\tp:=Not new: (Predicate new: \'Q\' variable: (Term new: \'a\')).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Predicate new: \'P\' variable:  (Term new: \'a\'))) rightProp: (Predicate new: \'P\' variable:(Term new: \'b\'))) rightProp: (False_Const new).\r\tp propUnitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Predicate new: \'P\' variable:  \'a\'.\r\tr:=Predicate new: \'P\' variable:  \'b\'.\r\tTranscript show: \'is P(a) = P(b) ? \';\r\t\t\tshow: (l = r); cr.\r\r\tr:=Predicate new: \'Q\' variable:  \'a\'.\r\tTranscript show: \'is var P(a) = Q(a) ? \';\r\t\tshow: (l = r); cr.\r\r\tr:=Predicate new: \'P\' variable:  \'a\'.\r\tTranscript show: \'is P(a) = P(a) ? \';\r\t\tshow: (l = r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 11/27/2018 11:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T11:45:46.897161+01:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'~\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 11/5/2018 18:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'~\'.\r\t\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 11/27/2018 11:45',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:23:17.570416+01:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'~\'.\r\t\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 11/27/2018 11:45',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\tsymb:=\'~\'.\r\t\r\t"patterns used for clausification.\r\tSince we\'re in a unary operator, we choose to not represent it, and just compare those pattern with the operand"\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 11/27/2018 12:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:24:09.311276+01:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'\\/\'. \r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/4/2018 08:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'\\/\'. \r\t\r\t"patterns used for clausification.\r\tSince we\'re in a binary operator, we have represent it, to fit in one variable."\r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 11/27/2018 12:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:24:19.95925+01:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'\\/\'. \r\t\r\t"patterns used for clausification.\r\tSince we\'re in a binary operator, we have represent it, to fit in one variable."\r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 11/27/2018 12:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\tsymb:=\'\\/\'. \r\t\r\t"patterns used for clausification.\r\tSince we\'re in a binary operator, we have represent it, to fit in one variable."\r\tpatternAnd:=Or new: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternAndSym:=Or new: (Var new: \'a\') rightProp: (And new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=Or new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=Or new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=Or new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 11/27/2018 12:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:25:25.956578+01:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'/\\\'.\r\tpatternOr:=And new: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternOrSym:=And new: (Var new: \'a\') rightProp: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=And new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=And new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=And new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 10/3/2018 20:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\tsymb:=\'/\\\'.\r\t\t\r\t"patterns used for clausification.\r\tSince we\'re in a binary operator, we have represent it, to fit in one variable."\r\tpatternOr:=And new: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\')))  rightProp: (Var new: \'a\').\r\tpatternOrSym:=And new: (Var new: \'a\') rightProp: (Or new: (Var new: \'a\') rightProp: (Var new:(\'a\'))).\r\tpatternTrue:=And new: (Var new: \'a\') rightProp: (True_Const new).\r\tpatternTrueSym:=And new: (True_Const new) rightProp:(Var new:\'a\').\r\tpatternFalse:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tpatternFalseSym:=And new: (False_Const new) rightProp:(Var new:\'a\').',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:25:33.10703+01:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Equal class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'<->\'.',			#stamp : 'pm 9/30/2018 17:36',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Equal class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\tsymb:=\'<->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:25:37.363154+01:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsymb:=\'->\'.',			#stamp : 'pm 9/30/2018 17:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\t\r\tsymb:=\'->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:25:38.65408+01:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\t\r\tsymb:=\'->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\t\tsymb:=\'->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T12:25:39.489739+01:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\t\tsymb:=\'->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Imply class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"Choosing the graphical symbol"\r\tsymb:=\'->\'.',			#stamp : 'pm 11/27/2018 12:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:03.156272+01:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t"accessor"\r\t^patternTrueSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:06.837913+01:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\t"accessor"\r\t^patternTrue',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:14.388852+01:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\t"accessor"\r\t^patternTrue',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\t\r\t"accessor"\r\t^patternTrue',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:16.636466+01:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\t\r\t"accessor"\r\t^patternFalseSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:19.266351+01:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\t\r\t"accessor"\r\t^patternFalse',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:21.417434+01:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAndSym,			#protocol : #accessing,			#sourceCode : 'patternAndSym\r\t^patternAndSym',			#stamp : 'pm 9/30/2018 16:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAndSym,			#protocol : #accessing,			#sourceCode : 'patternAndSym\t\r\t"accessor"\r\t^patternAndSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:23.439201+01:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #initialize,			#sourceCode : 'patternAnd\r\t^patternAnd',			#stamp : 'pm 9/30/2018 16:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Or class',				#isMetaSide : true			},			#name : #patternAnd,			#protocol : #initialize,			#sourceCode : 'patternAnd\t\r\t"accessor"\r\t^patternAnd',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:41.183727+01:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\r\t^patternFalse',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalse,			#protocol : #accessing,			#sourceCode : 'patternFalse\t\r\t"accessor"\r\t^patternFalse',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:43.321918+01:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\r\t^patternFalseSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternFalseSym,			#protocol : #accessing,			#sourceCode : 'patternFalseSym\t\r\t"accessor"\r\t^patternFalseSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:47.102432+01:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\r\t^patternOr',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOr,			#protocol : #accessing,			#sourceCode : 'patternOr\t\r\t"accessor"\r\t^patternOr',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:50.195882+01:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOrSym,			#protocol : #accessing,			#sourceCode : 'patternOrSym\r\t^patternOrSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternOrSym,			#protocol : #accessing,			#sourceCode : 'patternOrSym\t\r\t"accessor"\r\t^patternOrSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:52.449657+01:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\r\t^patternTrue',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrue,			#protocol : #accessing,			#sourceCode : 'patternTrue\t\r\t"accessor"\r\t^patternTrue',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T18:03:54.227673+01:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\r\t^patternTrueSym',			#stamp : 'pm 9/30/2018 16:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'And class',				#isMetaSide : true			},			#name : #patternTrueSym,			#protocol : #accessing,			#sourceCode : 'patternTrueSym\t\r\t"accessor"\r\t^patternTrueSym',			#stamp : 'pm 11/27/2018 18:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T19:28:11.240684+01:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 19:28',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T19:58:41.769986+01:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ; show:t ; cr; cr; cr.\r\t^t ',			#stamp : 'pm 11/27/2018 10:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=self."Not new:self."\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ; show:t ; cr; cr; cr.\r\t^t ',			#stamp : 'pm 11/27/2018 19:58',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:02:45.942868+01:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=self."Not new:self."\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ; show:t ; cr; cr; cr.\r\t^t ',			#stamp : 'pm 11/27/2018 19:58',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #resolution,			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: treatedProp ; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t ;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ; show:t ; cr; cr; cr.\r\t^t ',			#stamp : 'pm 11/27/2018 20:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:50:10.350185+01:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone resolutionTrace\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #resolutionTrace,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone resolutionTrace\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @36					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @36					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @36					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @36					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #resolutionTrace,						#parent : @36					}				],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @31,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:53:10.166232+01:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SkolemnTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone resolutionTrace\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #resolutionTrace,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #SkolemnTrace,					#parent : @7				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SkolemnTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @33,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #SkolemnTrace,					#parent : @33				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:53:16.025937+01:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SkolemnTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #SkolemnTrace,					#parent : @7				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SkolemnTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @23,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #SkolemnTrace,					#parent : @23				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:54:09.923647+01:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 19:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:57:51.937979+01:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=True.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T20:57:57.557709+01:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=True.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:02:04.588848+01:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:02:22.627628+01:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:02:39.033234+01:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:02:54.656886+01:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Const \';show:self;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:03:00.445096+01:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^self.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Const \';show:self;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:03:27.675837+01:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:03:35.434586+01:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class ; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:03:41.254948+01:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class ; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:03:44.082969+01:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:04:12.375451+01:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:04:15.449965+01:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:04:49.89434+01:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:05:40.411352+01:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:06:20.558929+01:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:06:27.461059+01:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:06:54.982386+01:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:07:08.805473+01:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:self class name ; space ;show:self;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:07:42.59225+01:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:07:47.332562+01:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Predicate \';show:self;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:07:48.872491+01:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:08:08.852462+01:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Const \';show:self;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:08:17.071515+01:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:08:24.422937+01:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Const \';show:self;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Constant,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self.',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:08:49.701101+01:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:08:54.306268+01:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:09:01.661883+01:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:09:57.901326+01:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:04.160076+01:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/26/2018 20:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:10.181435+01:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:19.948633+01:00' ],		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:25.236556+01:00' ],		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:32.473881+01:00' ],		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:10:39.489411+01:00' ],		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:01.365364+01:00' ],		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/26/2018 20:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:08.124249+01:00' ],		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:10.924627+01:00' ],		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:16.541089+01:00' ],		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:19.831018+01:00' ],		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:24.178924+01:00' ],		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:27.269771+01:00' ],		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:11:56.820025+01:00' ],		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:12:03.959803+01:00' ],		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:13:50.997721+01:00' ],		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:13:53.829031+01:00' ],		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:15:01.910678+01:00' ],		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=true.\r\tSkolemnTrace:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 20:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tSkolemnTrace:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 21:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:10.582141+01:00' ],		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\'  ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:22.372769+01:00' ],		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ;space ; show:self ;cr].\r\t\r\t^self updateTerms: setOfLinkedVar CorrespondingValue: aMap.',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:35.697845+01:00' ],		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:43.653815+01:00' ],		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"factorisation for Or and And binaryOperator"\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:51.165455+01:00' ],		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:52.405043+01:00' ],		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\t\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Herbrandise: setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:57.440856+01:00' ],		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:16:58.39934+01:00' ],		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ;space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\t^(And new: (Imply new: (self left) rightProp: (self right))\r\t rightProp: (Imply new: (self right) rightProp: (self left))) Skolemnise:setOfLinkedVar CorrespondingValue:aMap.\r',			#stamp : 'pm 11/27/2018 21:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:06.176448+01:00' ],		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:12.472056+01:00' ],		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:15.502649+01:00' ],		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ;  show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:16.934736+01:00' ],		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ;  show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:27.238571+01:00' ],		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:31.970217+01:00' ],		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\t^(self class) new: (self operand Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:43.545713+01:00' ],		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:50.735592+01:00' ],		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Exists,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars:  setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:17:56.635639+01:00' ],		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t| t |\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Herbran\' ; space ; show:self ;cr].\r\t\r\tt := setOfLinkedVar isEmpty\r\t\tifTrue: [ ConstTerm new ]"then it\'s a generated constant, same as an Exists"\r\t\tifFalse: [ FuncTerm newFuncWithVars: setOfLinkedVar ].\t\t"then it\'s a skolem function"\r\taMap add: (Association key: var value: t).\r\t^(self operand) Herbrandise: setOfLinkedVar CorrespondingValue: aMap.\t"(self class) new: ("\t")"\r\r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:18:03.335586+01:00' ],		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self class name ;space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:19:34.604107+01:00' ],		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\t\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\tTranscript show:self var;cr.\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:19:55.850673+01:00' ],		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\tTranscript show:self var;cr.\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\tself halt.\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:20:55.388323+01:00' ],		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\tself halt.\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ForAll,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t(SkolemnTrace)ifTrue:[Transcript show:\'Skolem\' ; space ; show:self ;cr].\r\r\tsetOfLinkedVar add: (LinkedTerm new:(Term new:(self var))).\r\r\t^(self operand) Skolemnise: setOfLinkedVar CorrespondingValue: aMap.\r\t \r\t"We don\'t keep the Quantifiers in the formula"',			#stamp : 'pm 11/27/2018 21:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:21:18.338865+01:00' ],		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 10/8/2018 20:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tself halt.\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 11/27/2018 21:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:22:21.81641+01:00' ],		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\tself halt.\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 11/27/2018 21:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 11/27/2018 21:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:22:28.822346+01:00' ],		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 11/27/2018 21:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'updateTerms:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'updateTerms: setOfLinkedVar CorrespondingValue: aMap\r\t| res |\r\tres := LinkedList new.\r\tterms do:[ :term | res add: (term WhatAmI:setOfLinkedVar CorrespondingValue:aMap). ].\r\t^Predicate new: (self getSymb) fromList:res.\r',			#stamp : 'pm 11/27/2018 21:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:22:59.937605+01:00' ],		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].',			#stamp : 'pm 11/11/2018 09:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r\tself halt',			#stamp : 'pm 11/27/2018 21:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:23:46.249531+01:00' ],		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r\tself halt',			#stamp : 'pm 11/27/2018 21:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\tself halt.\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r',			#stamp : 'pm 11/27/2018 21:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:25:43.839581+01:00' ],		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\tself halt.\r\t(setOfLinkedVar haveYouSeenThisObject:self)\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r',			#stamp : 'pm 11/27/2018 21:23',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\tself halt.\r\t(setOfLinkedVar haveYouSeenThisObject:(LinkedTerm new:self))\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r',			#stamp : 'pm 11/27/2018 21:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:26:32.197173+01:00' ],		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/Linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\tself halt.\r\t(setOfLinkedVar haveYouSeenThisObject:(LinkedTerm new:self))\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r',			#stamp : 'pm 11/27/2018 21:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractTerm,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t"Part of the skolemnisation process.\r\tStep which determines what kind of term each term in each predicate is (func/const/linked)"\r\t"For argument, see documentation in Prop::SkolemnisationDocu."\r\t| elem |\r\r\t(setOfLinkedVar haveYouSeenThisObject:(LinkedTerm new:self))\r\tifTrue:[^LinkedTerm new:self.]\r\tifFalse:[\r\t\telem:=aMap at:(self prettyPrint) ifAbsent:[(ConstTerm new: self)].\r\t\t^elem.].\r',			#stamp : 'pm 11/27/2018 21:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-27T21:27:41.161294+01:00' ],		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tSkolemnTrace:=true.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 21:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tSkolemnTrace:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 11/27/2018 21:27',			#package : #_resolution_1erOrdre		}	}}