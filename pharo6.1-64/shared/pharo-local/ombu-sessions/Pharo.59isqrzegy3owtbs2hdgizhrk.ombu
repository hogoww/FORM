OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T07:57:47.274258+02:00' ],		#prior : OmReference [ 'Pharo.3dgea5mervoen3vszlgd8bupd', '94' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t|\r\tProp testInc.\t\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 07:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:04:06.222349+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t|\r\tProp testInc.\t\r\tTranscript show: \'test #\'; show:(Prop testNumber);cr.\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 07:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:04:54.178375+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug debugUnification testNumber unifDone resolutionTrace\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debugUnification,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #testNumber,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #unifDone,						#parent : @34					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #resolutionTrace,						#parent : @34					}				],				#baseClass : @29			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @29,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:05:02.53698+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=false.\r\ttestNumber:=0.',			#stamp : 'pm 10/21/2018 13:46',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:05:28.184097+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:05:45.606612+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #resolutionTrace,			#protocol : #'as yet unclassified',			#sourceCode : 'resolutionTrace\r\t^resolutionTrace\r',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:05:45.680367+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #resolutionTrace,			#protocol : #'as yet unclassified',			#sourceCode : 'resolutionTrace\r\t^resolutionTrace\r',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #resolutionTrace,			#protocol : #accessing,			#sourceCode : 'resolutionTrace\r\t^resolutionTrace\r',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:10:29.115927+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)\r\tTranscript show: \'initial: \'; show: self prettyPrint; cr.\r\tt:=self StartSkolemnisation.\r\tTranscript show: \'Skolemn: \';show: t prettyPrint;cr.\r\tt:=t fullClausification.\r\tTranscript show: \'Clausified:\';show: t prettyPrint ;cr.\r\tt:=ClausalForm new:t.\r\tTranscript show: \'ClausalForm:\';show: t prettyPrint ;cr.\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:26:59.330597+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: \'x\')\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: \'a\')\r\t\t\trightProp:(Predicate new:\'P\' variable: \'b\'))).\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:27:45.516716+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\t"Prop testingProp."\r\t"Prop testingMatch."\r\t"Prop testingClausification."\r\tProp testingFactorisation.\r\tProp testingResolvante.\r\r\tProp testingSkolemn.\r"\tProp testingUnification."\r',			#stamp : 'pm 10/26/2018 21:01',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testEverything,			#protocol : #testing,			#sourceCode : 'testEverything\r\tTranscript clear.\r\tProp initEverything.\r\t"Prop testingProp."\r\t"Prop testingMatch."\r\t"Prop testingClausification."\r\tProp testingFactorisation.\r\tProp testingResolvante.\r\tProp testingUnification.\r\tProp testingSkolemn.\r\tProp testingResolutionMethod.\r\r',			#stamp : 'pm 10/27/2018 08:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:29:23.488309+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: \'x\')\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: \'a\')\r\t\t\trightProp:(Predicate new:\'P\' variable: \'b\'))).\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:33:19.564367+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:33:27.958736+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #amIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'amIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:33',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:33:31.197568+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #AmIValid,			#protocol : #'as yet unclassified',			#sourceCode : 'AmIValid\r\t|t treatedProp|\r\tProp testInc.\t\r\r\tTranscript show:\'Is \';show: self; show:\' valid?\';cr.\r\t\r\ttreatedProp:=Not new:self.\r\t\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'initial: \'; show: self prettyPrint; cr.].\r\tt:=treatedProp StartSkolemnisation.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Skolemn: \';show: t prettyPrint;cr.].\r\tt:=t fullClausification.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'Clausified:\';show: t prettyPrint ;cr.].\r\tt:=ClausalForm new:t.\r\t(Prop resolutionTrace)ifTrue:[Transcript show: \'ClausalForm:\';show: t prettyPrint ;cr.].\r\tt:=t resolutionMethod.\r\r\tTranscript show:\'Resolution method:\' ;show:t;cr;cr;cr.\r\t^t ',			#stamp : 'pm 10/27/2018 08:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:40:54.03786+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Basics\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:46:42.890861+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\')))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\'))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:46',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:47:02.367373+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\')))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\'))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:46',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\')))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:47:19.704495+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: \'x\')))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:51:02.535397+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' Variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:51',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:54:55.67319+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:51',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:55:03.929262+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T08:59:54.728299+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:55',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:59',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T09:01:18.36897+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 08:59',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T09:07:42.708974+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:01',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:\'x\')))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:\'x\'))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T09:08:10.092256+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:\'x\')))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:\'x\'))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T09:10:31.133686+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#7\';cr.\r\tp:=Imply new:\r\t\t\t(Not new: \r\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t(Not new:\r\t\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-27T09:13:41.574225+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#7\';cr.\r\tp:=Imply new:\r\t\t\t(Not new: \r\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t(Not new:\r\t\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingResolutionMethod,			#protocol : #testing,			#sourceCode : 'testingResolutionMethod\r \t"everything is tested in those few lines"\r\t"Binary"\r\t|p|\r\t\r\tTranscript show: \'Testing Unification related stuff\';cr.\r\t\r\tTranscript show:\'Course proposition\';cr.\r\t\r\tTranscript show:\'#1\';cr.\r\tp:=Exists new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'a\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'b\')))).\r\tp amIValid.\r\r\tTranscript show:\'#2\';cr.\r\tp:=ForAll new: \'x\' Property: (\r\t\tImply new:\r\t\t\t(Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\trightProp:\r\t\t\t(Exists new: \'y\' Property: \r\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'y\'))\r\t\t\trightProp:(Predicate new:\'P\' variable: (Term new:\'y\'))))).\r\tp amIValid.\r\r\tTranscript show:\'#3\';cr.\r\tp:=Imply new:\r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(Or new:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\r\tTranscript show:\'#4\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#5\';cr.\r\tp:=Imply new:\r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(And new: (Predicate new: \'P\' variable: (Term new:\'x\'))\r\t\t\t\trightProp: (Predicate new: \'Q\' variable: (Term new:\'x\'))))\r\t\trightProp: \r\t\t\t\t(And new:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'P\' variable: (Term new:\'x\')))\r\t\t\t\trightProp:\r\t\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t\t (Predicate new: \'Q\' variable: (Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#6\';cr.\r\tp:=Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Not new:\r\t\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show:\'#7\';cr.\r\tp:=Imply new:\r\t\t\t(Not new: \r\t\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))))\r\t\trightProp: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Not new:\r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\')))).\r\tp amIValid.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/27/2018 09:13',			#package : #_resolution_1erOrdre		}	}}