OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-16T15:50:33.424054+01:00' ],		#prior : OmReference [ 'Pharo.43d36hg36l9fk7spavhwaxtbn', '32' ],		#self : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestResolution\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Testing class\''			},			#name : #TestResolution,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestResolution class\r\tinstanceVariableNames: \'\''				},				#name : #'TestResolution class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestResolution,					#isMetaSide : false				},				#parent : @7,				#content : 'Some tests to Check for validity of propositions.',				#stamp : 'pm 12/16/2018 15:50'			},			#classVariables : OrderedCollection [ ],			#category : #'_resolution_1erOrdre-Testing class',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Some tests to Check for validity of propositions.',		#newStamp : 'pm 12/16/2018 15:50'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-16T15:50:51.142201+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestClausification\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Testing class\''			},			#name : #TestClausification,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestClausification class\r\tinstanceVariableNames: \'\''				},				#name : #'TestClausification class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestClausification,					#isMetaSide : false				},				#parent : @7,				#content : 'Automatiic Clausification tests\r\rWhat\'s in the predicates isn\'t relevant, since they aren\'t touched through this process.\rThat mean that even though we\'re after the skolemnisation, and there should only be specific terms in there (const/linked/func), they don\'t matter. \r\rWe therefor are able to use the propGeneration tool to create new tests at will.',				#stamp : 'pm 12/16/2018 15:50'			},			#classVariables : OrderedCollection [ ],			#category : #'_resolution_1erOrdre-Testing class',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Automatiic Clausification tests\r\rWhat\'s in the predicates isn\'t relevant, since they aren\'t touched through this process.\rThat mean that even though we\'re after the skolemnisation, and there should only be specific terms in there (const/linked/func), they don\'t matter. \r\rWe therefore are able to use the propGeneration tool to create new tests at will.',		#newComment : 'Automatiic Clausification tests\r\rWhat\'s in the predicates isn\'t relevant, since they aren\'t touched through this process.\rThat mean that even though we\'re after the skolemnisation, and there should only be specific terms in there (const/linked/func), they don\'t matter. \r\rWe therefor are able to use the propGeneration tool to create new tests at will.',		#oldStamp : 'pm 12/13/2018 17:34',		#newStamp : 'pm 12/16/2018 15:50'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-18T09:55:03.775148+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see a program trace"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/18/2018 09:55',			#package : #_resolution_1erOrdre		}	}}