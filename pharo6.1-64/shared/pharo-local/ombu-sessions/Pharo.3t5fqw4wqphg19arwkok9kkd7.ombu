OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:04:41.090885+02:00' ],		#prior : OmReference [ 'Pharo.eobekkfg6c7n7p8qepe2y56dp', '87' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchParternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchParternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\t\tifFalse:[operand:=operand clausification].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r',			#stamp : 'pm 9/30/2018 15:58',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchParternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchParternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:04',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:09:56.274445+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 9/29/2018 08:48',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome).',			#stamp : 'pm 9/30/2018 18:09',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:13:34.187937+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #ClausificationUnitTest,			#protocol : #'as yet unclassified',			#sourceCode : 'ClausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=t clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:13',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:14:05.148795+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #ClausificationUnitTest,			#protocol : #'as yet unclassified',			#sourceCode : 'ClausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=t clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:13',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #ClausificationUnitTest,			#protocol : #'as yet unclassified',			#sourceCode : 'ClausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:14',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:16:35.807672+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #ClausificationUnitTest,			#protocol : #'as yet unclassified',			#sourceCode : 'ClausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:14',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #ClausificationUnitTest,			#protocol : #testing,			#sourceCode : 'ClausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:14',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:16:43.459324+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t| t |\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self clausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr.',			#stamp : 'pm 9/30/2018 18:16',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:17:15.271637+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingClausification,			#protocol : #testing,			#sourceCode : 'testingClausification\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing clausification related stuff\';cr.\r\t\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp clausificationUnitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Bit more complicated stuff!\';cr.\r\t\r\tp:=Imply new: (Equal new: (Not new: (Var new: \'a\')) rightProp: (Var new: \'b\')) rightProp: (False_Const new).\r\tp clausificationUnitTest.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/30/2018 18:17',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:18:17.582958+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((And patternFalse) matchParternWith: self)\r\tifTrue:[^right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchParternWith: self)\r\t\tifTrue:[^left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^right]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 17:08',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((And patternFalse) matchPatternWith: self)\r\tifTrue:[^right]\r\tifFalse:[\r\t\t((And patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[^left]\r\t\tifFalse:[\r\t\t\t((And patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^left]\r\t\t\tifFalse:[\r\t\t\t\t((And patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^right]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((And patternOr) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((And patternOrSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:18:35.069218+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((Or patternFalse) matchParternWith: self)\r\tifTrue:[^left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchParternWith: self)\r\t\tifTrue:[^right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 17:25',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r \t((Or patternFalse) matchPatternWith: self)\r\tifTrue:[^left]\r\tifFalse:[\r\t\t((Or patternFalseSym) matchPatternWith: self)\r\t\tifTrue:[^right]\r\t\tifFalse:[\r\t\t\t((Or patternTrue) matchPatternWith: self)\r\t\t\tifTrue:[^right]\r\t\t\tifFalse:[\r\t\t\t\t((Or patternTrueSym) matchPatternWith: self)\r\t\t\t\tifTrue:[^left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Or patternAnd) matchPatternWith: self)\r\t\t\t\t\tifTrue:[Or new: (And new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (And new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Or patternAndSym) matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[Or new:(And new: self left rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (And new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t\t.\r\t\t',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:18:46.539536+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchParternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchParternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:04',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:18:50.388479+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchParternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:24:48.730617+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpProtocolAddition {		#behavior : RGMetaclassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''			},			#name : #'Prop class',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#baseClass : RGClassDefinition {				#annotations : IdentityDictionary {					#superclassName : 'Object',					#traitCompositionSource : '{}',					#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''				},				#name : #Prop,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#metaClass : @7,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#parent : @12,					#content : ''				},				#classVariables : OrderedCollection [ ],				#category : #_Specification,				#package : #_Specification,				#sharedPools : OrderedCollection [ ]			}		},		#protocol : #Initialize	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:26:49.021415+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #init,			#protocol : #Initialize,			#sourceCode : 'init\r\t"initialize every damn class."\r\t"Used only for working purposes"\r\tProp initialize.\r\tAtome initialize.\r\tConstant  initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary',			#stamp : 'pm 9/30/2018 18:26',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:26:51.430423+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #init,			#protocol : #Initialize,			#sourceCode : 'init\r\t"initialize every damn class."\r\t"Used only for working purposes"\r\tProp initialize.\r\tAtome initialize.\r\tConstant  initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary',			#stamp : 'pm 9/30/2018 18:26',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #init,			#protocol : #Initialize,			#sourceCode : 'init\r\t"initialize every damn class."\r\t"Used only for working purposes"\r\tProp initialize.\r\tAtome initialize.\r\tConstant  initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.',			#stamp : 'pm 9/30/2018 18:26',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:26:54.393397+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #init,			#protocol : #Initialize,			#sourceCode : 'init\r\t"initialize every damn class."\r\t"Used only for working purposes"\r\tProp initialize.\r\tAtome initialize.\r\tConstant  initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.',			#stamp : 'pm 9/30/2018 18:26',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #init,			#protocol : #Initialize,			#sourceCode : 'init\r\t"initialize every damn class."\r\t"Used only for working purposes"\r\tProp initialize.\r\tAtome initialize.\r\tConstant  initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.',			#stamp : 'pm 9/30/2018 18:26',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:27:52.436819+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True new.\r\tpatternFalse:=False new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 14:13',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Not class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #Initialize,			#sourceCode : 'initialize\r\tsymb:=\'!\'.\r\tpatternNot:=Not new:(Var new: \'a\').\r\tpatternTrue:=True_Const new.\r\tpatternFalse:=False_Const new.\r\tpatternOr:=Or new:(Var new: \'a\') rightProp: (Var new: \'a\').\r\tpatternAnd:=And new:(Var new: \'a\') rightProp: (Var new: \'a\').',			#stamp : 'pm 9/30/2018 18:27',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:40:05.089765+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[^operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[^False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[^True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[^And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[^Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t(self operand) clausification.\r',			#stamp : 'pm 9/30/2018 18:18',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t^t clausification.\r',			#stamp : 'pm 9/30/2018 18:40',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-30T18:40:48.423165+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t^t clausification.\r',			#stamp : 'pm 9/30/2018 18:40',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"Only one clausification operation at time"\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\t((Not patternNot) matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t((Not patternTrue) matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t((Not patternFalse) matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t((Not patternOr) matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((Not patternAnd) matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\t\tifFalse:[t:=self].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t].\r\t^t clausification.\r',			#stamp : 'pm 9/30/2018 18:40',			#package : #_Specification		}	}}