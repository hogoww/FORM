OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:52:06.439716+01:00' ],		#prior : OmReference [ 'Pharo.a3omz6ft9ky5gt6giifgu6mgh', '24' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tclausificationTrace:=true.\r\tskolemnTrace:=true.\r\tunificationTrace:=true.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:48',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tclausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:27.898931+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestClausification,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 16:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:30.764636+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestClausification,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 15:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:36.044245+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestResolution,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 16:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:38.778336+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestResolution,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 15:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:43.278376+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestSkolemnisation,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 16:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:47.167423+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestSkolemnisation,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 15:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:52.141537+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 16:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:53:54.737846+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\t"ensure that the traces booleans / visual artifacts are up to date"\r\tProp initEverything ',			#stamp : 'pm 12/15/2018 15:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:55:02.462471+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"Every class initialization, for that  package."\r\t\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.\r\t\r\t"terms"\r\tAbstractTerm initialize.\r\tFuncTerm initialize.\r\tTerm initialize.\r\tUnaryTerm initialize.\r\tConstTerm initialize.\r\tLinkedTerm initialize.\r\t\r\t"Clausal Form stuffs"\r\tClausalForm initialize.\r\tClause initialize.\r\tResolvante initialize.\r\tUnifier initialize.\r\r\t"DataStructure"\r\tLinkedListFix initialize.\r\tMinimalOrderedSet initialize.\r\tPair initialize.\r\t\r',			#stamp : 'pm 12/15/2018 13:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initEverything,			#protocol : #testing,			#sourceCode : 'initEverything\r\t"Every class initialization, for that  package."\r\t\r\t"classic logic"\r\tProp initialize.\r\tAtome initialize.\r\tConstant initialize.\r\tFalse_Const initialize.\r\tTrue_Const initialize.\r\tVar initialize.\r\tNotVar initialize.\r\tOperator initialize.\r\tBinary initialize.\r\tAnd initialize.\r\tEqual initialize.\r\tImply initialize.\r\tOr initialize.\r\tUnary initialize.\r\tNot initialize.\r\t\r\t"Predicate"\r\tQuantifier initialize.\r\tExists initialize.\r\tForAll initialize.\r\t\r\t"terms"\r\tAbstractTerm initialize.\r\tFuncTerm initialize.\r\tTerm initialize.\r\tUnaryTerm initialize.\r\tConstTerm initialize.\r\tLinkedTerm initialize.\r\t\r\t"Clausal Form stuffs"\r\tClausalForm initialize.\r\tClause initialize.\r\tResolvante initialize.\r\tUnifier initialize.\r\r\t"DataStructure"\r\tLinkedListFix initialize.\r\tMinimalOrderedSet initialize.\r\tPair initialize.\r\t',			#stamp : 'pm 12/15/2018 16:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:57:07.232191+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\t\r\t"toString"\r\t^(self getSymb).',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T17:01:43.173397+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialization,			#sourceCode : 'new:Const_Value\r\t"new named const Object"\r\t^self basicNew initialize:Const_Value;\r\t\t\tanonymous:false;\r\t\t\tyourself.',			#stamp : 'pm 11/5/2018 09:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConstTerm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #initialization,			#sourceCode : 'new:const_Value\r\t"new named const Object"\r\t^self basicNew initialize:const_Value;\r\t\t\tanonymous:false;\r\t\t\tyourself.',			#stamp : 'pm 12/15/2018 17:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T17:01:47.77693+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 11/27/2018 11:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherPredicate\r\t"Part of comparaison operator for automated testing"\r\t^(self getSymb)=(anotherPredicate getSymb).',			#stamp : 'pm 12/15/2018 17:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T17:01:50.257584+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: ClausaleProposition\r\t"Creation of a clausal form, and add everything in a Clausified Prop."\r\t^self basicNew initialize:ClausaleProposition.',			#stamp : 'pm 10/28/2018 15:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClausalForm class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: clausaleProposition\r\t"Creation of a clausal form, and add everything in a Clausified Prop."\r\t^self basicNew initialize:clausaleProposition.',			#stamp : 'pm 12/15/2018 17:01',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:41:47.669967+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestUnification\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Testing class\''			},			#name : #TestUnification,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestUnification class\r\tinstanceVariableNames: \'\''				},				#name : #'TestUnification class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestUnification,					#isMetaSide : false				},				#parent : @7,				#content : 'Unification test. \rFor reference, the table of possible operations used is:\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',				#stamp : 'pm 12/15/2018 19:41'			},			#classVariables : OrderedCollection [ ],			#category : #'_resolution_1erOrdre-Testing class',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Unification test. \rFor reference, the table of possible operations used is:\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    Check\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Swap          |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#newComment : 'Unification test. \rFor reference, the table of possible operations used is:\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#oldStamp : 'pm 12/14/2018 12:33',		#newStamp : 'pm 12/15/2018 19:41'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:42:15.515306+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestUnification\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Testing class\''			},			#name : #TestUnification,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestUnification class\r\tinstanceVariableNames: \'\''				},				#name : #'TestUnification class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestUnification,					#isMetaSide : false				},				#parent : @7,				#content : 'Unification test. \rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',				#stamp : 'pm 12/15/2018 19:42'			},			#classVariables : OrderedCollection [ ],			#category : #'_resolution_1erOrdre-Testing class',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Unification test. \rFor reference, the table of possible operations used is:\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#newComment : 'Unification test. \rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#oldStamp : 'pm 12/15/2018 19:41',		#newStamp : 'pm 12/15/2018 19:42'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:42:28.639398+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair unifiedPair\'\r\tclassVariableNames: \'UnifiedTerm\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Clausal Form\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #unifiedPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',				#stamp : 'pm 12/15/2018 19:42'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #UnifiedTerm,					#parent : @7				}			],			#category : #'_resolution_1erOrdre-Clausal Form',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#oldStamp : 'pm 10/27/2018 22:13',		#newStamp : 'pm 12/15/2018 19:42'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:53:34.97149+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["it\'s either a ConstTerm or a LinkedTerm. Same behavior"\r\t\t\tleft isConst\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/14/2018 17:46',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:[\r\t\t\tright isLinkedTerm\t\t\t\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible :=true.\t\t\t\t\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/15/2018 19:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:53:45.175759+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:[\r\t\t\tright isLinkedTerm\t\t\t\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible :=true.\t\t\t\t\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/15/2018 19:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:[\r\t\t\tright isLinkedTerm\t\t\t\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["it\'s a const term"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible :=true.\t\t\t\t\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/15/2018 19:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:55:53.789172+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:[\r\t\t\tright isLinkedTerm\t\t\t\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["it\'s a const term"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible :=true.\t\t\t\t\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/15/2018 19:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperations:',			#protocol : #unification,			#sourceCode : 'tryOperations: aPair\r\t| modified notPossible left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tnotPossible:=false.\r\tmodified:=false.\r\r\t(left isPredicateOrFuncTerm)\r\tifTrue:[\r\t\t(right isPredicateOrFuncTerm)\r\t\tifTrue:[\r\t\t\t((left isSameSymb: right) and:[(left arity=right arity)])\r\t\t\tifTrue:["Decompose is possible"\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:[\r\t\t\tright isLinkedTerm\t\t\t\r\t\t\tifTrue:[\r\t\t\t\tself swap:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]\r\t\t\tifFalse:["it\'s a const term"\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible :=true.\t\t\t\t\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\tifFalse:[\r\t\t(left isLinkedTerm)\r\t\tifTrue:[\r\t\t\tright isPredicateOrFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tnotPossible:=self check:aPair.\r\t\t\t\t]\r\t\t\tifFalse:["else right is either Linked or Const term, behavior is factorisable"\r\t\t\t\tleft=right\r\t\t\t\tifTrue:["then they both are LinkedTerms"\r\t\t\t\t\tself delete:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tmodified:=self eliminate:aPair.\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse:["left is a ConstTerm"\r\t\t\tright isFuncTerm\r\t\t\tifTrue:[\r\t\t\t\tself conflict:aPair.\r\t\t\t\tnotPossible:=true.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tright isLinkedTerm\r\t\t\t\tifTrue:[\r\t\t\t\t\tself swap:aPair.\r\t\t\t\t\tmodified:=true.\r\t\t\t\t\t]\r\t\t\t\tifFalse:["right is a ConstTerm"\r\t\t\t\t\tleft=right\r\t\t\t\t\tifTrue:[\r\t\t\t\t\t\tself delete:aPair.\r\t\t\t\t\t\tmodified:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\tself conflict:aPair.\r\t\t\t\t\t\tnotPossible:=true.\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\r\t^Pair left: modified right: notPossible. ',			#stamp : 'pm 12/15/2018 19:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:56:26.850136+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestUnification\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Testing class\''			},			#name : #TestUnification,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestUnification class\r\tinstanceVariableNames: \'\''				},				#name : #'TestUnification class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestUnification,					#isMetaSide : false				},				#parent : @7,				#content : 'Unification test. \rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\rVERY unsure about  what to do on a const=Func or the other way arround.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',				#stamp : 'pm 12/15/2018 19:56'			},			#classVariables : OrderedCollection [ ],			#category : #'_resolution_1erOrdre-Testing class',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Unification test. \rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#newComment : 'Unification test. \rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\rVERY unsure about  what to do on a const=Func or the other way arround.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#oldStamp : 'pm 12/15/2018 19:42',		#newStamp : 'pm 12/15/2018 19:56'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:56:33.716236+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs hasFailed initialPair unifiedPair\'\r\tclassVariableNames: \'UnifiedTerm\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Clausal Form\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #hasFailed,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #initialPair,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #unifiedPair,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.VERY unsure about  what to do on a const=Func or the other way arround.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',				#stamp : 'pm 12/15/2018 19:56'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #UnifiedTerm,					#parent : @7				}			],			#category : #'_resolution_1erOrdre-Clausal Form',			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#newComment : 'I represent an Unifier object.\r\rMy purpose is to unify two predicate.\r\rPublic API and Key Messages\r\r-Unifier new: Predicate2:\r- UnifyThis\r\rp1:=Predicate new:(..)\rp2:=Predicate new:(...)\rUnifier new: p1 Predicate2:p2\r \rInstance Variables\r\thasFailed:\tBoolean to see if the unification failed.\r\rFor reference, the table of possible operations used is:\rVery unsure on some of those, but i\'m missing some examples.VERY unsure about  what to do on a const=Func or the other way arround.\r\r             =         |     const      |   Linked    |     Func/Pred     \r        Const    |  Conflict     |  Swap       |    conflict\r                        |  Delete        |                    |\r                        |                       |                     | \r     Linked     | Eliminate  |  Delete     |    Check\r                        |                       |                     | \rFunc/Pred  | Conflict      |  Swap        |   Decompose\r                        |                       |                      |   Conflict\r                        |                       |                      | ',		#oldStamp : 'pm 12/15/2018 19:42',		#newStamp : 'pm 12/15/2018 19:56'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T19:57:46.376683+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testConstOnFunc,			#protocol : #tests,			#sourceCode : 'testConstOnFunc\r\t| left right unifier expectedResultPair expectedResultSetOfPair |\r\t"Only test for aConstTerm=aFuncTerm"\r\t\r\t"check fail"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'a\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t\r\t"check ok"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'x\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=Pair left: left right: right. \r\texpectedResultSetOfPair :=MinimalOrderedSet new\r\t\tadd: (Pair left: (ConstTerm new:(Term new:\'x\')) right:(FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'x\'))));\r\t\tyourself.\r\r\tself deny:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t',			#stamp : 'pm 12/15/2018 14:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testConstOnFunc,			#protocol : #tests,			#sourceCode : 'testConstOnFunc\r\t| left right unifier expectedResultPair expectedResultSetOfPair |\r\t"Only test for aConstTerm=aFuncTerm"\r\t\r\t"check fail"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'a\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t\r\t"check ok"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'x\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t',			#stamp : 'pm 12/15/2018 19:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:00:01.690413+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tclausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:52',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:00',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:26:36.121464+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:00',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:26:52.801074+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:27:08.492384+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:27:33.847183+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:27:40.342118+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=true.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tskolemnTrace:=false.\r\tclausificationTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 20:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T20:47:55.543244+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testConstOnFunc,			#protocol : #tests,			#sourceCode : 'testConstOnFunc\r\t| left right unifier expectedResultPair expectedResultSetOfPair |\r\t"Only test for aConstTerm=aFuncTerm"\r\t\r\t"check fail"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'a\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t\r\t"check ok"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'x\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.\r\t',			#stamp : 'pm 12/15/2018 19:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testConstOnFunc,			#protocol : #tests,			#sourceCode : 'testConstOnFunc\r\t| left right unifier expectedResultPair expectedResultSetOfPair |\r\t"Only test for aConstTerm=aFuncTerm"\r\t\r\t"conflict"\r\tleft:=Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')).\r\tright:=Predicate new: \'P\' variable: (FuncTerm new: \'f\' Variable:(ConstTerm new:(Term new:\'a\'))).\r\t\r\tunifier:=Unifier new: left Predicate2:right.\r\t\r\texpectedResultPair:=nil.\r\texpectedResultSetOfPair :=nil.\r\r\tself assert:unifier hasFailed.\r\tself assert:unifier unifiedPair equals:expectedResultPair.\r\tself assert:unifier setOfPairs equals: expectedResultSetOfPair.',			#stamp : 'pm 12/15/2018 20:47',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T21:13:41.944746+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMonticelloVersionSave {		#versionName : '_resolution_1erOrdre-pm.6',		#repositoryDescription : '/home/ariale/FORM/pharo6.1-64/shared/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T21:13:42.075212+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMonticelloVersionSave {		#versionName : '_resolution_1erOrdre-pm.6',		#repositoryDescription : '/home/ariale/FORM/pharo6.1-64/Sources'	}}