OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:54:22.42596+02:00' ],		#prior : OmReference [ 'Pharo.3shn0xn24auoqpr1t4nfze5z8', '83' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\t\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/8/2018 22:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\t\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 08:54',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:56:35.490131+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[^(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/8/2018 22:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:56',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:57:04.336482+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.\r',			#stamp : 'pm 10/8/2018 17:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\tTranscript show: self class.\r\t^self getSymb.\r',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:57:37.444669+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\tTranscript show: self class.\r\t^self getSymb.\r',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint \r\t^self getSymb.\r',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:57:51.859764+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:56',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\tTranscript show:setOfLinkedVar .\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T08:57:57.991369+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\tTranscript show:setOfLinkedVar .\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\tTranscript show:setOfLinkedVar;cr.\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:02:59.132308+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"',			#stamp : 'pm 10/7/2018 11:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"',			#stamp : 'pm 10/9/2018 09:02',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:03:38.519917+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"',			#stamp : 'pm 10/9/2018 09:02',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t\t"We pass a clone to the rightProp, so each branch has it\'s own instance of Set."',			#stamp : 'pm 10/9/2018 09:03',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:04:27.398572+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:33',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t\t\t\r\t\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:04:54.7094+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:05:22.19151+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t\t"We pass a clone to the rightProp, so each branch has it\'s own instance of Set."',			#stamp : 'pm 10/9/2018 09:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:05:43.163678+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).',			#stamp : 'pm 10/7/2018 11:28',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:08:58.78255+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:09:03.716654+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:09:08.586279+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t\t\t\r\t\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t\t\t\r\t\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:09:15.781751+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar clone) CorrespondingValue: (aMap clone)).\r\t"We pass clones to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:10:54.469148+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:11:01.170508+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t\t\t\r\t\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:11:08.423969+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:11:12.149647+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass veryDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:12:20.919734+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\t',			#stamp : 'pm 10/9/2018 09:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:13:08.626328+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\t',			#stamp : 'pm 10/9/2018 09:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\tcopy:=self new.\r\tself do:[:each| self add:each].\r\t^copy',			#stamp : 'pm 10/9/2018 09:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:13:10.693554+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\tcopy:=self new.\r\tself do:[:each| self add:each].\r\t^copy',			#stamp : 'pm 10/9/2018 09:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\tcopy:=self new.\r\tself do:[:each| self add:each].\r\t^copy.',			#stamp : 'pm 10/9/2018 09:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:16:58.201527+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:16',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:17:07.356061+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass MOSDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:17:41.77183+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:20:30.545312+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Herbrandise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:20:51.031491+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: setOfLinkedVar CorrespondingValue: aMap) \r\t\t\trightProp: (self right Skolemnise: (setOfLinkedVar MOSDeepCopy) CorrespondingValue: (aMap MOSDeepCopy)).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:21:24.008093+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass MOSDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap ).\r\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:21:28.53924+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy)  CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t"Works for at least Or & And. Maybe Equal?"\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:21:34.056711+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:20',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Skolemnise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Herbrandise: setOfLinkedVar CorrespondingValue: aMap).\r\t\t\t\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:21:37.330307+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\t"We pass MOSDeepCopys to the rightProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:20',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #'Skolemnise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Skolemnise: setOfLinkedVar CorrespondingValue: aMap\r\t^(self class) new: (self left Herbrandise: (setOfLinkedVar veryDeepCopy) CorrespondingValue: (aMap veryDeepCopy)) \r\t\t\trightProp: (self right Skolemnise: setOfLinkedVar CorrespondingValue: aMap).\r\r\t"We pass veryDeepCopys to the leftProp, so each branch has it\'s own collections"',			#stamp : 'pm 10/9/2018 09:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:24:26.922986+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint\r\t^\'c\',self getSymb.',			#stamp : 'pm 10/9/2018 09:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:24:27.005429+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #'as yet unclassified',			#sourceCode : 'prettyPrint\r\t^\'c\',self getSymb.',			#stamp : 'pm 10/9/2018 09:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',self getSymb.',			#stamp : 'pm 10/9/2018 09:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:32:53.70908+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\t\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 08:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\t\r\t\r\tTranscript cr; show: \'same as previous one, check Unbound Exists is replaced by consts\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 09:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:33:43.680962+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'MOSDeepCopy:',			#protocol : #'as yet unclassified',			#sourceCode : 'MOSDeepCopy: AnotherMOS\r\t|copy|\r\tcopy:=self new.\r\tself do:[:each| self add:each].\r\t^copy.',			#stamp : 'pm 10/9/2018 09:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:34:16.711087+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\tTranscript show:setOfLinkedVar;cr.\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 08:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Term,				#isMetaSide : false			},			#name : #'WhatAmI:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'WhatAmI:setOfLinkedVar CorrespondingValue: aMap\r\t| elem |\r\t(setOfLinkedVar haveYouSeenThisObject:(self getSymb))\r\tifTrue:[^LinkedTerm new:(self getSymb).]\r\tifFalse:[\r\t\telem:=aMap at:(self getSymb)ifAbsent:[(ConstTerm new:(self getSymb))].\r\t\t^elem.\r\t\t]\r\t\t\t\t"Weird formulation which means: \r\t\tifFalse:[^elem]\r\t\tifTrue:[^(ConstTerm new:(self getSymb))].\r\t\t]."',			#stamp : 'pm 10/9/2018 09:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:34:32.044514+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',self getSymb.',			#stamp : 'pm 10/9/2018 09:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',(self getSymb).',			#stamp : 'pm 10/9/2018 09:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:34:50.789534+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',(self getSymb).',			#stamp : 'pm 10/9/2018 09:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',(self getSymb asString).',			#stamp : 'pm 10/9/2018 09:34',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T09:35:30.4546+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',(self getSymb asString).',			#stamp : 'pm 10/9/2018 09:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConstTerm,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^\'c\',((self getSymb) asString).',			#stamp : 'pm 10/9/2018 09:35',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:01:57.879363+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'Contains:',			#protocol : #adding,			#sourceCode : 'Contains: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/7/2018 18:25',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:02:07.835666+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- Contains: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }\r p add : 1 >> "p contains { 1 }\r',				#stamp : 'pm 10/7/2018 18:21'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #search	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:02:11.463996+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'haveYouSeenThisObject:',			#protocol : #adding,			#sourceCode : 'haveYouSeenThisObject: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/8/2018 17:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalOrderedSet,				#isMetaSide : false			},			#name : #'haveYouSeenThisObject:',			#protocol : #search,			#sourceCode : 'haveYouSeenThisObject: anObject \r\t"search for the object"\r\tself do: [ :each | \r\t\t(each=anObject) \r\t\tifTrue:[^true]\r\t\t].\r\t^false.',			#stamp : 'pm 10/8/2018 17:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:08:47.54777+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LinkedList',				#traitCompositionSource : '{}',				#definitionSource : 'LinkedList subclass: #MinimalOrderedSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #MinimalOrderedSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalOrderedSet class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalOrderedSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalOrderedSet,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',				#stamp : 'pm 10/9/2018 10:08'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- Contains: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }\r p add : 1 >> "p contains { 1 }\r',		#newComment : 'I\'m a ordered set, using a LinkedList. \r\rI\'m a linked list which only override the method \'add\' so i can be considered as a set.\rI also give access to a way to find an object via haveYouSeenThisObject.\r\rcf LinkedList.\r\rPublic API and Key Messages\r\r- add: anObject (add an object IF it\'s not in the set)\r- haveYouSeenThisObject: anObject (search for an element in the set\r- To create instances , cf LinkedList\r\rp:=MinimalOrderSet new.\rp add: 1 >> "p contains { 1 }"\r p add : 1 >> "p contains { 1 }"\r\rp haveYouSeenThisObject: 1 >> "true"\rp haveYouSeenThisObject: 2 >> "false"\r',		#oldStamp : 'pm 10/7/2018 18:21',		#newStamp : 'pm 10/9/2018 10:08'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:21:02.155668+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\r\r-FullClausification -> clausifie a prop\r- StartSkolemnise -> Skolemnise a first order proposition\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\r\r-FullClausification -> clausifie a prop\r- StartSkolemnise -> Skolemnise a first order proposition\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:26:25.115487+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\r\rPublic API and Key Messages\r\r-  \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 10:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\r\rPublic API and Key Messages\r\r-  \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/9/2018 10:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:29:54.869111+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.\r',				#stamp : 'pm 10/9/2018 10:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\r\r-FullClausification -> clausifie a prop\r- StartSkolemnise -> Skolemnise a first order proposition\r',		#newComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.\r',		#oldStamp : '<historical>',		#newStamp : 'pm 10/9/2018 10:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:36:09.82791+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Term\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Term,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Term,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Term class\r\tinstanceVariableNames: \'\''				},				#name : #'Term class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Term,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',				#stamp : 'pm 10/9/2018 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\r\rPublic API and Key Messages\r\r-  \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent a Predicate\'s Term.\r\rMy type will be specialized in ConstTerm, FuncTerm, LinkedVar when the propostion my predicate\'s in goes through skolemnisation.\rI look a lot like a proposition, but i\'m conceptually different, hence the new object defined types.\r\rPublic API and Key Messages\r\r-prettyPrint -> print the term as a string.\r-new: aChar -> new instance, with a char as a term.\r ',		#oldStamp : 'pm 10/9/2018 10:26',		#newStamp : 'pm 10/9/2018 10:36'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:39:21.273217+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:39'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',		#newStamp : 'pm 10/9/2018 10:39'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:40:52.386159+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #FuncTerm\r\tinstanceVariableNames: \'terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:40'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',		#newStamp : 'pm 10/9/2018 10:40'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:42:15.034412+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #LinkedTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #LinkedTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',				#stamp : 'pm 10/9/2018 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Linked Term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable is bound by a forall earlier in the proposition.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String\r\r',		#newStamp : 'pm 10/9/2018 10:42'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:43:03.214723+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #FuncTerm\r\tinstanceVariableNames: \'terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #FuncTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FuncTerm,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FuncTerm class\r\tinstanceVariableNames: \'\''				},				#name : #'FuncTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FuncTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',				#stamp : 'pm 10/9/2018 10:43'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',		#newComment : 'I represent a Func term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable was bound by an Exists, with a forall binding the said Exists beforehand.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with a standart name \'f\' for the function, and a list of terms.\r\r',		#oldStamp : 'pm 10/9/2018 10:40',		#newStamp : 'pm 10/9/2018 10:43'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:44:52.485699+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Term',				#traitCompositionSource : '{}',				#definitionSource : 'Term subclass: #ConstTerm\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ConstTerm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConstTerm class\r\tinstanceVariableNames: \'factoryNum\''				},				#name : #'ConstTerm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'ConstTerm class',							#isMetaSide : true						},						#name : #factoryNum,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConstTerm,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',				#stamp : 'pm 10/9/2018 10:44'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',		#newComment : 'I represent a Const term, for a predicate.\r\rI should only be instanciated by the skolemnisation.\rI exists if my variable wasn\'t bound by anything OR if i\'m bound by an exists which isn\'t bound by a previous forall.\r\r\rPublic API and Key Messages\r-prettyPrint >> return the term as a String, with the character \'c\' as a start. To differenciate it from the rest visually.\r\r',		#oldStamp : 'pm 10/9/2018 10:39',		#newStamp : 'pm 10/9/2018 10:44'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:48:48.862078+02:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Operator class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',				#stamp : 'pm 10/9/2018 10:48'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an operator whith an unknown number of argument.\r\rI only factorise a method for now, but I allow possible future evolutions.',		#newStamp : 'pm 10/9/2018 10:48'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:51:47.950371+02:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tleft:\t\t<Object>\r\tright:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 10:51'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tleft:\t\t<Object>\r\tright:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/9/2018 10:51'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:52:16.772606+02:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'debug\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Prop class',							#isMetaSide : true						},						#name : #debug,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 10/9/2018 10:52'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.\r',		#newComment : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- FullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- PrettyPrint -> returns a string representing my  internal state.',		#oldStamp : 'pm 10/9/2018 10:29',		#newStamp : 'pm 10/9/2018 10:52'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:55:15.107238+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',				#stamp : 'pm 10/9/2018 10:55'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tleft:\t\t<Object>\r\tright:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- left & right -> accessors.\r- new: rightProp: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).\r\t\t\t',		#oldStamp : 'pm 10/9/2018 10:51',		#newStamp : 'pm 10/9/2018 10:55'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:55:45.595574+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new:Operand: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).',				#stamp : 'pm 10/9/2018 10:55'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new:Operand: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).',		#newStamp : 'pm 10/9/2018 10:55'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T10:56:16.463997+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Unary\r\tinstanceVariableNames: \'operand\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unary,						#isMetaSide : false					},					#name : #operand,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unary class\r\tinstanceVariableNames: \'\''				},				#name : #'Unary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unary,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',				#stamp : 'pm 10/9/2018 10:56'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new:Operand: -> create a binary operator\r\rexample of initialization.\rBinaryOpClass new: (aPropClass newOperator) \r\t\t\t    rightProp: (aPropClass newOperator).',		#newComment : 'I represent a Abstract binary operator\r\rI factorise some of the attributes part of future operators.\r\rPublic API and Key Messages\r\r- operand -> accessor.\r- new: -> create a binary operator\r\rexample of initialization.\rUnaryOpClass new: (aPropClass newOperator) .',		#oldStamp : 'pm 10/9/2018 10:55',		#newStamp : 'pm 10/9/2018 10:56'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:00:10.17641+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an atome in a Proposition\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 11:00'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an atome in a Proposition\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : 'pm 10/9/2018 11:00'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:00:44.178648+02:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 11:00'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an atome in a Proposition\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newComment : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#oldStamp : 'pm 10/9/2018 11:00',		#newStamp : 'pm 10/9/2018 11:00'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:00:49.995335+02:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 11:00'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #testing	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:01:32.768885+02:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^true.',			#stamp : 'pm 10/5/2018 17:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:03:03.187785+02:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',				#stamp : 'pm 10/9/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newComment : 'I represent an Abstract atome in a Proposition.\r\rI factorise some proprieties.',		#oldStamp : 'pm 10/9/2018 11:00',		#newStamp : 'pm 10/9/2018 11:03'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:05:18.583946+02:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Constant class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 11:05'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True and False constants, to represent them in Propositions\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : 'pm 10/9/2018 11:05'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:05:36.973953+02:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'False const',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'False const',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:05:46.093726+02:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : 'True Const\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'True Const\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:07:13.184787+02:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Constant class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : 'True and False constants, to represent them in Propositions\r\r',				#stamp : 'pm 10/9/2018 11:07'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'True and False constants, to represent them in Propositions\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newComment : 'True and False constants, to represent them in Propositions\r\r',		#oldStamp : 'pm 10/9/2018 11:05',		#newStamp : 'pm 10/9/2018 11:07'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:07:28.751971+02:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\tterms:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\tterms:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:15:37.909296+02:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName \r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'pm 10/9/2018 11:15'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Predicate with a list of terms,\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName \r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'pm 10/9/2018 11:15'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:20:41.990932+02:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rAlso in formeClausale we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',				#stamp : 'pm 10/9/2018 11:20'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\tterms:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent a Predicate with a list of terms,\r\rAlso in formeClausale we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',		#oldStamp : '<historical>',		#newStamp : 'pm 10/9/2018 11:20'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:21:48.087644+02:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:22:16.1476+02:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative Predicate, only in clausaleForm',				#stamp : 'pm 10/9/2018 11:22'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative Predicate, only in clausaleForm',		#newStamp : 'pm 10/9/2018 11:22'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:22:25.080709+02:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',				#stamp : 'pm 10/9/2018 11:22'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Predicate with a list of terms,\r\rAlso in formeClausale we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',		#newComment : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',		#oldStamp : 'pm 10/9/2018 11:20',		#newStamp : 'pm 10/9/2018 11:22'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:23:27.259315+02:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',				#stamp : 'pm 10/9/2018 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Predicate with a list of terms,\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName \r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tsymb:\t\t<Object>\r\r\r    Implementation Points',		#newComment : 'I represent a variable in a Propositional logic.\r\r-new:VarName \r',		#oldStamp : 'pm 10/9/2018 11:15',		#newStamp : 'pm 10/9/2018 11:23'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:23:49.794722+02:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative variable, only in clausaleForm',				#stamp : 'pm 10/9/2018 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a negative variable, only in clausaleForm',		#newStamp : 'pm 10/9/2018 11:23'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:24:27.566592+02:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpRenameClassRefactoring {		#newName : #ClausalForm,		#oldName : #FormeClausale	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2018-10-09T11:24:27.582392+02:00' ],		#trigger : @3	},	#content : EpBehaviorNameChange {		#oldName : #FormeClausale,		#newName : #ClausalForm,		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClausalForm\r\tinstanceVariableNames: \'clauses\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ClausalForm,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClausalForm,						#isMetaSide : false					},					#name : #clauses,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClausalForm class\r\tinstanceVariableNames: \'\''				},				#name : #'ClausalForm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClausalForm,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:24:46.893479+02:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Var',				#traitCompositionSource : '{}',				#definitionSource : 'Var subclass: #NotVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotVar class\r\tinstanceVariableNames: \'\''				},				#name : #'NotVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotVar,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative variable, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a negative variable, only in clausaleForm',		#newComment : 'I represent a negative variable, only in ClausalForm',		#oldStamp : 'pm 10/9/2018 11:23',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:24:52.391616+02:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Predicate',				#traitCompositionSource : '{}',				#definitionSource : 'Predicate subclass: #NotPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #NotPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NotPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'NotPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NotPredicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a negative Predicate, only in ClausalForm',				#stamp : 'pm 10/9/2018 11:24'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a negative Predicate, only in clausaleForm',		#newComment : 'I represent a negative Predicate, only in ClausalForm',		#oldStamp : 'pm 10/9/2018 11:22',		#newStamp : 'pm 10/9/2018 11:24'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:25:25.151157+02:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'patternNot patternTrue patternFalse patternOr patternAnd\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternNot,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Not  operator',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Not  operator',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:26:20.755727+02:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Quantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:26:29.401958+02:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #Exists\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Exists,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exists class\r\tinstanceVariableNames: \'\''				},				#name : #'Exists class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Exists,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Exists quantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Exists quantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:26:40.822713+02:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Quantifier',				#traitCompositionSource : '{}',				#definitionSource : 'Quantifier subclass: #ForAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ForAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ForAll class\r\tinstanceVariableNames: \'\''				},				#name : #'ForAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ForAll,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a ForallQuantifier',				#stamp : 'pm 10/9/2018 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a ForallQuantifier',		#newStamp : 'pm 10/9/2018 11:26'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:28:36.639406+02:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIRepresent',				#stamp : 'pm 10/9/2018 11:28'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Quantifier',		#newComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIRepresent',		#oldStamp : 'pm 10/9/2018 11:26',		#newStamp : 'pm 10/9/2018 11:28'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:28:46.779807+02:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Quantifier\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Quantifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Quantifier,						#isMetaSide : false					},					#name : #var,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Quantifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Quantifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Quantifier,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',				#stamp : 'pm 10/9/2018 11:28'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIRepresent',		#newComment : 'I represent a Quantifier\r\rI\'m created this way:\rnew: VariableIQuantifieAsChar',		#oldStamp : 'pm 10/9/2018 11:28',		#newStamp : 'pm 10/9/2018 11:28'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:13.413113+02:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Predicate\r\tinstanceVariableNames: \'symb terms\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Predicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #symb,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Predicate,						#isMetaSide : false					},					#name : #terms,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Predicate class\r\tinstanceVariableNames: \'\''				},				#name : #'Predicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Predicate,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable: aCharForATerm\r-new: PredicateName Variables: aListOfChar\r\r',		#newComment : 'I represent a Predicate with a list of terms,\r\rAlso in ClausaleForm we\'ll be representing a Positive predicate.\r\rPublic API and Key Messages\r\rCan be created two ways :\r-new: PredicateName Variable:aTerm\r-new: PredicateName Variables: aListOfTerm\r\r',		#oldStamp : 'pm 10/9/2018 11:22',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:27.197293+02:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'patternOr patternOrSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOr,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternOrSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an And proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an And proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:35.739902+02:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Equal proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Equal proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:44.170128+02:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Imply proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Imply proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:47.450775+02:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Imply  proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent an Imply proposition',		#newComment : 'I represent an Imply  proposition',		#oldStamp : 'pm 10/9/2018 11:29',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:29:54.410001+02:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'patternAnd patternAndSym patternTrue patternTrueSym patternFalse patternFalseSym\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAnd,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternAndSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrue,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternTrueSym,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalse,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #patternFalseSym,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent an Or proposition',				#stamp : 'pm 10/9/2018 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Or proposition',		#newStamp : 'pm 10/9/2018 11:29'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:31:35.479045+02:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t^SubclassResponsibility ',			#stamp : 'pm 9/28/2018 22:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 10/9/2018 11:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:32:09.181142+02:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #HerbranSkolemDocu,			#protocol : #Skoleminsation,			#sourceCode : 'HerbranSkolemDocu\r\t^Error new:\'documentation of Skolemnisation\'.\r\t"return that prop skolemnised"',			#stamp : 'pm 10/6/2018 18:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T11:52:15.901164+02:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.\r',			#stamp : 'pm 10/8/2018 21:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\t(aTerm isKindOf: Term)\r\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\tsymb:=symbl.\r\tterms:=LinkedList new.\r\tterms add:aTerm.\r',			#stamp : 'pm 10/9/2018 11:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:07:31.054803+02:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:[\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["Transcript show:(OrProp operand) getSymb ;cr."\r\t\t\t\t\t\tself add:(NotVar new:((OrProp operand) getSymb))]\r\t\t\t\tifFalse:["switch to Error new:"\r\t\t\t\t\tTranscript show: \'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/3/2018 15:37',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:[\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["Transcript show:(OrProp operand) getSymb ;cr."\r\t\t\t\t\t\tself add:(NotVar new:((OrProp operand) getSymb))]\r\t\t\t\tifFalse:["switch to Error new:"\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:17:19.530236+02:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:[\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["Transcript show:(OrProp operand) getSymb ;cr."\r\t\t\t\t\t\tself add:(NotVar new:((OrProp operand) getSymb))]\r\t\t\t\tifFalse:["switch to Error new:"\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((OrProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (OrProp operand) getSymb fromList: (OrProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((OrProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((OrProp operand) getSymb)).]]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:17',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:19:23.507443+02:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((OrProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (OrProp operand) getSymb fromList: (OrProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((OrProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((OrProp operand) getSymb)).]]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:17',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((OrProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (OrProp operand) getSymb fromList: (OrProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((OrProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((OrProp operand) getSymb)).]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ]].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:19:48.274326+02:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: OrProp\r\t(OrProp isKindOf: Atome)\r\tifTrue:[self add:OrProp.]\r\tifFalse:[\r\t\t((OrProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(OrProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((OrProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (OrProp operand) getSymb fromList: (OrProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((OrProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((OrProp operand) getSymb)).]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ]].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((OrProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (OrProp left).\r\t\t\t\tself addAll: (OrProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #accessing,			#sourceCode : 'addAll: orProp\r\t(orProp isKindOf: Atome)\r\tifTrue:[self add:orProp.]\r\tifFalse:[\r\t\t((orProp) isKindOf: Not)\r\t\tifTrue:["we\'re in a not"\r\t\t\t(orProp operand isKindOf:Atome)\r\t\t\t\tifTrue:["we\'re in an atom"\r\t\t\t\t\t((orProp operand) isKindOf: Predicate)\r\t\t\t\t\tifTrue:[self add:(NotPredicate new: (orProp operand) getSymb fromList: (orProp operand) terms).]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t((orProp operand) isKindOf: Var)\r\t\t\t\t\t\tifTrue:[self add:(NotVar new:((orProp operand) getSymb)).]\r\t\t\t\t\t\tifFalse: [ Error new: \'shouldn\'\'t be any True or false here\' ]].\r\t\t\t\t\t\t]\r\t\t\t\tifFalse:[\r\t\t\t\t\tError new:\'Error, shouldn\'\'t be any more not ( binaryOp )\'\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t((orProp) isKindOf: Or)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (orProp left).\r\t\t\t\tself addAll: (orProp right).\r\t\t\t\t]\r\t\t\tifFalse:["switch to Error new:"\r\t\t\t\tTranscript show:\'Error, shouldn\'\'t be any other kind of prop here.\'.\r\t\t\t\t].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/9/2018 12:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:21:13.50899+02:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\t\r\t\r\tTranscript cr; show: \'same as previous one, check Unbound Exists is replaced by consts\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 09:32',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\t\r\t\r\tTranscript cr; show: \'same as previous one, check Unbound Exists is replaced by consts\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 12:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:23:46.139768+02:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\t\r\t\r\tTranscript cr; show: \'same as previous one, check Unbound Exists is replaced by consts\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 12:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingSkolemn,			#protocol : #testing,			#sourceCode : 'testingSkolemn\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p terms |\r\t\r\t"Transcript clear."\r\tTranscript show: \'Testing Skolemnisation related stuff\';cr.\r\t\r\tTranscript show: \'basic one\';cr.\r\tterms:=LinkedList new.\r\tterms add:(Term new:\'x\');add:(Term new:\'y\');add:(Term new:\'z\').\t\r\tp:=ForAll new: \'x\' Property: (Exists new: \'y\' Property: (ForAll new: \'z\' Property: (Predicate new: \'P\' fromList: terms ))).\r\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr;show: \'with imply and nested forall.\';cr.\r\tp:=Not new: \r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'a\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'a\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\r\tTranscript cr; show: \'same as previous one, but with x representing a variable in one, and a const in the other.\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(ForAll new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t\tp:=ClausalForm new:((p SkolemnisationTest) clausificationUnitTest).\r\t\r\tTranscript cr; show: \'same as previous one, check Unbound Exists is replaced by consts\';cr.\r\tp:=Not new:\r\t\t(Imply new: \r\t\t\t(Exists new: \'x\' Property:\r\t\t\t\t(Or new:  \r\t\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\t\t rightProp:\r\t\t\t\t\t(Predicate new: \'Q\' variable:(Term new:\'x\'))))\r\t\t\t rightProp:\r\t\t\t(Or new: \r\t\t\t\t(Predicate new: \'P\' variable:(Term new:\'x\'))\r\t\t\t\trightProp:(Predicate new: \'Q\' variable:(Term new:\'x\')))).\r\t(p SkolemnisationTest) clausificationUnitTest.\r\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 10/9/2018 12:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:24:02.484517+02:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self fullClausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr;cr.',			#stamp : 'pm 9/30/2018 20:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #clausificationUnitTest,			#protocol : #testing,			#sourceCode : 'clausificationUnitTest\r\t|t|\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.\r\tt:=self fullClausification.\r\tTranscript show: t prettyPrint; show: \'  \' ;show: t isClause; cr;cr.\r\t^t',			#stamp : 'pm 10/9/2018 12:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-09T12:25:46.219635+02:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #propUnitTest,			#protocol : #testing,			#sourceCode : 'propUnitTest\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr; cr.',			#stamp : 'pm 9/30/2018 19:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #propUnitTest,			#protocol : #testing,			#sourceCode : 'propUnitTest\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr; cr.\r\t^self',			#stamp : 'pm 10/9/2018 12:25',			#package : #_resolution_1erOrdre		}	}}