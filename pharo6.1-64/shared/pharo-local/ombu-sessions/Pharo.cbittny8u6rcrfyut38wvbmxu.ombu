OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:20:47.630014+02:00' ],		#prior : OmReference [ 'Pharo.eo2jfjukwm6tyunuk0porllhx', '40' ],		#self : OmReference [ '1' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:21:17.62436+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 9/29/2018 08:21',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:23:10.731617+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Atome\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Atome,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Atome class\r\tinstanceVariableNames: \'\''				},				#name : #'Atome class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Atome,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #Clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:24:32.70974+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^True ',			#stamp : 'pm 9/29/2018 08:24',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:25:11.994728+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^True ',			#stamp : 'pm 9/29/2018 08:24',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Atome,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^true',			#stamp : 'pm 9/29/2018 08:25',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:26:47.093106+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Operator',				#traitCompositionSource : '{}',				#definitionSource : 'Operator subclass: #Binary\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Binary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Binary,						#isMetaSide : false					},					#name : #right,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binary class\r\tinstanceVariableNames: \'\''				},				#name : #'Binary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binary,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:37:06.678683+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:37',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:38:10.093858+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'symb\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:39:44.752521+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:37',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binary,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t"false unless it\'s a or/and"\r\t^false',			#stamp : 'pm 9/29/2018 08:39',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:40:20.691437+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isClause,			#protocol : #'as yet unclassified',			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:40',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:40:20.768311+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isClause,			#protocol : #'as yet unclassified',			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:40',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #isClause,			#protocol : #testing,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:40',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:41:06.217222+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:41:12.103324+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^(left isClause & right isClause)',			#stamp : 'pm 9/29/2018 08:41',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:44:47.517234+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*Athens-Text'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:45:05.477705+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*Athens-Text'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:45:15.24184+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #clausification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T08:48:02.948093+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t" (! a) is a clause, but ! (a \\/ b) isn\'t"\r\t^(operand isKindOf: Atome)',			#stamp : 'pm 9/29/2018 08:48',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:00:27.578818+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr; cr.',			#stamp : 'pm 9/28/2018 22:57',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; show: \'  \' ;show: p isClause; cr.\r\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr; cr.',			#stamp : 'pm 9/29/2018 09:00',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:02:18.5241+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #testing	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:08:04.93317+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'unitTest:',			#protocol : #testing,			#sourceCode : 'unitTest: p\r\tTranscript show: p prettyPrint; show: \'  \' ;show: p isClause; cr.',			#stamp : 'pm 9/29/2018 09:08',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:08:55.934331+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #unitTest,			#protocol : #testing,			#sourceCode : 'unitTest\r\tTranscript show: self prettyPrint; show: \'  \' ;show: self isClause; cr.',			#stamp : 'pm 9/29/2018 09:08',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:09:46.61628+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; show: \'  \' ;show: p isClause; cr.\r\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp class initialize.\r\tTranscript show: p prettyPrint; cr; cr.',			#stamp : 'pm 9/29/2018 09:02',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.',			#stamp : 'pm 9/29/2018 09:09',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:11:41.215907+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.',			#stamp : 'pm 9/29/2018 09:09',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript cr;cr.',			#stamp : 'pm 9/29/2018 09:11',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:15:53.991715+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #isSameVar	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:15:58.433736+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #isSameVar	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:16:09.504912+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Var\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Var,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Var,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Var class\r\tinstanceVariableNames: \'\''				},				#name : #'Var class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Var,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#protocol : #comparison	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:19:25.127786+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Var,				#isMetaSide : false			},			#name : #'isSameVar:',			#protocol : #comparison,			#sourceCode : 'isSameVar: other\r\t^self getSymb = other getSymb.',			#stamp : 'pm 9/29/2018 09:19',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:19:50.749507+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'unitTest:',			#protocol : #testing,			#sourceCode : 'unitTest: p\r\tTranscript show: p prettyPrint; show: \'  \' ;show: p isClause; cr.',			#stamp : 'pm 9/29/2018 09:08',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:25:11.527014+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript cr;cr.',			#stamp : 'pm 9/29/2018 09:11',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:25',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:29:25.175373+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p |\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:25',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ?\';cr;\r\t\tshow: (l isSameVar: r).\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r).\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:29',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:30:12.564055+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ?\';cr;\r\t\tshow: (l isSameVar: r).\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r).\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:29',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:30',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:30:52.271036+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:30',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:30',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:31:02.799221+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:30',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:31',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:32:16.374197+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';cr;\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:31',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:32:24.101403+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ?\';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:32:36.7323+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work?\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:36:32.833426+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Constant,						#isMetaSide : false					},					#name : #symb,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:36:38.716099+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'symb\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Constant,						#isMetaSide : false					},					#name : #symb,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:36:45.632441+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'symb\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'False_Const class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #False_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #False_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'False_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'False_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #False_Const,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:36:56.886779+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'symb\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'True_Const class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Constant',				#traitCompositionSource : '{}',				#definitionSource : 'Constant subclass: #True_Const\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #True_Const,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'True_Const class\r\tinstanceVariableNames: \'\''				},				#name : #'True_Const class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #True_Const,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:09.531885+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'symb\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'And class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'And class\r\tinstanceVariableNames: \'\''				},				#name : #'And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #And,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:12.840445+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Imply class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Imply\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Imply,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Imply class\r\tinstanceVariableNames: \'\''				},				#name : #'Imply class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Imply,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:15.864251+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Equal class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Equal\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Equal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Equal class\r\tinstanceVariableNames: \'\''				},				#name : #'Equal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Equal,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:19.552749+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Or class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Binary',				#traitCompositionSource : '{}',				#definitionSource : 'Binary subclass: #Or\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Or,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Or class\r\tinstanceVariableNames: \'\''				},				#name : #'Or class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Or,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:28.224689+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Not class',							#isMetaSide : true						},						#name : #symb,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Unary',				#traitCompositionSource : '{}',				#definitionSource : 'Unary subclass: #Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Not class\r\tinstanceVariableNames: \'\''				},				#name : #'Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Not,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:30.936171+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Prop',				#traitCompositionSource : '{}',				#definitionSource : 'Prop subclass: #Operator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Operator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Operator class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Operator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Operator class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Operator,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:37:44.727781+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Atome',				#traitCompositionSource : '{}',				#definitionSource : 'Atome subclass: #Constant\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_Specification\''			},			#name : #Constant,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Constant class\r\tinstanceVariableNames: \'symb\''				},				#name : #'Constant class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Constant class',							#isMetaSide : true						},						#name : #symb,						#parent : @26					}				],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Constant,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_Specification,			#package : #_Specification,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:39:39.561938+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:32',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:39',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:42:34.461848+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testint every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:39',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:42',			#package : #_Specification		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-09-29T09:47:29.237386+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:42',			#package : #_Specification		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingProp,			#protocol : #testing,			#sourceCode : 'testingProp\r \t"everything is tested in those few lines"\r\t"Binary"\r\t| p l r|\r\t\r\tTranscript clear.\r\tTranscript show: \'Testing prop related stuff\';cr.\r\t\r\tTranscript show: \'testing every constructor in a simple way, and if they are clauses:\';cr.\r\t\r\tp:=And new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Or new: (Var new: \'a\') rightProp: (False_Const new).\r\tp unitTest.\r\r\tp:=Equal new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\t\r\tp:=Imply new: (Var new: \'a\') rightProp: (True_Const new).\r\tp unitTest.\r\r\t"unary"\r\tp:=Not new: (Var new: \'a\').\r\tp unitTest.\r\t\r\tTranscript show: \'Testing Comparisons on Vars:\'; cr.\r\t\r\tl:=Var new: \'a\'.\r\tr:=Var new: \'b\'.\r\tTranscript show: \'is var a = b ? \';\r\t\t\tshow: (l isSameVar: r); cr.\r\r\tr:=Var new: \'a\'.\r\tTranscript show: \'is var a = a ? \';\r\t\tshow: (l isSameVar: r); cr.\r\t\r\tTranscript show: \'Done with the testing, did it work? :3\' ; cr; cr.',			#stamp : 'pm 9/29/2018 09:47',			#package : #_Specification		}	}}