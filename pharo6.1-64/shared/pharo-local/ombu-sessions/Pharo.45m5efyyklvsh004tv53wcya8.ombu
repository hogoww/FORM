OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:22:33.628165+02:00' ],		#prior : OmReference [ 'Pharo.6s76xlrewhl472z9fd2td3g21', '416' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isOpposite:',			#protocol : #comparing,			#sourceCode : 'isOpposite: AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:22:35.616927+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [ ]	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2018-10-24T07:22:35.647685+02:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isOpposite:',			#protocol : #comparing,			#sourceCode : 'isOpposite: AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isOpposite:',			#protocol : #comparing,			#sourceCode : 'isOpposite: anotherPredicate\r\t| res |\r\tres:=anotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: anotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: anotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: anotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:22:41.789748+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [ ]	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2018-10-24T07:22:41.815737+02:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/23/2018 22:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t| res |\r\tres:=anotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: anotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: anotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: anotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:24:23.703117+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isOpposite:',			#protocol : #comparing,			#sourceCode : 'isOpposite: anotherPredicate\r\t| res |\r\tres:=anotherPredicate isKindOf: self class."checking the input"\r\tres:=res and:[(self isSameSymb: anotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: anotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: anotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isOpposite:',			#protocol : #comparing,			#sourceCode : 'isOpposite: anotherPredicate\r\t| res |\r\tres:=((anotherPredicate isPredicate) and:[(anotherPredicate isKindOf: self class) not])."checking the input"\r\tres:=res and:[(self isSameSymb: anotherPredicate)]."comparing the function symbol"\r\tres:=res and:[self isSameArity: anotherPredicate]."comparing arity"\r\tres:=res and:[(self isSameTerms: anotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/24/2018 07:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:27:05.943708+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r"\tTranscript show:terms ;cr."\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/9/2018 17:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t|t|\r\tt:=(self getSymb),\'(\'.\r\tterms do:[:each| t:=t,each prettyPrint. ] separatedBy:[t:=t,\',\'].\r\tt:=t,\')\'.\r\t^t.',			#stamp : 'pm 10/24/2018 07:27',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:53:48.192782+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #testing,			#sourceCode : 'isTautology\r\t^self error:\'todo\'.',			#stamp : 'pm 10/23/2018 21:35',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #testing,			#sourceCode : 'isTautology\r\tatomes do:[ :p1 |\r\t\tatomes do:[ :p2 | \r\t\t\tp1 isOpposite: p2\r\t\t\tifTrue:[^true].\r\t\t\t].\r\t\t].\r\t^false',			#stamp : 'pm 10/24/2018 07:53',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T07:55:05.442809+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #testing,			#sourceCode : 'isTautology\r\tatomes do:[ :p1 |\r\t\tatomes do:[ :p2 | \r\t\t\tp1 isOpposite: p2\r\t\t\tifTrue:[^true].\r\t\t\t].\r\t\t].\r\t^false',			#stamp : 'pm 10/24/2018 07:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Clause,				#isMetaSide : false			},			#name : #isTautology,			#protocol : #testing,			#sourceCode : 'isTautology\r\tatomes do:[ :p1 |\r\t\tatomes do:[ :p2 | \r\t\t\t(p1 isOpposite: p2)\r\t\t\tifTrue:[^true].\r\t\t\t].\r\t\t].\r\t^false',			#stamp : 'pm 10/24/2018 07:55',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:10:13.321102+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'MinimalOrderedSet',				#traitCompositionSource : '{}',				#definitionSource : 'MinimalOrderedSet subclass: #Resolvante\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Resolvante,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Resolvante class\r\tinstanceVariableNames: \'\''				},				#name : #'Resolvante class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Resolvante,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:10:51.243771+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #'resolvante:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante: clause1 with: clause2\r',			#stamp : 'pm 10/24/2018 10:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:11:00.218003+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #'resolvante:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante: clause1 with: clause2\r',			#stamp : 'pm 10/24/2018 10:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #'resolvante:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante: clause1 with: clause2\r\t',			#stamp : 'pm 10/24/2018 10:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:11:09.856118+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #'resolvante:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante: clause1 with: clause2\r\t',			#stamp : 'pm 10/24/2018 10:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #'resolvante:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante: clause1 with: clause2\r\t^self error:\'todo\'.',			#stamp : 'pm 10/24/2018 10:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:11:31.735737+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #resolvante,			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante',			#stamp : 'pm 10/24/2018 10:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:11:43.84414+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Resolvante,				#isMetaSide : false			},			#name : #resolvante,			#protocol : #'as yet unclassified',			#sourceCode : 'resolvante',			#stamp : 'pm 10/24/2018 10:11',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:12:58.871529+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\t"Résolvants stuff goes there"\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/23/2018 22:03',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c t |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\tsat do:[:c1|\r\t\t\t\t\tt:= Resolvante new.\r\t\t\t\t\tt resolvante: c1 with c.\r\t\t\t\t\tself addAll:(t resolvante).\r\t\t\t\t\t].\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/24/2018 10:12',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:13:05.748015+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c t |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\tsat do:[:c1|\r\t\t\t\t\tt:= Resolvante new.\r\t\t\t\t\tt resolvante: c1 with c.\r\t\t\t\t\tself addAll:(t resolvante).\r\t\t\t\t\t].\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/24/2018 10:12',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c t |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\tsat do:[:c1|\r\t\t\t\t\tt:= Resolvante new.\r\t\t\t\t\tt resolvante: c1 with: c.\r\t\t\t\t\tself addAll:(t resolvante).\r\t\t\t\t\t].\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/24/2018 10:13',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-24T10:13:14.361598+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c t |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\tsat do:[:c1|\r\t\t\t\t\tt:= Resolvante new.\r\t\t\t\t\tt resolvante: c1 with: c.\r\t\t\t\t\tself addAll:(t resolvante).\r\t\t\t\t\t].\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/24/2018 10:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #resolutionMethod,			#protocol : #resolution,			#sourceCode : 'resolutionMethod\r\t| sat c t |\r\tsat:=MinimalOrderedSet new.\r\t(clauses isEmpty)\r\twhileFalse: [ \r\t\tc:=clauses removeFirst.\r\t\tc isEmptyClause\r\t\tifTrue:[^true.]."Insatisfiable"\r"TODO"   ((c isTautology) or:[sat contains:c.])"ifTrue:[skip]"\r\t\t\tifFalse:[\r\t\t\t\tsat do:[:c1|\r\t\t\t\t\tt:= Resolvante new.\r\t\t\t\t\tt resolvante: c1 with: c.\r\t\t\t\t\tself addAll:t.\r\t\t\t\t\t].\r\t\t\t\tsat addLast:c.\r\t\t\t].\t\r\t\t].\r\t^false."satisfiable"',			#stamp : 'pm 10/24/2018 10:13',			#package : #_resolution_1erOrdre		}	}}