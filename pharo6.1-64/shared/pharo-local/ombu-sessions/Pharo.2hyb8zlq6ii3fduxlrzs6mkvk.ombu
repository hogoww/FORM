OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T11:39:16.346584+02:00' ],		#prior : OmReference [ 'Pharo.7abxc8ykz3uzd656fi1h5knxq', '328' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\t\t\r\tsetOfPairs do:[:each|\r\t\tmodified:=true.\r\t\tmodified whileTrue:[\r\t\t\tmodified:=false.\r\t\t\tprevious:=setOfPairs at:1.\r\t\t\tres:=previous unifyIt.\r\t\t\t(res=previous)\r\t\t\tifFalse:[modified:=true].\r\t\t\t]\r\t]',			#stamp : 'pm 10/15/2018 20:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\r\tmodified whileTrue:[\t\t\r\t\tsetOfPairs do:[:each |\r\t\t\tmodified:=true.\r\t\t\t\tmodified:=self TryOperations.\r\t\t\t]\r\t\t]\r\t',			#stamp : 'pm 10/17/2018 11:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T11:40:31.193383+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified previous res|\r\r\tmodified whileTrue:[\t\t\r\t\tsetOfPairs do:[:each |\r\t\t\tmodified:=true.\r\t\t\t\tmodified:=self TryOperations.\r\t\t\t]\r\t\t]\r\t',			#stamp : 'pm 10/17/2018 11:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified|\r\tmodified:=true.\r\tmodified whileTrue:[\t\t\r\t\tsetOfPairs do:[:each |\r\t\t\t\tmodified:=self TryOperations: each.\r\t\t\t]\r\t\t]\r\t',			#stamp : 'pm 10/17/2018 11:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T11:43:21.037369+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified |\r\tmodified:=false.\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 11:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T11:50:56.497171+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified |\r\tmodified:=false.\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 11:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified |\r\tmodified:=false.\r\t((aPair left isKindOf: ConstTerm) and:[aPair right isKindOf: ConstTerm])\r\tifTrue:[.modified:=true.]\r\tifFalse:[\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 11:50',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:08:56.538357+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or: [(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing aruty"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/15/2018 15:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or: [(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:08',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:09:04.355911+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or: [(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:09',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:10:12.179835+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:10',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:18:03.351661+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified |\r\tmodified:=false.\r\t((aPair left isKindOf: ConstTerm) and:[aPair right isKindOf: ConstTerm])\r\tifTrue:[.modified:=true.]\r\tifFalse:[\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 11:50',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:19:38.72545+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #comparing,			#sourceCode : 'decompose: aPair\r\t^self error show:\'todo FuncTerm->decompose:aPair\'.',			#stamp : 'pm 10/17/2018 12:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:19:54.377052+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #comparing,			#sourceCode : 'decompose: aPair\r\t^self error show:\'todo FuncTerm->decompose:aPair\'.',			#stamp : 'pm 10/17/2018 12:19',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:09.043141+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #'as yet unclassified',			#sourceCode : 'decompose: aPair\r\t^self error show:\'todo FuncTerm->decompose:aPair\'.',			#stamp : 'pm 10/17/2018 12:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:13.842985+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #unification	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:18.402814+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #initialization,			#sourceCode : 'UnifyMe\r\t|modified|\r\tmodified:=true.\r\tmodified whileTrue:[\t\t\r\t\tsetOfPairs do:[:each |\r\t\t\t\tmodified:=self TryOperations: each.\r\t\t\t]\r\t\t]\r\t',			#stamp : 'pm 10/17/2018 11:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #UnifyMe,			#protocol : #unification,			#sourceCode : 'UnifyMe\r\t|modified|\r\tmodified:=true.\r\tmodified whileTrue:[\t\t\r\t\tsetOfPairs do:[:each |\r\t\t\t\tmodified:=self TryOperations: each.\r\t\t\t]\r\t\t]\r\t',			#stamp : 'pm 10/17/2018 11:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:25.420994+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #'as yet unclassified',			#sourceCode : 'decompose: aPair\r\t^self error show:\'todo FuncTerm->decompose:aPair\'.',			#stamp : 'pm 10/17/2018 12:20',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'decompose:',			#protocol : #unification,			#sourceCode : 'decompose: aPair\r\t^self error show:\'todo FuncTerm->decompose:aPair\'.',			#stamp : 'pm 10/17/2018 12:20',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:27.447997+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #initialization,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:18',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:35.40198+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessing	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:20:44.316736+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessing	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:05.167852+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #add/remove	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:10.007997+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Value2:',			#protocol : #initialization,			#sourceCode : 'add: value1 Value2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 19:14',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:Value2:',			#protocol : #add/remove,			#sourceCode : 'add: value1 Value2: value2\r\tsetOfPairs add:(Pair left: value1 right: value2).',			#stamp : 'pm 10/15/2018 19:14',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:11.700838+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'addUnifier:',			#protocol : #initialization,			#sourceCode : 'addUnifier: anotherUnifier\r\tsetOfPairs merge: (anotherUnifier setOfPairs ).\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'addUnifier:',			#protocol : #add/remove,			#sourceCode : 'addUnifier: anotherUnifier\r\tsetOfPairs merge: (anotherUnifier setOfPairs ).\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:13.322897+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialization,			#sourceCode : 'add: aPair\r\tsetOfPairs add: aPair.\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'add:',			#protocol : #add/remove,			#sourceCode : 'add: aPair\r\tsetOfPairs add: aPair.\r\t^self',			#stamp : 'pm 10/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:22.682076+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Unifier\r\tinstanceVariableNames: \'setOfPairs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #Unifier,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Unifier,						#isMetaSide : false					},					#name : #setOfPairs,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Unifier class\r\tinstanceVariableNames: \'\''				},				#name : #'Unifier class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Unifier,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessors	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:25.667611+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'setOfPairs:',			#protocol : #initialization,			#sourceCode : 'setOfPairs: anotherSet\r\tsetOfPairs:=anotherSet.\r\t^self.',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'setOfPairs:',			#protocol : #accessors,			#sourceCode : 'setOfPairs: anotherSet\r\tsetOfPairs:=anotherSet.\r\t^self.',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:28.0389+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #setOfPairs,			#protocol : #initialization,			#sourceCode : 'setOfPairs\r\t^setOfPairs',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #setOfPairs,			#protocol : #accessors,			#sourceCode : 'setOfPairs\r\t^setOfPairs',			#stamp : 'pm 10/15/2018 16:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:21:52.059684+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:18',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:24:42.387976+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[\r\t\t\t\tself decompose:aPair.\r\t\t\t\tmodified:=true.\r\t\t\t\t]"Decompose is possible"\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t\t]\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:29:55.663329+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #testing,			#sourceCode : 'isSameSymb: predicate\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:29',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:30:15.37066+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSamePredicate:predicate) &\r\t(self isSameVar:predicate).',			#stamp : 'pm 10/5/2018 16:13',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSameSymb:predicate) &\r\t(self isSameVar:predicate).',			#stamp : 'pm 10/17/2018 12:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:31:17.869679+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #testing,			#sourceCode : 'isSameSymb: predicate\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #testing,			#sourceCode : 'isSameSymb: predicate\r\t"was isSamePredicate"\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:31:26.647828+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePredicate:',			#protocol : #testing,			#sourceCode : 'isSamePredicate: predicate\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/5/2018 16:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSamePredicate:',			#protocol : #testing,			#sourceCode : 'isSamePredicate: predicate\r\t"deprecated."\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:32:28.069582+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSameSymb:predicate) &\r\t(self isSameVar:predicate).',			#stamp : 'pm 10/17/2018 12:30',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isTheSame:',			#protocol : #testing,			#sourceCode : 'isTheSame: predicate\r\t^(self isSameSymb:predicate) \r\tand:[(self isSameVar:predicate)].',			#stamp : 'pm 10/17/2018 12:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:36:05.897376+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\tTranscript show: self getSymb.\r\tTranscript show: anotherFuncTerm getSymb.\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:37:15.517931+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\tTranscript show: self getSymb.\r\tTranscript show: anotherFuncTerm getSymb.\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:36',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:anotherFuncTerm\r\t^(self getSymb)=(anotherFuncTerm getSymb).',			#stamp : 'pm 10/17/2018 12:37',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:38:54.852956+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self getSymb)=(anotherFuncTerm getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:38:58.645175+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:38',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:38',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:39:43.338194+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherFuncTerm arity).]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:38',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[self isSameArity: anotherFuncTerm]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:39:58.277343+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameArity:',			#protocol : #comparing,			#sourceCode : 'isSameArity:anotherFuncTerm\r\t^(self arity)=(anotherFuncTerm arity).',			#stamp : 'pm 10/17/2018 12:39',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:40:40.40892+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[self isSameArity: anotherFuncTerm]."comparing arity"\r\tres:=res or:[(self terms) = (anotherFuncTerm terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:39',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherFuncTerm\r\t| res |\r\tres:=anotherFuncTerm isKindOf: FuncTerm."checking the input"\r\tres:=res or:[(self isSameSymb: anotherFuncTerm)]."comparing the function symbol"\r\tres:=res or:[self isSameArity: anotherFuncTerm]."comparing arity"\r\tres:=res or:[(self isSameTerms: anotherFuncTerm).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:40:57.488086+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherFuncTerm\r^(self terms) = (anotherFuncTerm terms).',			#stamp : 'pm 10/17/2018 12:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:40:58.743017+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherFuncTerm\r^(self terms) = (anotherFuncTerm terms).',			#stamp : 'pm 10/17/2018 12:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: anotherFuncTerm\r\t^(self terms) = (anotherFuncTerm terms).',			#stamp : 'pm 10/17/2018 12:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:41:18.689894+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t\t]\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t\t"FAIRE UN THROW ERROR & CATCH"\r\t\t\t]\r\t\t\tleft arity.\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:41:26.782435+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t\t"FAIRE UN THROW ERROR & CATCH"\r\t\t\t]\r\t\t\tleft arity.\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:41',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'tryOperation:',			#protocol : #unification,			#sourceCode : 'tryOperation: aPair\r\t| modified left right |\r\tleft:=aPair left."syntaxic sugar"\r\tright:=aPair right.\r\r\tmodified:=false.\r\t((left isKindOf: ConstTerm) and:[right isKindOf: ConstTerm])\r\tifTrue:[\r\t\t(left = right) "check underlying symbols, and that"\r\t\tifTrue:[setOfPairs remove:aPair. modified:=true.].]"delete"\r\tifFalse:[\r\t\t(((left isKindOf: FuncTerm) and:[right isKindOf: FuncTerm])\r\t\tor:[(left isKindOf: Predicate) and:[right isKindOf: Predicate]])\r\t\tifTrue:["try a decompose or conflict "\r\t\t\t(left isSameSymb: right)\r\t\t\tifTrue:[self decompose:aPair. modified:=true.]"Decompose is possible"\r\t\t\tifFalse:["Isn\'t the sameSymbol, conflict ->"\r\t\t\t\t"FAIRE UN THROW ERROR & CATCH"\r\t\t\t]\r\t\t\t\r\t\t\t"STOPPED HERE"\r\t\t\t\r\t\t\tleft arity.\r\t\t\t.modified:=true.\r\t\t\t]\r\t\tifFalse:[\r\t\t\t].\r\t\t].\r\t\r\t\r\t^modified.',			#stamp : 'pm 10/17/2018 12:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:42:56.685423+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameTerms:',			#protocol : #comparing,			#sourceCode : 'isSameTerms: AnotherPredicate\r\t^(self terms) = (AnotherPredicate terms).',			#stamp : 'pm 10/17/2018 12:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:43:03.799787+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #testing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:43:03.804067+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb: predicate\r\t"was isSamePredicate"\r\t^(self getSymb)=(predicate getSymb)',			#stamp : 'pm 10/17/2018 12:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'isSameSymb:',			#protocol : #comparing,			#sourceCode : 'isSameSymb:AnotherPredicate\r\t^(self getSymb)=(AnotherPredicate getSymb).',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-10-17T12:43:31.35872+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=anotherPredicate\r\t| res |\r\tres:=anotherPredicate isKindOf: Predicate."check class, and polarity"\r\tres:=res or:[.].\r\tres:=res or: [(self getSymb)=(anotherPredicate getSymb).]."comparing the function symbol"\r\tres:=res or:[(self arity)=(anotherPredicate arity).]."comparing aruty"\r\tres:=res or:[(self terms) = (anotherPredicate terms).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/15/2018 15:44',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '=AnotherPredicate\r\t| res |\r\tres:=AnotherPredicate isKindOf: Predicate."checking the input"\r\tres:=res or:[(self isSameSymb: AnotherPredicate)]."comparing the function symbol"\r\tres:=res or:[self isSameArity: AnotherPredicate]."comparing arity"\r\tres:=res or:[(self isSameTerms: AnotherPredicate).]."we let the superclass LinkedList check for the correct terms"\r\t^res.',			#stamp : 'pm 10/17/2018 12:43',			#package : #_resolution_1erOrdre		}	}}