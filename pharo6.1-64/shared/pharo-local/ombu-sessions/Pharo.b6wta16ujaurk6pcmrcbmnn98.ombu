OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T10:42:06.841626+01:00' ],		#prior : OmReference [ 'Pharo.8bu0bw64b1b9kbwgcrhv3h0e0', '51' ],		#self : OmReference [ '1' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ 'b6wta1axg6icmpz0zwq9ub65e', '1' ]		]	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2018-12-07T10:42:06.858932+01:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Predicate class',				#isMetaSide : true			},			#name : #'new:variable:',			#protocol : #'instance creation',			#sourceCode : 'new: symb variable: aVar\r\t"Standart new for variadic predicate"\r\t"symbl is the name of the predicate, as a string"\r\t"aLinkedListOfTerm has to be a LinkedList of kind of Abstract term, depending on when you want to use it for"\r\t"if it\'s pre skolemnisation, you should give Terms, otherwise a specialisation of a Abstract Terms\r\t(functerm/constterm/linkedterm)"\r\t\r\t^self basicNew initialize: symb Variable:aVar.',			#stamp : 'pm 12/7/2018 10:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T11:49:26.69916+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 9/30/2018 09:09',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 11:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T11:49:35.86219+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 11:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 11:49',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T11:52:09.224093+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tSkolemnTrace:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\t',			#stamp : 'pm 11/27/2018 23:34',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tdebug:=false.\r\tSkolemnTrace:=false.\r\tdebugUnification:=false.\r\tresolutionTrace:=true.\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/7/2018 11:52',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:04:12.50026+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 11/27/2018 07:53',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\tself halt.\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:04:23.732611+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\tself halt.\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:04:49.309146+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"comparaison operator for automated testing"\r\t^SubclassResponsibility ',			#stamp : 'pm 11/27/2018 10:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"comparaison operator for automated testing"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:04:57.542871+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"comparaison operator for automated testing"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'isSameForTesting:',			#protocol : #comparing,			#sourceCode : 'isSameForTesting:prop2\r\t"comparaison operator for automated testing"\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:05:05.557029+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 11:49',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:05:12.237641+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'matchPatternWith:',			#protocol : #matching,			#sourceCode : 'matchPatternWith: prop\r\t"Match self and prop. to end a branch of the pattern\r\tuse a random variable\r\tvar == whatever\r\tanythingElse == anythingElse only :  !n => T == !(A /\\ B)=> T for example\r\t"\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:05:25.163483+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 11/26/2018 21:25',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:05:37.067644+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:06:13.477497+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^SubclassResponsibility.',			#stamp : 'pm 11/26/2018 20:10',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:06:23.729343+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\tself halt.\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #'Herbrandise:CorrespondingValue:',			#protocol : #Skoleminsation,			#sourceCode : 'Herbrandise: setOfLinkedVar CorrespondingValue: aMap\r\t"cf Prop::HerbranSkolemDocu"\r\t^SubclassResponsibility.',			#stamp : 'pm 12/7/2018 13:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:06:33.177038+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 9/29/2018 08:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\rself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:06',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:07:11.402935+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\rself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:06',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:07',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:26:15.489256+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\tself halt.\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:26:26.942048+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\tself halt.\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #getSymb,			#protocol : #accessing,			#sourceCode : 'getSymb\r\t"All the classes should have a symbol to represent them graphically"\r\t^SubclassResponsibility. ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:26:41.28784+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:07',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:26:52.045722+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #isClause,			#protocol : #clausification,			#sourceCode : 'isClause\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:26',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T13:48:09.960438+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Predicate new: \'P\' variable: \'a\').\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: \'a\')).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 10/5/2018 16:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #testingMatch,			#protocol : #testing,			#sourceCode : 'testingMatch\r\t|pattern prop|\r\r   "Transcript clear."\r\tTranscript show: \'Testing matching related stuff\'.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (Predicate new: \'P\' variable: (Term new:\'a\')).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: (Term new:\'a\'))).\r\tpattern matchingUnitTest: prop.\r\t\r\tpattern:= Imply new: (True_Const new) rightProp: (False_Const  new).\r\tprop:= Imply new: (True_Const new) rightProp: (Not new:(Predicate new: \'P\' variable: (Term new: \'a\'))).\r\tpattern matchingUnitTest: prop.',			#stamp : 'pm 12/7/2018 13:48',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T14:15:05.512032+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 13:05',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 14:15',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-07T14:15:22.295933+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\tself halt.\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 14:15',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"return the internal representation of a Proposition"\r\t^SubclassResponsibility ',			#stamp : 'pm 12/7/2018 14:15',			#package : #_resolution_1erOrdre		}	}}