OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:20:41.675849+01:00' ],		#prior : OmReference [ 'Pharo.e7oncsb8gl40p2quh1alneff1', '163' ],		#self : OmReference [ '1' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ClausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #ClausificationTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @7				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ClausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @31,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #ClausificationTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @31				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:20:49.296921+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #resolutionTrace,			#protocol : #'as yet unclassified',			#sourceCode : 'resolutionTrace\r\t"accessor, it\'s also used in Clausal Form during the resolution process."\r\t^resolutionTrace',			#stamp : 'pm 12/15/2018 13:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #resolutionTrace,			#protocol : #accessing,			#sourceCode : 'resolutionTrace\r\t"accessor, it\'s also used in Clausal Form during the resolution process."\r\t^resolutionTrace',			#stamp : 'pm 12/15/2018 13:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:21:01.191373+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tclausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:21',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:22:06.40867+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\tClausificationTrace ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 12/15/2018 16:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\tclausificationTrace ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 12/15/2018 16:22',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:23:28.402528+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'replacement:replaced:by:',			#protocol : #unification,			#sourceCode : 'replacement:aTerm replaced:x by:t\r\t((aTerm isKindOf: FuncTerm)or:[aTerm isKindOf: Predicate])\r\tifTrue:[\r\t\t^aTerm replace:x by:t.\r\t\t]"if it\'s something else than a functerm, "\r\tifFalse:[\r\t\t(aTerm=x)\r\t\tifTrue:[^t]\r\t\tifFalse:[^aTerm].\r\t\t].\r ',			#stamp : 'pm 10/21/2018 09:16',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unifier,				#isMetaSide : false			},			#name : #'replacement:replaced:by:',			#protocol : #unification,			#sourceCode : 'replacement:aTerm replaced:x by:t\r\t((aTerm isFuncTerm)or:[aTerm isPredicate])\r\tifTrue:[\r\t\t^aTerm replace:x by:t.\r\t\t]"if it\'s something else than a functerm, "\r\tifFalse:[\r\t\t(aTerm=x)\r\t\tifTrue:[^t]\r\t\tifFalse:[^aTerm].\r\t\t].\r ',			#stamp : 'pm 12/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:23:55.600896+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^self getSymb,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\' (\']),\r\t\toperand prettyPrint,\r\t\t((operand isKindOf: Atome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 11/26/2018 21:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Unary,				#isMetaSide : false			},			#name : #prettyPrint,			#protocol : #printing,			#sourceCode : 'prettyPrint\r\t"toString"\r\t^self getSymb,\r\t\t((operand isAtome) ifTrue:[\' \'] ifFalse:[\' (\']),\r\t\toperand prettyPrint,\r\t\t((operand isAtome) ifTrue:[\' \'] ifFalse:[\') \']).',			#stamp : 'pm 12/15/2018 16:23',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:24:01.551331+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize:aTerm\r\t"initialize an UnaryTerm with a term as argument"\r\t(aTerm isKindOf: Term)\r\tifFalse:[^self error:\'Takes only Terms as parameters. This is a\', (aTerm class). ]\r\tifTrue:[term:=aTerm].',			#stamp : 'pm 10/28/2018 15:01',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnaryTerm,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialize,			#sourceCode : 'initialize:aTerm\r\t"initialize an UnaryTerm with a term as argument"\r\t(aTerm isTerm)\r\tifFalse:[^self error:\'Takes only Terms as parameters. This is a\', (aTerm class). ]\r\tifTrue:[term:=aTerm].',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:24:08.790603+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'addTerm:',			#protocol : #adding,			#sourceCode : 'addTerm: aTerm\r\t"add aTerm to the list of this predicate or function\'s list."\r\tself assert:(aTerm isKindOf: AbstractTerm).\r\tterms add:aTerm.',			#stamp : 'pm 10/28/2018 14:29',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FuncTerm,				#isMetaSide : false			},			#name : #'addTerm:',			#protocol : #adding,			#sourceCode : 'addTerm: aTerm\r\t"add aTerm to the list of this predicate or function\'s list."\r\tself assert:(aTerm isAbstractTerm).\r\tterms add:aTerm.',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:24:15.834909+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: aClause\r\t"add a new clause in self."\r\t(aClause isKindOf: Clause)\r\tifTrue: [ super add: aClause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].\r\t^self "enable chaining operation"',			#stamp : 'pm 10/28/2018 15:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: aClause\r\t"add a new clause in self."\r\t(aClause isClause)\r\tifTrue: [ super add: aClause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].\r\t^self "enable chaining operation"',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:24:21.857643+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\t"Standart initialization for variadic predicate"\r\t"symbl is the name of the predicate, as a string"\r\t"aLinkedListOfTerm has to be a LinkedList of kind of Abstract term, depending on when you want to use it for"\r\t"if it\'s pre skolemnisation, you should give Terms, otherwise a specialisation of a Abstract Terms\r\t(functerm/constterm/linkedterm)"\r\t\r\tsymb:=symbl.\r\taLinkedListOfTerm do:[:each| \r\t\t(each isKindOf: AbstractTerm)\r\t\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\t\t].\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 11/28/2018 01:11',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variables:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variables: aLinkedListOfTerm\r\t"Standart initialization for variadic predicate"\r\t"symbl is the name of the predicate, as a string"\r\t"aLinkedListOfTerm has to be a LinkedList of kind of Abstract term, depending on when you want to use it for"\r\t"if it\'s pre skolemnisation, you should give Terms, otherwise a specialisation of a Abstract Terms\r\t(functerm/constterm/linkedterm)"\r\t\r\tsymb:=symbl.\r\taLinkedListOfTerm do:[:each| \r\t\t(each isAbstractTerm)\r\t\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\t\t].\r\tterms:=aLinkedListOfTerm.',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:24:26.520762+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\t"Standart initialization for unary predicate"\r\t"symbl is the name of the predicate, as a string"\r\t"aTerm has to be a kind of Abstract term, depending on when you want to use it for"\r\t"if it\'s pre skolemnisation, you should give a Term, otherwise a specialisation of a Abstract Term\r\t(functerm/constterm/linkedterm)"\r\r\t(aTerm isKindOf: AbstractTerm)\r\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\tsymb:=symbl.\r\tterms:=LinkedListFix new.\r\tterms add:aTerm.\r',			#stamp : 'pm 11/28/2018 00:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Predicate,				#isMetaSide : false			},			#name : #'initialize:Variable:',			#protocol : #initialization,			#sourceCode : 'initialize: symbl Variable: aTerm\r\t"Standart initialization for unary predicate"\r\t"symbl is the name of the predicate, as a string"\r\t"aTerm has to be a kind of Abstract term, depending on when you want to use it for"\r\t"if it\'s pre skolemnisation, you should give a Term, otherwise a specialisation of a Abstract Term\r\t(functerm/constterm/linkedterm)"\r\r\t(aTerm isAbstractTerm)\r\tifFalse:[Error new:\'Predicates needs terms as arguments.\'].\r\tsymb:=symbl.\r\tterms:=LinkedListFix new.\r\tterms add:aTerm.\r',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:30:50.741766+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testPositiveFactorisationConstOnLink,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testPositiveFactorisationConstOnLink\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')))\r\t rightProp: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\'))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))))\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 13:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testPositiveFactorisationConstOnLink,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testPositiveFactorisationConstOnLink\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\')))\r\t rightProp: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\'))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))));\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 16:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:30:56.581768+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testNegativeFactorisationLinkedOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testNegativeFactorisationLinkedOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\'))))\r\t rightProp: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\')))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(NotPredicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))))\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 14:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testNegativeFactorisationLinkedOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testNegativeFactorisationLinkedOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\'))))\r\t rightProp: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\')))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(NotPredicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))));\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 16:30',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:01.846388+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testPositiveFactorisationLinkedOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testPositiveFactorisationLinkedOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\')))\r\t rightProp: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))))\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 14:47',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testPositiveFactorisationLinkedOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testPositiveFactorisationLinkedOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\')))\r\t rightProp: (Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'y\'))));\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 16:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:05.529034+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testNegativeFactorisationConstOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testNegativeFactorisationConstOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Not new:(Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))))\r\t rightProp: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\')))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(NotPredicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))))\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 14:54',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestUnification,				#isMetaSide : false			},			#name : #testNegativeFactorisationConstOnLinked,			#protocol : #'tests - binary factorisation',			#sourceCode : 'testNegativeFactorisationConstOnLinked\r\t| c fc r expected |\r\t"Unifiable positive const & linked predicate"\r\tc:=\tOr new: (Not new:(Predicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))))\r\t rightProp: (Not new:(Predicate new: \'P\' variable: (LinkedTerm new:(Term new:\'x\')))).\r\r\tfc:=ClausalForm new:c.\r\tr:=Resolvante new.\r\t\t\r\texpected:=Resolvante new\r\t\tadd:(Clause new:(NotPredicate new: \'P\' variable: (ConstTerm new:(Term new:\'a\'))));\r\t\tyourself.\r\t\t \r\tself assert: (r factorisation: (fc at:1)) equals:expected.\r',			#stamp : 'pm 12/15/2018 16:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:38.999672+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #adding,			#sourceCode : 'addAll: clausifiedProp\r\r\t"badly designed, NEEDS a refactor."\t\r\t\r\t\t\t\r\t((clausifiedProp  isOr) | (clausifiedProp isAtome))"If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isNot)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isAtome)\r\t\t\tifTrue:[^self add:(Clause new:clausifiedProp).]\r\t\t\tifFalse:[^Error new:\'A not isn\'\'t englobing an atome.\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isAnd)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\t\tError new: \'Tried to add a non clause object to a clausaleForm.\'.].\r\t\t\t].\r\t\t].',			#stamp : 'pm 10/28/2018 15:19',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #adding,			#sourceCode : 'addAll: clausifiedProp\r\r\t"badly designed, NEEDS a refactor."\t\r\t\r\t\t\t\r\t((clausifiedProp  isOr) | (clausifiedProp isAtome))"If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isNot)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isAtome)\r\t\t\tifTrue:[^self add:(Clause new:clausifiedProp);yourself.]\r\t\t\tifFalse:[^Error new:\'A not isn\'\'t englobing an atome.\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isAnd)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\t\tError new: \'Tried to add a non clause object to a clausaleForm.\'.].\r\t\t\t].\r\t\t].',			#stamp : 'pm 12/15/2018 16:31',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:42.840224+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestresolutionerOrdre\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ManifestresolutionerOrdre,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestresolutionerOrdre class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestresolutionerOrdre class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestresolutionerOrdre,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:42.850254+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestresolutionerOrdre\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre\''			},			#name : #ManifestresolutionerOrdre,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestresolutionerOrdre class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestresolutionerOrdre class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestresolutionerOrdre,					#isMetaSide : false				},				#parent : @7,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:31:49.133963+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ManifestresolutionerOrdre ))'	}}OmEntry {	#tags : {		#author : 'pm',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2018-12-15T16:31:49.228912+01:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestresolutionerOrdre\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #_resolution_1erOrdre'			},			#name : #ManifestresolutionerOrdre,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestresolutionerOrdre class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteManifestresolutionerOrdre class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteManifestresolutionerOrdre,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #_resolution_1erOrdre,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:32:50.100084+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #adding,			#sourceCode : 'addAll: clausifiedProp\r\r\t"badly designed, NEEDS a refactor."\t\r\t\r\t\t\t\r\t((clausifiedProp  isOr) | (clausifiedProp isAtome))"If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isNot)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isAtome)\r\t\t\tifTrue:[^self add:(Clause new:clausifiedProp);yourself.]\r\t\t\tifFalse:[^Error new:\'A not isn\'\'t englobing an atome.\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isAnd)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\t\tError new: \'Tried to add a non clause object to a clausaleForm.\'.].\r\t\t\t].\r\t\t].',			#stamp : 'pm 12/15/2018 16:31',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'addAll:',			#protocol : #adding,			#sourceCode : 'addAll: clausifiedProp\r\r\t"badly designed, NEEDS a refactor."\t\r\t\r\t\t\t\r\t((clausifiedProp  isOr) | (clausifiedProp isAtome))"If i\'m in a or, there\'s only or(s) under him."\r\tifTrue:[self add: (Clause new:clausifiedProp)]\r\tifFalse:[\r\t\t(clausifiedProp isNot)\r\t\tifTrue:[\r\t\t\t((clausifiedProp operand) isAtome)\r\t\t\tifTrue:[^self add:(Clause new:clausifiedProp).]\r\t\t\tifFalse:[^Error new:\'A not isn\'\'t englobing an atome.\'.].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t(clausifiedProp isAnd)\r\t\t\tifTrue:[\r\t\t\t\tself addAll: (clausifiedProp left).\r\t\t\t\tself addAll: (clausifiedProp right).\r\t\t\t\t]\r\t\tifFalse:[\r\t\t\tError new: \'Tried to add a non clause object to a clausaleForm.\'.].\r\t\t\t].\r\t\t].',			#stamp : 'pm 12/15/2018 16:32',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:36:37.279919+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: aClause\r\t"add a new clause in self."\r\t(aClause isClause)\r\tifTrue: [ super add: aClause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].\r\t^self "enable chaining operation"',			#stamp : 'pm 12/15/2018 16:24',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClausalForm,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: aClause\r\t"add a new clause in self."\r\t(aClause isKindOf: Clause)\r\tifTrue: [ super add: aClause ]\r\tifFalse:[Error new: \'Tried to add a non clause object to a clausaleForm\'].\r\t^self "enable chaining operation"',			#stamp : 'pm 12/15/2018 16:36',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:40:09.874677+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'clausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #clausificationTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @7				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'clausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @31,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #clausificationTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @31				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:40:39.907744+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tclausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:21',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:40',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:41:16.013599+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t\r\t| t |\r\tt:=nil.\r \t(AndPatternFalse matchPatternWith: self)\r\tifTrue:[t:=right]\r\tifFalse:[\r\t\t(AndPatternFalseSym matchPatternWith: self)\r\t\tifTrue:[t:=left]\r\t\tifFalse:[\r\t\t\t(AndPatternTrue matchPatternWith: self)\r\t\t\tifTrue:[t:=left]\r\t\t\tifFalse:[\r\t\t\t\t(AndPatternTrueSym matchPatternWith: self)\r\t\t\t\tifTrue:[t:=right]\r\t\t\t\tifFalse:[]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\r\t\t(t isNil)\r\t\tifTrue:[ \r\t\t\tclausificationTrace ifTrue:[Transcript show:\'in And\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\tself right:(right clausification).\r\t\t\t^self\r\t\t\t]\r\t\tifFalse:[\r\t\t\tclausificationTrace  ifTrue:[Transcript show:\'in And2\';show: t prettyPrint;cr.].\r\t\t\t^t\r\t\t\t]. ',			#stamp : 'pm 12/15/2018 16:00',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #And,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t\r\t| t |\r\tt:=nil.\r \t(AndPatternFalse matchPatternWith: self)\r\tifTrue:[t:=right]\r\tifFalse:[\r\t\t(AndPatternFalseSym matchPatternWith: self)\r\t\tifTrue:[t:=left]\r\t\tifFalse:[\r\t\t\t(AndPatternTrue matchPatternWith: self)\r\t\t\tifTrue:[t:=left]\r\t\t\tifFalse:[\r\t\t\t\t(AndPatternTrueSym matchPatternWith: self)\r\t\t\t\tifTrue:[t:=right]\r\t\t\t\tifFalse:[]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\r\t\t(t isNil)\r\t\tifTrue:[ \r\t\t\tClausificationTrace ifTrue:[Transcript show:\'in And\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\tself right:(right clausification).\r\t\t\t^self\r\t\t\t]\r\t\tifFalse:[\r\t\t\tClausificationTrace  ifTrue:[Transcript show:\'in And2\';show: t prettyPrint;cr.].\r\t\t\t^t\r\t\t\t]. ',			#stamp : 'pm 12/15/2018 16:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:41:22.755283+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t| t |\r\tt:=And new: (Or new: (self left) rightProp: (self right))\r\t\t rightProp: (Or new:(Not new: (self left)) rightProp:(Not new: (self right))).\r\tclausificationTrace ifTrue:[Transcript show:\'in equal\';show: t prettyPrint;cr.].\r\t^t.',			#stamp : 'pm 12/12/2018 14:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Equal,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t| t |\r\tt:=And new: (Or new: (self left) rightProp: (self right))\r\t\t rightProp: (Or new:(Not new: (self left)) rightProp:(Not new: (self right))).\r\tClausificationTrace ifTrue:[Transcript show:\'in equal\';show: t prettyPrint;cr.].\r\t^t.',			#stamp : 'pm 12/15/2018 16:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:41:27.037024+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t|t|\r\tt:=Or new: (Not new:left)  rightProp: right.\r\tclausificationTrace ifTrue:[Transcript show:\'in Imply\';show: t prettyPrint;cr.].\r\t^t.',			#stamp : 'pm 12/12/2018 14:08',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Imply,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t|t|\r\tt:=Or new: (Not new:left)  rightProp: right.\r\tClausificationTrace ifTrue:[Transcript show:\'in Imply\';show: t prettyPrint;cr.].\r\t^t.',			#stamp : 'pm 12/15/2018 16:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:41:41.394793+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t| t |\r\tt:=nil.\r \t(OrPatternFalse matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t(OrPatternFalseSym matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t(OrPatternTrue matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t(OrPatternTrueSym matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t(OrPatternAnd matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t(OrPatternAndSym matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\r\t\t(t isNil)\r\t\tifTrue:[\r\t\t\tclausificationTrace ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\tself right:(right clausification).\r\t\t\t^self\r\t\t\t]\r\t\t ifFalse:[\r\t\t\tclausificationTrace ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t^t\r\t\t\t]',			#stamp : 'pm 12/15/2018 15:57',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Or,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t| t |\r\tt:=nil.\r \t(OrPatternFalse matchPatternWith: self)\r\tifTrue:[t:=left]\r\tifFalse:[\r\t\t(OrPatternFalseSym matchPatternWith: self)\r\t\tifTrue:[t:=right]\r\t\tifFalse:[\r\t\t\t(OrPatternTrue matchPatternWith: self)\r\t\t\tifTrue:[t:=right]\r\t\t\tifFalse:[\r\t\t\t\t(OrPatternTrueSym matchPatternWith: self)\r\t\t\t\tifTrue:[t:=left]\r\t\t\t\tifFalse:[\r\t\t\t\t\t(OrPatternAnd matchPatternWith: self)\r\t\t\t\t\tifTrue:[t:=And new: (Or new: ((self left) left) rightProp: (self right)) \r\t\t\t\t\t\t\t\t  rightProp: (Or new:((self left) right) rightProp: (self right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t(OrPatternAndSym matchPatternWith: self)\r\t\t\t\t\t\tifTrue:[t:=And new:(Or new: (self left) rightProp: ((self right) left)) \r\t\t\t\t\t\t\t\t\t  rightProp: (Or new: (self left) rightProp: ((self right) right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t]\r\t\t\t]\r\t\t].\r\t\r\t\t(t isNil)\r\t\tifTrue:[\r\t\t\tClausificationTrace ifTrue:[Transcript show:\'in Or\';show: self prettyPrint;cr.].\r\t\t\tself left:(left clausification).\r\t\t\tself right:(right clausification).\r\t\t\t^self\r\t\t\t]\r\t\t ifFalse:[\r\t\t\tClausificationTrace ifTrue:[Transcript show:\'in Or2\';show: t prettyPrint;cr.].\r\t\t\t\t^t\r\t\t\t]',			#stamp : 'pm 12/15/2018 16:41',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:42:03.100608+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t(NotPatternNot matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t(NotPatternTrue matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t(NotPatternFalse matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t(NotPatternOr matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t(NotPatternAnd matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil)\r\t\tifTrue:[clausificationTrace  ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\tself operand:(operand clausification).\r\t\t\t^self\r\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tclausificationTrace ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t^t\r\t\t\t\t].',			#stamp : 'pm 12/15/2018 16:04',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Not,				#isMetaSide : false			},			#name : #clausification,			#protocol : #clausification,			#sourceCode : 'clausification\r\t"does an iteration of clausification the current proposition"\r\t\r\t"For this one, we have some different possible pattern."\r\t"/!\\ since we\'re in an unary operator, the pattern doesn\'t start at self, but at operand"\r\t| t |\r\tt:=nil.\r\t(NotPatternNot matchPatternWith: operand)\r\tifTrue:[t:=operand operand.]\r\tifFalse:[\r\t\t\t(NotPatternTrue matchPatternWith: operand)\r\t\t\tifTrue:[t:=False_Const new]\r\t\t\tifFalse:[\r\t\t\t\t(NotPatternFalse matchPatternWith: operand)\r\t\t\t\tifTrue:[t:=True_Const new]\r\t\t\t\tifFalse:[\r\t\t\t\t\t(NotPatternOr matchPatternWith: operand)\r\t\t\t\t\tifTrue:[t:=And new: (Not new:(operand left)) rightProp:(Not new:(operand right))]\r\t\t\t\t\tifFalse:[\r\t\t\t\t\t\t(NotPatternAnd matchPatternWith: operand)\r\t\t\t\t\t\tifTrue:[t:=Or new: (Not new:(operand left)) rightProp:(Not new:(operand right))].\r\t\t\t\t\t\t]\r\t\t\t\t\t]\r\t\t\t\t ]\r\t\t\t].\r\t\t(t isNil)\r\t\tifTrue:[\r\t\t\tClausificationTrace  ifTrue:[Transcript show:\'in Not\';show: self prettyPrint;cr.].\r\t\t\tself operand:(operand clausification).\r\t\t\t^self\r\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\tClausificationTrace ifTrue:[Transcript show:\'in Not2\';show: t prettyPrint;cr.].\r\t\t\t\t^t\r\t\t\t\t].',			#stamp : 'pm 12/15/2018 16:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:42:23.81375+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=false.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:40',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=true.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:42:51.623144+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=true.\r\tskolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:42',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Prop class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialisation of the Prop class"\r\t"It\'s mostly about activating visual variables, to see the traces process"\r\r\t"Variable to activate traces or not."\r\tClausificationTrace:=true.\r\tSkolemnTrace:=false.\r\tunificationTrace:=false.\r\tresolutionTrace:=false.\r\t\r\t"Used to provided context during the textual tests available in the Prop class "\r\ttestNumber:=0.\r\t',			#stamp : 'pm 12/15/2018 16:42',			#package : #_resolution_1erOrdre		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:42:55.708522+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ClausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @7,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #ClausificationTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @7				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Prop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ClausificationTrace resolutionTrace skolemnTrace testNumber unificationTrace\'\r\tpoolDictionaries: \'\'\r\tcategory: \'_resolution_1erOrdre-Propositions\''			},			#name : #Prop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Prop class\r\tinstanceVariableNames: \'\''				},				#name : #'Prop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Prop,					#isMetaSide : false				},				#parent : @31,				#content : 'Abstract class which represent a Logical proposition,  First order proposition, and propositional logic.\r\rI allow a proposition to be clausified.\rI allow propositions of First order to be skolemnise, then clausified\r\rPublic API:\r- fullClausification -> return a Clausified version of  a Proposition\r- StartSkolemnise -> return a Skolemnised version of a first order proposition (self)\r- prettyPrint -> returns a string representing my  internal state.',				#stamp : 'pm 12/15/2018 15:14'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #ClausificationTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #resolutionTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #skolemnTrace,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #testNumber,					#parent : @31				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #Prop,						#isMetaSide : false					},					#name : #unificationTrace,					#parent : @31				}			],			#category : #_resolution_1erOrdre-Propositions,			#package : #_resolution_1erOrdre,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-12-15T16:43:29.704486+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\tclausificationTrace ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 12/15/2018 16:22',			#package : #_resolution_1erOrdre		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Prop,				#isMetaSide : false			},			#name : #fullClausification,			#protocol : #clausification,			#sourceCode : 'fullClausification\r\t| t |\r\tt:=self clausification.\r\t[t isClause] whileFalse:[\t\r\t\tClausificationTrace ifTrue:[Transcript show: t prettyPrint; show: t isClause;cr.].\r\t\tt:=t clausification.].\r\t^t',			#stamp : 'pm 12/15/2018 16:43',			#package : #_resolution_1erOrdre		}	}}