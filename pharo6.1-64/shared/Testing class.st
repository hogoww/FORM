TestCase subclass: #Skolemn_test	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_resolution_1erOrdre-Testing class'!!Skolemn_test methodsFor: 'basic' stamp: 'pm 11/5/2018 19:32'!testBasicOnlyPredicate	| p res expected terms terms2 |	terms:=LinkedList new add:(Term new:'x');add:(Term new:'y');add:(Term new:'z');yourself.		p:=ForAll new: 'x' Property: (Exists new: 'y' Property: (ForAll new: 'z' Property: (Predicate new: 'P' fromList: terms ))).	res:=p StartSkolemnisation.			terms2:=LinkedList new add:(LinkedTerm new:(Term new:'x'));add:(FuncTerm newFunc: ((LinkedTerm new:(Term new:'x'))));add:(LinkedTerm new:(Term new:'z'));yourself.	expected:=Predicate new: 'P' fromList: terms2.		^self assert:(res isSameForTesting: expected).! !!Skolemn_test methodsFor: 'basic' stamp: 'pm 11/5/2018 19:16'!testImplyAndNestedForAllWithSameNameForConstAndLinkedVar	| p res expected |	p:=Not new:		(Imply new: 			(ForAll new: 'x' Property:				(Or new:  					(Predicate new: 'P' variable:(Term new:'x'))					 rightProp:					(Predicate new: 'Q' variable:(Term new:'x'))))			 rightProp:			(Or new: 				(Predicate new: 'P' variable:(Term new:'x'))				rightProp:(Predicate new: 'Q' variable:(Term new:'x')))).	res:=p StartSkolemnisation.	"terms1:=LinkedList new add:(ConstTerm new:(Term new:'x')); add:(ConstTerm new:(Term new:'x'));yourself."	expected:=Not new:(Imply new:					(Or new: (Predicate new: 'P' variable:(LinkedTerm new:(Term new:'x')))					rightProp: (Predicate new: 'Q' variable:(LinkedTerm new:(Term new:'x'))))				rightProp:					(Or new: (Predicate new: 'P' variable:(ConstTerm new:(Term new:'x')))					rightProp: (Predicate new: 'Q' variable:(ConstTerm new:(Term new:'x'))))).		self assert:(res isSameForTesting: expected).	self assert:((((res operand) left) left) isSameTerms: (((res operand) right) right))	"we also test that the anonymousTerms generated from the initial ConstTerm are different from the generated ConstTerm from inital LinkedTerm, even they seem equals"! !!Skolemn_test methodsFor: 'basic' stamp: 'pm 11/5/2018 18:35'!testImplyAndNestedForAll	| p res expected |	p:=Not new: 		(Imply new: 			(ForAll new: 'x' Property:				(Or new:  					(Predicate new: 'P' variable:(Term new:'x'))					 rightProp:					(Predicate new: 'Q' variable:(Term new:'x'))))			 rightProp:			(Or new: 				(Predicate new: 'P' variable:(Term new:'a'))				rightProp:(Predicate new: 'Q' variable:(Term new:'a')))).	res:=p StartSkolemnisation.	"terms1:=LinkedList new add:(ConstTerm new:(Term new:'x')); add:(ConstTerm new:(Term new:'x'));yourself."	expected:=Not new:(Imply new:(					Or new: (Predicate new: 'P' variable:(ConstTerm new:(Term new:'x')))					rightProp: (Predicate new: 'Q' variable:(ConstTerm new:(Term new:'x'))))				rightProp:(					Or new: (Predicate new: 'P' variable:(ConstTerm new:(Term new:'a')))					rightProp: (Predicate new: 'Q' variable:(ConstTerm new:(Term new:'a'))))).		^self assert:(res isSameForTesting: expected).! !!Skolemn_test methodsFor: 'basic' stamp: 'pm 11/11/2018 09:51'!testUnboundExistReplacedByConsts	| p res expected |	p:=Not new:		(Imply new: 			(ForAll new: 'x' Property:				(Or new:  					(Predicate new: 'P' variable:(Term new:'x'))					 rightProp:					(Predicate new: 'Q' variable:(Term new:'x'))))			 rightProp:			(Or new: 				(Predicate new: 'P' variable:(Term new:'x'))				rightProp:(Predicate new: 'Q' variable:(Term new:'x')))).	res:=p StartSkolemnisation.	"terms1:=LinkedList new add:(ConstTerm new:(Term new:'x')); add:(ConstTerm new:(Term new:'x'));yourself."	expected:=Not new:(Imply new:					(Or new: (Predicate new: 'P' variable:(LinkedTerm new:(Term new:'x')))					rightProp: (Predicate new: 'Q' variable:(LinkedTerm new:(Term new:'x'))))				rightProp:					(Or new: (Predicate new: 'P' variable:(ConstTerm new:(Term new:'x')))					rightProp: (Predicate new: 'Q' variable:(ConstTerm new:(Term new:'x'))))).		self assert:(res isSameForTesting: expected).	self assert:((((res operand) left) left) isSameTerms: (((res operand) right) right))	"we also test that the anonymousTerms generated from the initial ConstTerm are different from the generated ConstTerm from inital LinkedTerm, even they seem equals"! !!Skolemn_test methodsFor: 'basic' stamp: 'pm 11/5/2018 19:31'!testBasicForAll	| p res expected terms |	terms:=LinkedList new add:(Term new:'x');add:(Term new:'z');yourself.	p:=Or new: (ForAll new: 'x' Property: (ForAll new: 'z' Property: (Predicate new: 'P' fromList: terms )))	 rightProp: (ForAll new: 'x' Property: (ForAll new: 'z' Property: (Predicate new: 'P' fromList: terms ))).	res:=p StartSkolemnisation.		terms:=LinkedList new add:(LinkedTerm new:(Term new:'x')); add:(LinkedTerm new:(Term new:'z'));yourself.	expected:=Or new: (Predicate new: 'P' fromList: terms)					rightProp: (Predicate new: 'P' fromList: terms).			^self assert:(res isSameForTesting: expected).! !